{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sketch Image Loader","text":"<p> []license_link []version_link </p> <p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch is an image loading library specially designed for Compose Multiplatform and Android View. It has the following features:</p> <ul> <li><code>Multiple sources</code>: Supports loading images from multiple sources such as http, file,   compose resource, android asset/content/resource, etc.</li> <li><code>Powerful functions</code>: Supports three-level caching, automatically cancels requests, automatically   adjusts image size, automatically rotates images according to Exif Orientation, etc.</li> <li><code>Rich functions</code>: Supports Animated image, SVG images, Base64 images, and video frames</li> <li><code>Easy to expand</code>: Supports expansion of various aspects such as caching, decoding, transformation,   transition, placeholder, etc.</li> <li><code>Extended functions</code>: Practical extensions such as pausing downloads when cellular data is   provided, pausing loading during list scrolling, image type badges, download progress indicators,   etc.</li> <li><code>Modern</code>: Completely based on Kotlin and Kotlin coroutine design</li> </ul>"},{"location":"#sample-app","title":"Sample App","text":"<ul> <li>For Android, iOS, desktop version, and web deployable packages, please go to   the Releases page to download.</li> <li>Web example\uff1ahttps://panpf.github.io/sketch/app</li> </ul>"},{"location":"#install","title":"Install","text":"<p><code>Published to mavenCentral</code></p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p>"},{"location":"#compose-multiplatform","title":"Compose Multiplatform:","text":"<p>Import the required Compose and network modules:</p> <pre><code>// Provides the core functions of Sketch as well as singletons and extension \n// functions that rely on singleton implementations\nimplementation(\"io.github.panpf.sketch4:sketch-compose:${LAST_VERSION}\")\n\n// Provides the ability to load network images\nimplementation(\"io.github.panpf.sketch4:sketch-http:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] To improve the performance of compose, please copy compose_compiler_config.conf under the <code>sketch-core</code> module file to your project and configure it according to the Compose Stability Configuration documentation</p>"},{"location":"#android-view","title":"Android View:","text":"<p>Import the required View and network modules:</p> <pre><code>// Provides the core functions of Sketch as well as singletons and extension \n// functions that rely on singleton implementations\nimplementation(\"io.github.panpf.sketch4:sketch-view:${LAST_VERSION}\")\n\n// Provides the ability to load network images\nimplementation(\"io.github.panpf.sketch4:sketch-http:${LAST_VERSION}\")\n</code></pre>"},{"location":"#optional-modules","title":"Optional modules:","text":"<pre><code>// Use Android or Skia's built-in decoder to decode gif animations and play them\nimplementation(\"io.github.panpf.sketch4:sketch-animated-gif:${LAST_VERSION}\")\n\n// [Android only] Use the GifDrawable of the android-gif-drawable library to decode and play gif animations\nimplementation(\"io.github.panpf.sketch4:sketch-animated-gif-koral:${LAST_VERSION}\")\n\n// [Android only] Android or Skia's built-in decoder decodes heif animations and plays them\nimplementation(\"io.github.panpf.sketch4:sketch-animated-heif:${LAST_VERSION}\")\n\n// Use Android or Skia's built-in decoder to decode webp animations and play them\nimplementation(\"io.github.panpf.sketch4:sketch-animated-webp:${LAST_VERSION}\")\n\n// Supports BlurHash format image\nimplementation(\"io.github.panpf.sketch4:sketch-blurhash:${LAST_VERSION}\")\n\n// Support accessing compose resources through uri or placeholder, fallback, error, etc.\nimplementation(\"io.github.panpf.sketch4:sketch-compose-resources:${LAST_VERSION}\")\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-compose-resources:${LAST_VERSION}\")\n\n// Provides practical functions such as download progress, image type icons, \n//  pausing loading during list scrolling, and saving cellular traffic.\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n\n// [Android only] Support icon loading of apk files via file path \nimplementation(\"io.github.panpf.sketch4:sketch-extensions-apkicon:${LAST_VERSION}\")\n\n// [Android only] Support loading icons of installed apps by package name and version code\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-appicon:${LAST_VERSION}\")\n\n// [JVM only] Support using HttpURLConnection to access network images\nimplementation(\"io.github.panpf.sketch4:sketch-http-hurl:${LAST_VERSION}\")\n\n// [JVM only] Support using OkHttp to access network images\nimplementation(\"io.github.panpf.sketch4:sketch-http-okhttp:${LAST_VERSION}\")\n\n// Supports using ktor version 2.x to access network images\nimplementation(\"io.github.panpf.sketch4:sketch-http-ktor2:${LAST_VERSION}\")\n\n// Supports using ktor version 3.x to access network images\nimplementation(\"io.github.panpf.sketch4:sketch-http-ktor3:${LAST_VERSION}\")\n\n// Provides koin integration support, instead of sketch-compose and sketch-view, \n// and obtains Sketch instances from koin by default\nimplementation(\"io.github.panpf.sketch4:sketch-compose-koin:${LAST_VERSION}\")\nimplementation(\"io.github.panpf.sketch4:sketch-view-koin:${LAST_VERSION}\")\n\n// Support SVG images\nimplementation(\"io.github.panpf.sketch4:sketch-svg:${LAST_VERSION}\")\n\n// [Android only] Use Android's built-in MediaMetadataRetriever class to decode video frames\nimplementation(\"io.github.panpf.sketch4:sketch-video:${LAST_VERSION}\")\n\n// [Android only] Decoding video frames using wseemann's FFmpegMediaMetadataRetriever library\nimplementation(\"io.github.panpf.sketch4:sketch-video-ffmpeg:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] * <code>sketch-compose</code>, <code>sketch-view</code> Modules all depend on the singleton provided by     the <code>sketch-singleton</code> module. If you don\u2019t need the singleton, you can directly rely on     their <code>*-core</code> version. * The <code>sketch-http</code> module depends on <code>sketch-http-hurl</code> on jvm platforms and <code>sketch-http-ktor3</code>     on non-jvm platforms.</p>"},{"location":"#register-component","title":"Register component","text":"<p>Sketch supports automatic discovery and registration of Fetcher and Decoder components, which are implemented through ServiceLoader on the JVM platform and through the @EagerInitialization annotation on non-JVM platforms.</p> <p>All built-in modules support automatic registration. If you want to disable automatic registration, please refer to the documentation for manual registration: \u300aRegister component\u300b</p>"},{"location":"#r8-proguard","title":"R8 / Proguard","text":"<ol> <li>Android, iOS, Web and other platforms do not need to configure any obfuscation rules</li> <li>The following obfuscation rules are required for desktop platforms:     <pre><code># -------------------------- Sketch Privider ---------------------------- #\n-keep class * implements com.github.panpf.sketch.util.DecoderProvider { *; }\n-keep class * implements com.github.panpf.sketch.util.FetcherProvider { *; }\n</code></pre></li> <li>It may also be necessary to add obfuscation configurations to the indirect dependencies of    three-party libraries such as Kotlin Coroutines, OkHttp, Okio</li> </ol>"},{"location":"#quickly-started","title":"Quickly Started","text":""},{"location":"#compose-multiplatform_1","title":"Compose Multiplatform:","text":"<pre><code>// val imageUri = \"/Users/my/Downloads/image.jpg\"\n// val imageUri = file:///compose_resource/composeResources/com.github.panpf.sketch.sample.resources/files/sample.png\nval imageUri = \"https://www.sample.com/image.jpg\"\n\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    uri = imageUri,\n    state = rememberAsyncImageState(ComposableImageOptions {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    }),\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    rqeuest = ComposableImageRequest(imageUri) {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    },\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(\n        request = ComposableImageRequest(imageUri) {\n            placeholder(Res.drawable.placeholder)\n            error(Res.drawable.error)\n            crossfade()\n            // There is a lot more...\n        }\n    ),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] <code>placeholder(Res.drawable.placeholder)</code> needs to import the <code>sketch-compose-resources</code> module</p>"},{"location":"#android-view_1","title":"Android View:","text":"<pre><code>// val imageUri = \"/sdcard/download/image.jpg\"\n// val imageUri = \"file:///android_asset/image.jpg\"\n// val imageUri = \"content://media/external/images/media/88484\"\nval imageUri = \"https://www.sample.com/image.jpg\"\n\nimageView.loadImage(imageUri)\n\nimageView.loadImage(imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    // There is a lot more...\n}\n\nval request = ImageRequest(context, imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    target(imageView)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n</code></pre>"},{"location":"#documents","title":"Documents","text":"<p>Basic functions:</p> <ul> <li>Get Started</li> <li>Register component</li> <li>Compose</li> <li>Http: Load network images</li> <li>AnimatedImage: GIF\u3001WEBP\u3001HEIF</li> <li>Resize: Modify the image size</li> <li>Transformation: Transformation image</li> <li>Transition: Display images in cool transitions</li> <li>StateImage: Placeholder and error images</li> <li>Listener: Listen for request status and download progress</li> <li>DownloadCache: Understand download caching to avoid repeated downloads</li> <li>ResultCache: Understand result caching to avoid duplicate conversions</li> <li>MemoryCache: Understand memory caching to avoid repeated loading</li> <li>Fetcher: Learn about Fetcher and extend new URI types</li> <li>Decoder: Understand the decoding process of Sketch</li> <li>Target: Apply the load results to the target</li> <li>SVG: Decode SVG still images</li> <li>VideoFrames: Decode video frames</li> <li>BlurHash</li> <li>ExifOrientation: Correct the image orientation</li> <li>ImageOptions: Manage image configurations in a unified manner</li> <li>RequestInterceptor: Intercept ImageRequest</li> <li>DecodeInterceptor: Intercept the decoding process</li> <li>Preload images into memory</li> <li>Download images</li> <li>Lifecycle</li> <li>Log</li> <li>Migrate</li> </ul> <p>Featured functions:</p> <ul> <li>SketchImageView: Configure the request through XML attributes</li> <li>Improve the clarity of long images in grid lists</li> <li>Displays the download progress</li> <li>Displays the image type corner</li> <li>Pause image downloads on cellular data to save data</li> <li>The list slides to pause the loading of images</li> <li>Displays an icon for an apk file or installed app</li> </ul>"},{"location":"#change-log","title":"Change log","text":"<p>Please review the CHANGELOG.md file</p>"},{"location":"#test-platform","title":"Test Platform","text":"<ul> <li>Android: Emulator; Arm64; API 21-34</li> <li>Desktop: macOS; 14.6.1; JDK 17</li> <li>iOS: iphone 16 simulator; iOS 18.1</li> <li>Web: Chrome; 130</li> </ul>"},{"location":"#run-sample-app","title":"Run Sample App","text":"<p>Prepare the environment:</p> <ol> <li>Android Studio: Norwhal+ (2025.1.1+)</li> <li>JDK: 17+</li> <li>Use kdoctor to check the running environment and follow the prompts to install the required    software</li> <li>Android Studio installs the <code>Kotlin Multiplatform</code> plugin</li> </ol> <p>Run the sample app:</p> <ol> <li>Clone the project and open it using Android Studio</li> <li>After synchronization is completed, the <code>Kotlin Multiplatform</code> plug-in will automatically create    a running configuration for each platform.</li> <li>Select the corresponding platform's running configuration, and then click Run</li> </ol>"},{"location":"#about-version-40","title":"About version 4.0","text":"<ul> <li>The maven groupId is upgraded to <code>io.github.panpf.sketch4</code>, so versions 2.* and 3.* will not   prompt for upgrade</li> <li>Version 4.0 is specially built for Compose Multiplatform, so there are many breaking changes in   the API, please upgrade with caution</li> <li>Version 4.0 has made a lot of simplifications and is much simpler than version 3.0, please check   the update log for details</li> <li>Android minimum API raised to API 21</li> <li>Kotlin version upgraded to 2.0.0</li> </ul>"},{"location":"#special-thanks","title":"Special thanks","text":"<ul> <li>coil-kt/coil: Sketch uses some code from Coil, including framework, compose and   sketch-animated movie part</li> <li>koral--/android-gif-drawable: animated-koralgif</li> <li>wseemann/FFmpegMediaMetadataRetriever: video-ffmpeg</li> <li>BigBadaboom/androidsvg: svg</li> </ul>"},{"location":"#my-projects","title":"My Projects","text":"<p>The following are my other open source projects. If you are interested, you can learn about them:</p> <ul> <li>zoomimage: Library for zoom images, supported Android View,   Compose and Compose Multiplatform; supported double-click zoom, One or two fingers gesture zoom,   single-finger drag, inertial sliding, positioning, rotation, super-large image subsampling and   other functions.</li> <li>assembly-adapter: A library on Android that provides   multi-type Item implementations for various adapters. Incidentally, it also provides the most   powerful divider for RecyclerView.</li> <li>sticky-item-decoration: RecyclerView sticky item   implementation</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache 2.0. See the LICENSE file for details.</p>"},{"location":"CHANGELOG/","title":"Change Log","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!CAUTION] 1. The 4.x version has undergone a lot of destructive reconstruction and simplification to be      compatible with Compose Multiplatform, and is not compatible with the 3.x version. 2. The maven groupId is upgraded to <code>io.github.panpf.sketch4</code>, so versions 2.* and 3.* will not      prompt for upgrade. 3. Reference \u300aMigration Documentation\u300b migrating from 3.x to 4.x</p>"},{"location":"CHANGELOG/#440-alpha01","title":"4.4.0-alpha01","text":"<ul> <li>improve: DecodeConfig is now accessible from the common module</li> <li>new: Added the 'sketch-blurhash' module to support BlurHash. Please refer to the documentation for   details. BlurHash. #261</li> </ul>"},{"location":"CHANGELOG/#431","title":"4.3.1","text":"<ul> <li>fix: Fixed a bug that returned null when ThumbnailMemoryCacheStateImage starts with version   4.3.0. #263</li> </ul>"},{"location":"CHANGELOG/#430","title":"4.3.0","text":"<ul> <li>fix: Fixed a bug that caused the App to crash or image loading failure when   ThumbnailMemoryCacheStateImage to encounter memory cache without   ImageInfo. #259</li> <li>fix: Fixed a bug where MemoryCacheRequestInterceptor failed to load images when they encountered a   cache without ImageInfo. #260</li> <li>break: 'sketch-compose-koin', 'sketch-view-koin', 'sketch-koin' The file name of the module has   been changed from Singleton to Koin, and binary compatibility is corrupted. The library that   depends on this may need to be recompiled.</li> <li>new: MemoryCache added entries() method to get all cache entries</li> <li>improve: Improve the performance of ThumbnailMemoryCacheStateImage, now iterates through all   memory caches by default and improves the judgment accuracy of thumbnail images.</li> </ul>"},{"location":"CHANGELOG/#420","title":"4.2.0","text":"<p>[!NOTE] There is no change compared to the 4.2.0-beta02 version</p> <ul> <li>fix: Fixed a bug that did not update download progress when using sketch-http-ktor3 and   sketch-http-ktor2. #253</li> <li>fix: Fixed the bug where AsyncImageState can still receive the cancel status of the old request   after canceling the old request due to the new request.</li> <li>change: Deprecate AsyncImage with keepContentNoneStartOnDraw parameter</li> <li>change: Deprecate the fitScale property of TransitionTarget, adding ViewTarget.scaleType   and ComposeTarget.contentsScale and ComposeTarget.alignment instead of fitScale</li> <li>change: AnimatedImage is now an interface, and its implementation class is SkiaAnimatedImage</li> <li>improve: Thin request logs and remove information that is not related to loading</li> <li>new: CrossfadePainter now supports contentScale and alignment</li> <li>new: ResizePainter now supports contentScale and alignment</li> <li>new: CrossfadeDrawable now supports scaleType</li> <li>new: ResizeDrawable now supports scaleType</li> <li>new: Added <code>sketch-compose-koin</code> and <code>sketch-view-koin</code> modules to provide Koin dependency   injection support. #256</li> <li>new: Added <code>Sketch(PlatformContext, (Sketch.Builder.() -&gt; Unit)? = null)</code> function and   <code>Sketch.Builder.logger(Logger)</code> function</li> <li>new: ImageRequest, ImageOptions and ImageResult.Success add downloadCacheKey,   downloadCacheKeyMapper, resultCacheKey,   resultCacheKeyMapper, memoryCacheKey, memoryCacheKeyMapper   properties. #255</li> </ul>"},{"location":"CHANGELOG/#420-beta02","title":"4.2.0-beta02","text":"<ul> <li>new: Added <code>sketch-compose-koin</code> and <code>sketch-view-koin</code> modules to provide Koin dependency   injection support. #256</li> <li>new: Added <code>Sketch(PlatformContext, (Sketch.Builder.() -&gt; Unit)? = null)</code> function and   <code>Sketch.Builder.logger(Logger)</code> function</li> <li>new: ImageRequest, ImageOptions and ImageResult.Success add downloadCacheKey,   downloadCacheKeyMapper, resultCacheKey,   resultCacheKeyMapper, memoryCacheKey, memoryCacheKeyMapper   properties. #255</li> </ul>"},{"location":"CHANGELOG/#420-beta01","title":"4.2.0-beta01","text":"<ul> <li>fix: Fixed a bug that did not update download progress when using sketch-http-ktor3 and   sketch-http-ktor2. #253</li> <li>fix: Fixed the bug where AsyncImageState can still receive the cancel status of the old request   after canceling the old request due to the new request.</li> <li>change: Deprecate AsyncImage with keepContentNoneStartOnDraw parameter</li> <li>change: Deprecate the fitScale property of TransitionTarget, adding ViewTarget.scaleType   and ComposeTarget.contentsScale and ComposeTarget.alignment instead of fitScale</li> <li>change: AnimatedImage is now an interface, and its implementation class is SkiaAnimatedImage</li> <li>improve: Thin request logs and remove information that is not related to loading</li> <li>new: CrossfadePainter now supports contentScale and alignment</li> <li>new: ResizePainter now supports contentScale and alignment</li> <li>new: CrossfadeDrawable now supports scaleType</li> <li>new: ResizeDrawable now supports scaleType</li> </ul>"},{"location":"CHANGELOG/#410","title":"4.1.0","text":"<p>[!CAUTION] The compose multiplatform version 1.8.0 must be jvm 11 to compile. Please modify the configuration of sourceCompatibility, targetCompatibility, jvmTarget, etc. to 11+</p> <ul> <li>fix: Fixed a bug where CrossfadePainter, ResizePainter, ImageBitmapPainter and DrawablePainter   cannot fill the canvas due to loss of floating point precision</li> <li>new: AsyncImage Adds the keepContentNoneStartOnDraw param</li> <li>depend: Update to kotlin 2.1.10</li> <li>depend: Update to compose multiplatform 1.8.0</li> <li>depend: Update to android-gif-drawable 1.2.29</li> <li>depend: Update to ffmpegMediaMetadataRetriever 1.0.19</li> <li>depend: Update to jetbrains-lifecycle 2.8.4</li> <li>depend: Update to kotlinx-coroutines 1.10.2</li> <li>depend: Update to ktor2 2.3.13</li> <li>depend: Update to ktor3 3.0.3</li> <li>depend: Update to okio 3.11.0</li> <li>depend: Don't replace <code>kotlin-stdlib-jdk7</code> and <code>kotlin-stdlib-jdk8</code> with <code>kotlin-stdlib</code></li> </ul>"},{"location":"CHANGELOG/#406","title":"4.0.6","text":"<p>compose:</p> <ul> <li>improve: AsyncImage now no longer crashes when the window size is 0, but is a minimum of</li> <li>[#244](https://github.com/panpf/sketch/issues/244</li> </ul>"},{"location":"CHANGELOG/#405","title":"4.0.5","text":"<p>fetch:</p> <ul> <li>fix: Fixed a bug in FileUriFetcher that failed to load the windows file   path. #239</li> </ul>"},{"location":"CHANGELOG/#404","title":"4.0.4","text":"<p>compose:</p> <ul> <li>fix: Fixed a bug where AsyncImage and SubcomposeAsyncImage could not load images when component   size is 0. #236</li> <li>improve: Restore AsyncImage and SubcomposeAsyncImage function to replace window container size if   width or height is 0 when setting size</li> </ul>"},{"location":"CHANGELOG/#403","title":"4.0.3","text":"<ul> <li>fix: Fixed a bug that SvgDecoder could not recognize when there was comment on the head of the svg   file. #232</li> </ul>"},{"location":"CHANGELOG/#402","title":"4.0.2","text":"<p>compose:</p> <ul> <li>fix: The AsyncImage component is reloaded when the current window size   changes. #231</li> </ul>"},{"location":"CHANGELOG/#401","title":"4.0.1","text":"<p>android:</p> <ul> <li>fix: Fixed a bug where Resources were not set when BitmapImage was converted to BitmapDrawable,   causing the Intrinsic size of BitmapDrawable to be inconsistent with   Bitmap. #226</li> </ul>"},{"location":"CHANGELOG/#400-stable","title":"4.0.0 Stable","text":"<p>Sketch:</p> <ul> <li>change: SketchSingleton refactored into SingletonSketch</li> <li>change: Sketch's execute(DownloadRequest) and enqueue(DownloadRequest) methods are refactored into   executeDownload(ImageRequest) and enqueueDownload(ImageRequest)</li> <li>new: Sketch.Builder and ComponentRegistry.Builder added addComponents() function</li> <li>new: Sketch.Builder adds networkParallelismLimited() and decodeParallelismLimited()   Method to control the number of network and decoding   concurrency. #200</li> <li>new: Added ComponentLoader, which supports automatic detection and registration of Fetcher and   Decoder components. All components in the built-in module are supported.</li> </ul> <p>request:</p> <ul> <li>change: There is no longer a distinction between Display, Load and Download, now there is only one   ImageRequest, ImageResult and ImageListener</li> <li>change: The requestKey attribute of ImageResult has been removed, and the requestCacheKey   attribute has been renamed to cacheKey.</li> <li>change: Now Target, ImageResult, DecodeResult all use Image</li> <li>change: SketchDrawable's imageUri, requestKey, requestCacheKey, imageInfo, dataFrom,   transformedList, extras and other attributes have been removed, now please get them from   ImageResult</li> <li>change: depth and depthFrom properties merged into DepthHolder</li> <li>change: Android platform-specific APIs such as bitmapConfig, colorSpace, preferQualityOverSpeed,   placeholder(Int), fallback(Int), error(Int), etc. are provided in the form of extension functions</li> <li>change: resizeApplyToDrawable renamed to resizeOnDraw</li> <li>change: Parameters renamed to Extras</li> <li>change: LongImageClipPrecisionDecider renamed to LongImagePrecisionDecider,   LongImageStartCropScaleDecider renamed to LongImageScaleDecider</li> <li>remove: Removed listener() and progressListener() methods, now use addListener() and   addProgressListener() methods</li> <li>new: Added 'sizeMultiplier: Float' attribute for setting the scaling ratio of image size</li> <li>new: Added 'allowNullImage: Boolean' attribute</li> </ul> <p>fetch:</p> <ul> <li>change: The parameter passed in Fetcher.Factory.create() is changed to RequestContext</li> <li>new: ResourceUriFetcher supports 'android.resource:///drawable/ic_launcher' and 'android.resource:   ///1031232' uris</li> <li>new: AssetUriFetcher supports 'file:///android_asset/' uri</li> </ul> <p>source:</p> <ul> <li>change: Refactor DataSource</li> </ul> <p>decode:</p> <ul> <li>change: BitmapDecoder and DrawableDecoder merged into Decoder</li> <li>change: Decoder's decode() method removes the suspend modifier and changes the return type from   Result to DecodeResult <li>change: BitmapDecodeInterceptor and DrawableDecodeInterceptor merged into DecodeInterceptor</li> <li>change: BitmapConfig refactored to BitmapColorType</li> <li>improve: Improve the accuracy of animation-related Decoder in determining the image type. No   longer rely on the mimeType attribute of FetchResult because it may be inaccurate.</li> <li>new: DrawableDecoder supports colorSpace</li> <p>transformation:</p> <ul> <li>fix: Fix the bug that CircleCrop, Rotate, RoundedCorners Transformation does not work at   RGB_565. #209</li> <li>fix: Fixed the bug that Transformations such as blur and rotate on the Android platform did not   keep the ColorSpace unchanged. #213</li> <li>change: Transformation's transform() method removes the suspend modifier</li> </ul> <p>cache:</p> <ul> <li>remove: Remove BitmapPool and its related disallowReuseBitmap attribute, CountBitmap, and   SketchCountBitmapDrawable classes</li> <li>change: Refactor DiskCache SnapShot and Editor, get() and edit() are changed to openSnapShot() and   openEditor(), and openSnapShot() and openEditor() of the same key now conflict with each other,   openEditor always returns null before openSnapshot is closed.</li> <li>change: Refactor MemoryCache.Value</li> </ul> <p>state:</p> <ul> <li>change: uriEmpty property of ImageRequest and ImageOptions renamed to fallback</li> <li>change: The type of error attribute of ImageRequest and ImageOptions changed from ErrorStateImage   to StateImage</li> <li>change: ErrorStateImage removes ErrorStateImage.Builder.uriEmptyError() method and refactors it   into ConditionStateImage</li> <li>improve: Improve IconDrawable, support fixed-size background and restrict icons to have fixed   sizes or specify iconSize</li> </ul> <p>animated:</p> <ul> <li>fix: Fixed the bug that GifDrawable and MovieDrawable could not apply animatedTransformation   correctly. #214</li> <li>fix: Fixed the bug that the repeatCount setting of GifDrawableDecoder should be increased by 1 by   mistake. #215</li> <li>change: Split the sketch-animated module into sketch-animated-core and sketch-animated-gif,   sketch-animated-webp, sketch-animated-heif, sketch-animated-koralgif module and rename it to   sketch-animated-gif-koral</li> </ul> <p>http:</p> <ul> <li>remove: Removed setHttpHeader() and addHttpHeader() methods of DisplayRequest.Builder and   DisplayOptions.Builder</li> <li>change: The http function is split into separate modules. The sketch-http, sketch-http-hurl,   sketch-http-ktor2, and sketch-http-ktor3 modules are added. The sketch-okhttp module is renamed   sketch-http-okhttp.</li> </ul> <p>compose:</p> <ul> <li>fix: Fix the bug that the filterQuality parameter of AsyncImage is   invalid. #211</li> <li>remove: AsyncImage composable function removes placeholder, error, uriEmpty, onLoading, onSuccess,   onError parameters</li> <li>new: AsyncImageState can now set ImageOptions, for example: 'rememberAsyncImageState {   ImageOptions() }'</li> <li>new: Added ErrorStateImage.Builder.saveCellularTrafficError(DrawableResource) extension function</li> <li>new: ImageRequest.Builder and ImageOptions.Builder add size(IntSize) extension function</li> <li>new: AsyncImageState adds onPainterState and onLoadState properties, which are used to receive   PainterState and LoadState updates in the form of callbacks.</li> <li>new: Added ComposableImageRequest() and ComposableImageOptions() functions, which can be used   directly on placeholder, error, and fallback methods using DrawableResource</li> </ul> <p>view:</p> <ul> <li>fix: Fix the bug that the image cannot be loaded when the ImageView is attached to the window but   size is null due to padding. #208</li> <li>change: displayImage renamed to loadImage</li> <li>change: ImageView.disposeDisplay() renamed to ImageView.disposeLoad()</li> <li>new: ImageRequest.Builder and ImageOptions.Builder add sizeWithView() and sizeWithDisplay()   extension functions</li> </ul> <p>extensions:</p> <ul> <li>fix: Fix the bug of exception when AppIconUriFetcher.Factory parses   versionCode. #204</li> <li>change: Split the sketch-extensions-apkicon and sketch-extensions-appicon modules from the   sketch-extensions-core module</li> </ul> <p>other:</p> <ul> <li>upgrade: Android minimum API raised to API 21</li> <li>depend: Upgrade kotlin 2.0.21, kotlinx coroutines 1.9.0</li> <li>depend: Upgrade jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> </ul>"},{"location":"CHANGELOG/#v400-rc01","title":"v4.0.0-rc01","text":"<p>compose:</p> <ul> <li>new: AsyncImageState adds onPainterState and onLoadState properties, which are used to receive   PainterState and LoadState updates in the form of callbacks.</li> </ul>"},{"location":"CHANGELOG/#v400-beta03","title":"v4.0.0-beta03","text":"<p>core:</p> <ul> <li>new: Added Image.asBitmap(), asBitmapOrNull(), asDrawableOrNull(), asPainterOrNull() extension   functions</li> <li>improve: The defaultImage property of ConditionStateImage and ComposableConditionStateImage is now   nullable</li> </ul> <p>decode:</p> <ul> <li>improve: Improve to determine whether regional decoding is supported based on mimeType. Non-image   types directly return false. On non-Android platforms, based on the skiko version, it is   determined whether heic, heif, and avi types are supported.</li> </ul> <p>fetch:</p> <ul> <li>improve: AssetUriFetcher and ResourceUriFetcher are now compatible with the sketch3 protocol</li> </ul>"},{"location":"CHANGELOG/#400-beta02","title":"4.0.0-beta02","text":"<p>core:</p> <ul> <li>fix: Fixed a bug that caused REMOVE records to be lost due to disk cache being killed, and   re-initialization did not verify whether the file existed, causing size()   exceptions. #219</li> </ul> <p>animated:</p> <ul> <li>fix: Fixed the bug that the dependency of sketch-animated-heif accidentally included the local   test module. #220</li> </ul>"},{"location":"CHANGELOG/#400-beta01","title":"4.0.0-beta01","text":"<p>core:</p> <ul> <li>remove: Remove Image.getPixels()</li> <li>remove: Remove the AnyThread, MainThread, IntRange, and IntDef annotations under the '   com.github.panpf.sketch.annotation' package and use the alternatives under the '   androidx.annotation' package</li> <li>change: Merge AndroidBitmapImage and SkiaBitmapImage into BitmapImage</li> <li>change: DrawableEqualizer renamed to EquitableDrawable</li> <li>change: Remove AndroidBitmap, SkiBitmap, SkiaImageInfo, SkiaImage, SkiaRect</li> <li>change: SkiaAnimatedImage renamed to AnimatedImage</li> <li>change: ImageRequest's registerListener and registerProgressListener methods renamed to   addListener and addProgressListener</li> <li>new: Added ComponentLoader, which supports automatic detection and registration of Fetcher and   Decoder components. All components in the built-in module are supported.</li> </ul> <p>compose:</p> <ul> <li>fix: Fix the bug that the filterQuality parameter of AsyncImage is   invalid. #211</li> <li>remove: Remove ComposeBitmapImage</li> <li>remove: Remove PainterState.Empty</li> <li>change: PainterEqualizer renamed to EquitablePainter</li> <li>change: ComposeImagePainter renamed to ImageBitmapPainter, SkiaAnimatedImagePainter renamed to   AnimatedImagePainter</li> </ul> <p>view:</p> <ul> <li>fix: Fix the bug that the image cannot be loaded when the ImageView is attached to the window but   size is null due to padding. #208</li> </ul> <p>decode:</p> <ul> <li>change: Decoder's decode() method removes the suspend modifier and changes the return type from   Result to DecodeResult <li>change: BitmapConfig refactored to BitmapColorType</li> <li>new: Non-Android platforms now also support ColorType</li> <li>new: Non-Android platforms now also support ColorSpace</li> <li>new: DrawableDecoder supports colorSpace</li> <p>fetch:</p> <ul> <li>change: The parameter passed in Fetcher.Factory.create() is changed to RequestContext</li> </ul> <p>cache:</p> <ul> <li>change: SkiaBitmapImage is now cached in the memory cache on non-Android platforms, not   ComposeBitmapImage.</li> <li>change: The default memory cache size is now 256MB for desktop and web platforms and 128MB for ios   platforms</li> </ul> <p>http:</p> <ul> <li>remove: Removed the setHttpHeader() and addHttpHeader() methods of ImageRequest.Builder and   ImageOptions.Builder</li> <li>change: Remove the sketch-http-core module, add the sketch-http-hurl module, rename the   sketch-http-ktor module to sketch-http-ktor2 and no longer support wasmJs, add the   sketch-http-ktor3 module</li> </ul> <p>animated:</p> <ul> <li>fix: Fixed the bug that on non-Android platforms, animations set repeatCount and do not stay on   the last frame after playing, but stay on the first   frame. #212</li> <li>fix: Fixed the bug that GifDrawable and MovieDrawable could not apply animatedTransformation   correctly. #214</li> <li>fix: Fixed the bug that the repeatCount setting of GifDrawableDecoder should be increased by 1 by   mistake. #215</li> <li>change: Split the sketch-animated module into sketch-animated-core and sketch-animated-gif,   sketch-animated-webp, sketch-animated-heif, sketch-animated-koralgif module and rename it to   sketch-animated-gif-koral</li> <li>improve: animatedTransformation now supports non-Android platforms</li> </ul> <p>transformation:</p> <ul> <li>fix: Fix the bug that CircleCrop, Rotate, RoundedCorners Transformation does not work at   RGB_565. #209</li> <li>fix: Fixed the bug that Transformations such as blur and rotate on the Android platform did not   keep the ColorSpace unchanged. #213</li> <li>change: Transformation's transform() method removes the suspend modifier</li> </ul> <p>state:</p> <ul> <li>change: The type of error attribute of ImageRequest and ImageOptions changed from ErrorStateImage   to StateImage</li> <li>change: ErrorStateImage is refactored into ConditionStateImage, and ConditionStateImage can be   used in placeholder and fallback</li> <li>improve: Improve IconDrawable, support fixed-size background and restrict icons to have fixed   sizes or specify iconSize</li> <li>improve: Improve IconPainter, support fixed-size background and restrict icons to have fixed sizes   or specify iconSize</li> <li>new: Added 'Drawable.asStateImage(Any)' and 'ColorDrawable.asStateImage()' extension functions</li> </ul> <p>extensions:</p> <ul> <li>fix: Fixed the bug that the equals method of RingProgressDrawable, SectorProgressDrawable,   RingProgressPainter, SectorProgressPainter did not execute as   expected. #210</li> <li>change: Split the sketch-extensions-apkicon and sketch-extensions-appicon modules from the   sketch-extensions-core module</li> </ul> <p>other:</p> <ul> <li>depend: Upgrade kotlin 2.0.21, kotlinx coroutines 1.9.0</li> <li>depend: Upgrade jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> </ul>"},{"location":"CHANGELOG/#400-alpha08","title":"4.0.0-alpha08","text":"<ul> <li>fix: Fixed the bug that the ComposableImageRequest() and ComposableImageOptions() functions cannot   listen and update the Compose State. #207</li> <li>fix: Fix the bug that CircleCrop, Rotate, RoundedCorners Transformation does not work at   RGB_565. #209</li> <li>remove: Remove SkiaExifOrientationHelper</li> <li>remove: DataSource removes sketch and request attributes</li> <li>change: DataSource's getFile() and getFileOrNull() methods add Sketch parameters</li> <li>change: DataSource's openSourceOrNull() and getFileOrNull() methods are now available as extension   functions</li> <li>change: RequestContext moved to 'com.github.panpf.sketch.request' package</li> <li>new: SkiaBitmapImage now supports memory caching</li> <li>new: DataSource adds key attribute</li> </ul>"},{"location":"CHANGELOG/#400-alpha07","title":"4.0.0-alpha07","text":"<ul> <li>improve: SkiaAnimatedImagePainter now does not share Bitmap for decoding and drawing to avoid   cluttered images. #206</li> <li>improve: SkiaAnimatedImagePainter now still does not start animation when drawing, it will   automatically load the first frame</li> <li>new: SkiaAnimatedImagePainter now supports caching frames that take longer to decode than the   frame duration to improve playback smoothness, but this uses more memory, closed by default,   enabled through 'cacheDecodeTimeoutFrame()' function</li> </ul>"},{"location":"CHANGELOG/#400-alpha06","title":"4.0.0-alpha06","text":"<ul> <li>fix: Fixed a bug where SkiaAnimatedImagePainter crashed when encountering disguised gif   images. #205</li> <li>improve: Improve the accuracy of animation-related Decoder in determining the image type. No   longer rely on the mimeType attribute of FetchResult because it may be inaccurate.</li> </ul>"},{"location":"CHANGELOG/#400-alpha05","title":"4.0.0-alpha05","text":"<ul> <li>fix: Fix the bug of exception when AppIconUriFetcher.Factory parses   versionCode. #204</li> <li>change: KotlinResourceUriFetcher supported uri changed from 'kotlin.resource://'   to 'file:///kotlin_resource/'</li> <li>change: ComposeResourceUriFetcher supported uri changed from 'compose.resource://'   to file:///compose_resource/</li> <li>change: The uri supported by ResourceUriFetcher has been changed from 'android.resource:   //resource?resType=drawable&amp;resName=ic_launcher' and 'android.resource://resource?resId=1031232'   to 'android.resource:///drawable/ic_launcher' and ' android.resource:///1031232'</li> <li>change: AssetUriFetcher supported uri changed from 'asset://' to 'file:///android_asset/'</li> <li>change: ImageRequest.uri property type changed from String to Uri</li> <li>improve: All implementation classes of DataSource implement equals and hashCode methods</li> <li>improve: All implementation classes of Fetcher implement equals and hashCode methods</li> </ul>"},{"location":"CHANGELOG/#400-alpha04","title":"4.0.0-alpha04","text":"<ul> <li>fix: Fixed the issue where HurlStack and OkHttpStack failed to control network concurrency due to   switching threads again. #199</li> <li>fix: Fixed the bug that decoding pictures will not start until all network tasks are   completed. #201</li> <li>change: The mergeComponents() method of ImageOptions and ImageRequest has been renamed to   addComponents()</li> <li>change: The drawableResId parameter of ImageView.loadImage() and newResourceUri() functions was   renamed to resId</li> <li>change: AndroidLogPipeline and PrintLogPipeline are changed to singleton mode</li> <li>improve: Check the type of PlatformContext to prevent passing Activity to Sketch or ImageRequest</li> <li>new: Add PlatformContext.sketch and View.sketch extension functions</li> <li>new: Sketch.Builder and ComponentRegistry.Builder added addComponents() function</li> <li>new: Sketch.Builder adds networkParallelismLimited() and decodeParallelismLimited() methods to   control the number of network and decoding   concurrency. #200</li> </ul>"},{"location":"CHANGELOG/#400-alpha03","title":"4.0.0-alpha03","text":"<ul> <li>change: ComposeBitmapValue renamed to ComposeBitmapImageValue</li> <li>change: Refactor Sketch.enqueueDownload() and executeDownload() and move from   sketch-extensions-core module to sketch-core module</li> <li>change: LongImageClipPrecisionDecider renamed to LongImagePrecisionDecider,   LongImageStartCropScaleDecider renamed to LongImageScaleDecider</li> <li>change: Revert to using screen size as final Size when building ImageRequest</li> <li>improve: Painter.asSketchImage() now returns PainterImage; ComposeBitmap.asSketchImage() now   returns ComposeBitmapImage</li> <li>new: ImageRequest.Builder and ImageOptions.Builder add sizeWithView(), sizeWithDisplay(), size(   IntSize) extension functions</li> </ul>"},{"location":"CHANGELOG/#400-alpha02","title":"4.0.0-alpha02","text":"<ul> <li>change: ImageView.disposeDisplay() renamed to ImageView.disposeLoad()</li> <li>new: Added ImageRequest.Builder.composableError() and ImageOptions.Builder.composableError()   extension functions</li> <li>new: Added ErrorStateImage.Builder.saveCellularTrafficError(DrawableResource) extension function</li> </ul>"},{"location":"CHANGELOG/#400-alpha01","title":"4.0.0-alpha01","text":"<p>Sketch:</p> <ul> <li>change: SketchSingleton refactored into SingletonSketch</li> </ul> <p>request:</p> <ul> <li>change: There is no longer a distinction between Display, Load and Download, now there is only one   ImageRequest, ImageResult and ImageListener</li> <li>change: The requestKey attribute of ImageResult has been removed, and the requestCacheKey   attribute has been renamed to cacheKey.</li> <li>change: Now Target, ImageResult, DecodeResult all use Image</li> <li>change: SketchDrawable's imageUri, requestKey, requestCacheKey, imageInfo, dataFrom,   transformedList, extras and other properties have been removed, now please get them from   ImageResult</li> <li>change: depth and depthFrom properties merged into DepthHolder</li> <li>change: Android platform-specific APIs such as bitmapConfig, colorSpace, preferQualityOverSpeed,   placeholder(Int), fallback(Int), error(Int), etc. are provided in the form of extension functions</li> <li>change: resizeApplyToDrawable renamed to resizeOnDraw</li> <li>change: Parameters renamed to Extras</li> <li>new: Added 'sizeMultiplier: Float' attribute to set the scaling ratio of the image size</li> <li>new: Added 'allowNullImage: Boolean' attribute</li> </ul> <p>decode:</p> <ul> <li>change: BitmapDecoder and DrawableDecoder merged into Decoder</li> <li>change: BitmapDecodeInterceptor and DrawableDecodeInterceptor merged into DecodeInterceptor</li> </ul> <p>cache:</p> <ul> <li>remove: Remove BitmapPool and its related disallowReuseBitmap attribute, CountBitmap, and   SketchCountBitmapDrawable classes</li> <li>change: Refactor DiskCache SnapShot and Editor, get() and edit() are changed to openSnapShot() and   openEditor(), and openSnapShot() and openEditor() of the same key now conflict with each other,   openEditor always returns null before openSnapshot is closed.</li> <li>change: Refactor MemoryCache.Value</li> </ul> <p>state:</p> <ul> <li>change: uriEmpty attribute of ImageRequest and ImageOptions renamed to fallback</li> <li>remove: Delete ErrorStateImage.Builder.uriEmptyError()</li> </ul> <p>compose:</p> <ul> <li>remove: AsyncImage composable function removes placeholder, error, uriEmpty, onLoading, onSuccess,   onError parameters</li> <li>upgrade\uff1aCompose Multiplatform upgraded to 1.6.10</li> <li>new: AsyncImageState can now set ImageOptions, for example: 'rememberAsyncImageState {   ImageOptions() }'</li> </ul> <p>view:</p> <ul> <li>change: displayImage renamed to loadImage</li> </ul> <p>other:</p> <ul> <li>upgrade\uff1aAndroid minimum API raised to API 21</li> <li>upgrade\uff1akotlin is upgraded to 2.0.0, mainly to support Compose Multiplatform 1.6.10</li> </ul>"},{"location":"animated_image/","title":"Animated Image","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch provides the <code>sketch-animated-*</code> series of modules to support animated graphics. The supported platforms and differences are as follows:</p> Module DecoderProvider Decoder Android iOS Desktop Web sketch-animated-gif GifDecoderProvider android api 28+: ImageDecoderGifDecoderandroid api 27-: MovieGifDecodernon android: SkiaGifDecoder \u2705 \u2705 \u2705 \u2705 sketch-animated-gif-koral KoralGifDecoderProvider KoralGifDecoder \u2705 \u274c \u274c \u274c sketch-animated-webp AnimatedWebpDecoderProvider android api 28+: ImageDecoderAnimatedWebpDecoderandroid api 27-: Not supportednon android: SkiaAnimatedWebpDecoder \u2705(API 28) \u2705 \u2705 \u2705 sketch-animated-heif ImageDecoderAnimatedHeifDecoderProvider ImageDecoderAnimatedHeifDecoder \u2705(API 30) \u274c \u274c \u274c <p>[!TIP] The webp animation decoder that comes with the sketch-animated-webp module does not support android api 27 and below. If necessary, please refer to PenfeizhouAnimatedWebpDecoder in the sample and combine it with the https://github.com/penfeizhou/APNG4Android library for android Supported by api 27 and below</p>"},{"location":"animated_image/#install-component","title":"Install component","text":"<p>Before loading animations, you need to select one of the above components and configure dependencies. Take <code>sketch-animated-gif</code> as an example:</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-animated-gif:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] The above components all support automatic registration. You only need to import them without additional configuration. If you need to register manually, please read the documentation: \u300aRegister component\u300b</p>"},{"location":"animated_image/#load-animated-image","title":"Load animated image","text":"<p>Simply specify the uri to load the image, as follows:</p> <pre><code>val imageUri = \"https://www.sample.com/image.gif\"\n\n// compose\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\n// view\nimageView.loadImage(imageUri)\n</code></pre>"},{"location":"animated_image/#configuration","title":"Configuration","text":"<p>The <code>sketch-animated-core</code> module has some extension methods for ImageRequest and ImageOptions for animation-related configuration, as follows:</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.gif\") {\n    // Disable animation and only decode the first frame of the animation\n    disallowAnimatedImage()\n\n    // Configure the animation to be played repeatedly once and then stop. The default is to play in an infinite loop.\n    repeatCount(1)\n\n    // Monitor the animation to start and stop playing\n    onAnimationStart {\n        // ...\n    }\n    onAnimationEnd {\n        // ...\n    }\n\n    // [Only Android] Modify each frame of the animation as it is drawn \n    animatedTransformation { canvas: Any -&gt;\n        if (canvas is androidx.compose.ui.graphics.Canvas) {\n            // ...\n        } else if (canvas is android.graphics.Canvas) {\n            // ...\n        }\n    }\n}\n</code></pre>"},{"location":"animated_image/#control-play","title":"Control Play","text":"<p>Decoder related to animations uniformly returns AnimatableDrawable or AnimatablePainter. You can control playback through their start() and stop() methods, and determine the playback status through the isRunning() method.</p>"},{"location":"animated_image/#initial-state","title":"Initial State","text":"<p>The initial state of the animation is controlled by GenericViewTarget and GenericComposeTarget. After the animation is load into Target, the status of ImageRequest.lifecycle will be checked. If the status of lifecycle is greater than start, it will start playing. Otherwise, it will wait until lifecycle. Play again when the status changes to start</p>"},{"location":"animated_image/#automatic-control","title":"Automatic Control","text":"<p>GenericViewTarget and GenericComposeTarget will listen to the start and stop of ImageRequest .lifecycle Status automatic control playback</p>"},{"location":"animated_image/#cache-decoding-timeout-frame","title":"Cache Decoding Timeout Frame","text":"<p>Sketch uses skiko's Codec to decode animations on non-Android platforms, but Codec decodes slower frames closer to the end of the animation.</p> <p>When the decoding time exceeds the duration of the previous frame, the user will feel that the playback is stuck. Therefore, in order to improve the smoothness of playback, Sketch supports the function of caching decoding timeout frames.</p> <p>However, this feature will significantly increase memory consumption, so it is turned off by default. You can enable it through the cacheDecodeTimeoutFrame() function, as follows:</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.gif\") {\n    cacheDecodeTimeoutFrame(true)\n}\n</code></pre>"},{"location":"apk_app_icon/","title":"Load Icon For Apk Or Installed App","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"apk_app_icon/#load-apk-icon","title":"Load Apk Icon","text":"<p>First install the component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-apkicon:${LAST_VERSION}\")\n</code></pre> <p>Then directly pass in the path to the apk file when loading the image:</p> <pre><code>sketch.enqueue(ImageRequest(context, uri = \"/sdcard/sample.apk\"))\n</code></pre> <p>[!IMPORTANT] 1. <code>sketch-extensions-apkicon</code>      The module supports automatic registration of components. For details on component      registration, please see the documentation: \u300aRegister component\u300b 2. Only supports Android platform</p>"},{"location":"apk_app_icon/#load-the-icon-of-the-installed-app","title":"Load the icon of the installed app","text":"<p>First install the component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-appicon:${LAST_VERSION}\")\n</code></pre> <p>Then use the <code>newAppIconUri()</code> function to create a dedicated uri when loading the image.</p> <pre><code>// app.icon://com.github.panpf.sketch.sample/1\nval appIconUri = newAppIconUri(packageName = \"com.github.panpf.sketch.sample\", versionCode = 1)\nsketch.enqueue(ImageRequest(context, uri = appIconUri))\n</code></pre> <p>[!IMPORTANT] 1. versionCode: App version number. The correct version number must be passed in, because when the      icon is modified, the modified icon will be cached on the disk. If you only use      packageName is used as the cache key, so the icon will not be refreshed even if the cache is      changed after the App version is updated. 2. <code>sketch-extensions-appicon</code> The module supports automatic component registration. Please see      the documentation for details on component      registration. \u300aRegister component\u300b 3. Only supports Android platform</p>"},{"location":"blurhash/","title":"BlurHash","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"blurhash/#install-component","title":"Install component","text":"<p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-blurhash:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] <code>sketch-blurhash</code> The module supports automatic registration of components. For details on component registration, please see the documentation: \u300aRegister component\u300b</p>"},{"location":"blurhash/#use-in-placeholder","title":"Use in placeholder","text":"<pre><code>ImageRequest(context, \"https://www.example.com/image.svg\") {\n    placeholder(\n        BlurHashStateImage(\n            blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n            size = Size(200, 300)\n        )\n    )\n    // or\n    blurHashPlaceholder(\n        blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n        size = Size(200, 300)\n    )\n\n    // You can also pass the size through uri\n    blurHashPlaceholder(\n        blurHash = newBlurHashUri(\n            blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n            size = Size(200, 300)\n        )\n    )\n\n    // You can also limit the size by using the maxSide property, BlurHashStateImage will scale blur images in a ratio\n    blurHashPlaceholder(\n        blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n        size = Size(200, 300),\n        maxSide = 100\n    )\n\n    // BlurHashStateImage will use memory cache to accelerate decoding. You can control the cachePolicy attribute. BlurHashStateImage to use memory cache.\n    blurHashPlaceholder(\n        blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n        size = Size(200, 300),\n        maxSide = 100,\n        cachePolicy = CachePolicy.DISABLED\n    )\n\n    // Fallback and error can also be used with BlurHashStateImage\n}\n</code></pre> <p>[!IMPORTANT] 1. You need to specify a size with the same aspect ratio as the original image for      BlurHashStateImage, otherwise the default size (100x100) will be used, and inconsistent aspect      ratios will cause blurred image deformation. 2. BlurHash decodes and generates Bitmap in UI threads, so use a smaller size as much as possible,      otherwise it will cause lag.</p>"},{"location":"blurhash/#used-as-a-picture-after-decoding","title":"Used as a picture after decoding","text":"<pre><code>val blurHashUri = newBlurHashUri(\"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\", Size(200, 300))\nImageRequest(context, blurHashUri) {\n    colorType(\"RGB_565\")\n    colorSpace(\"DISPLAY_P3\")\n}\n</code></pre> <p>[!IMPORTANT] You need to specify a size with the same aspect ratio as the original image in the uri, otherwise the default size (100x100) will be used, and inconsistent aspect ratios will cause blurred image deformation.</p>"},{"location":"compose/","title":"Compose","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"compose/#asyncimage","title":"AsyncImage","text":"<p>AsyncImage is a composable function that asynchronously executes image requests and renders the results. You can use it directly to load and load images, as follows:</p> <pre><code>// val imageUri = \"/Users/my/Downloads/image.jpg\"\n// val imageUri = file:///compose_resource/composeResources/com.github.panpf.sketch.sample.resources/files/sample.png\nval imageUri = \"https://example.com/image.jpg\"\n\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n     uri = imageUri,\n     state = rememberAsyncImageState(ComposableImageOptions {\n          placeholder(Res.drawable.placeholder)\n          error(Res.drawable.error)\n          crossfade()\n          // There is a lot more...\n     }),\n     contentDescription = \"photo\"\n)\n\nAsyncImage(\n    rqeuest = ComposableImageRequest(imageUri) {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    },\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] <code>placeholder(Res.drawable.placeholder)</code> needs to import the <code>sketch-compose-resources</code> module</p>"},{"location":"compose/#subcomposeasyncimage","title":"SubcomposeAsyncImage","text":"<p>SubcomposeAsyncImage is a variant of AsyncImage, which allows you to draw content completely independently, as follows:</p> <pre><code>SubcomposeAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    loading = {\n        Text(\"Loading\")\n    },\n    contentDescription = \"photo\"\n)\n\nSubcomposeAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    contentDescription = \"photo\",\n    content = {\n        when (state.painterState) {\n            is PainterState.Loading -&gt; {\n                Text(\"Loading\")\n            }\n            is PainterState.Error -&gt; {\n                Text(\"Error\")\n            }\n            else -&gt; {\n                Image(\n                    painter = painter,\n                    contentDescription = \"photo\"\n                )\n            }\n        }\n    }\n)\n</code></pre> <p>!TIP may not perform as well as AsyncImage, so this combination may not be suitable for performance-critical parts of the list</p>"},{"location":"compose/#asyncimagepainter","title":"AsyncImagePainter","text":"<p>If you must use the Image component, you can also use AsyncImagePainter directly to load images, as follows:</p> <pre><code>Image(\n    painter = rememberAsyncImagePainter(uri = \"https://example.com/image.jpg\"),\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(\n        rqeuest = ComposableImageRequest(\"https://example.com/image.jpg\") {\n            placeholder(Res.drawable.placeholder)\n            error(Res.drawable.error)\n            crossfade()\n            // There is a lot more...\n        }\n    ),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] 1. <code>Image + AsyncImagePainter</code> will be slightly slower than AsyncImage, this is due to [Sketch]      Depends on the exact size of the component before loading the image, AsyncImage      The size of the component can be obtained during the layout stage,      while <code>Image + AsyncImagePainter</code> cannot obtain the component size until the drawing stage. 2. If the contentScale is modified on the Image, the contentScale of rememberAsyncImagePainter      must also be modified simultaneously. 3. <code>placeholder(Res.drawable.placeholder)</code> needs to import the <code>sketch-compose-resources</code> module</p>"},{"location":"compose/#asyncimagestate","title":"AsyncImageState","text":"<p>AsyncImageState is the core of AsyncImage and AsyncImagePainter. AsyncImageState is responsible for execution ImageRequest and management state, AsyncImagePainter is responsible for reading Painter from AsyncImageState and drawing, AsyncImage is responsible for layout</p> <p>You can read the status, progress, and Painter of the request from AsyncImageState, and you can also reload the image through its restart() method, as follows:</p> <pre><code>val state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    contentDescription = \"photo\",\n    state = state,\n)\n\nval result: ImageResult? = state.result\nval loadState: LoadState? = state.loadState\nval request: ImageRequest = loadState.request\nwhen (loadState) {\n    is Started -&gt; {\n\n    }\n    is Success -&gt; {\n         val memoryCacheKey: String = loadState.result.memoryCacheKey\n         val resultCacheKey: String = loadState.result.resultCacheKey\n         val downloadCacheKey: String = loadState.result.downloadCacheKey\n        val imageInfo: ImageInfo = loadState.result.imageInfo\n        val dataFrom: DataFrom = loadState.result.dataFrom\n         val resize: Resize = loadState.result.resize\n        val transformeds: List&lt;String&gt;? = loadState.result.transformeds\n        val extras: Map&lt;String, String&gt;? = loadState.result.extras\n    }\n    is Error -&gt; {\n        val throwable: Throwable = loadState.result.throwable\n    }\n    is Canceled -&gt; {}\n    else -&gt; {\n        // null\n    }\n}\nval progress: Progress? = state.progress\nval painterState: PainterState = state.painterState\nwhen (painterState) {\n    is Loading -&gt; {}\n    is Success -&gt; {}\n    is Error -&gt; {}\n}\nval painter: Painter? = state.painter\n\n// Reload\nstate.restart()\n</code></pre>"},{"location":"compose/#listenerprogresslistener","title":"listener/progressListener","text":"<p>When using AsyncImage, SubcomposeAsyncImage and AsyncImagePainter, you cannot call ImageRequest addListener(), addProgressListener() methods, which will cause the app to crash</p> <p>The reason is that when using Listener and ProgressListener, in most cases, they directly new a new instance, which will cause The equals result of ImageRequest is false and triggers reorganization, thus reducing performance</p> <p>Therefore you must use the loadState and progress properties of AsyncImageState instead of addListener(), addProgressListener()</p>"},{"location":"compose/#target","title":"Target","text":"<p>When using AsyncImage, SubcomposeAsyncImage and AsyncImagePainter, you cannot call ImageRequest target() method, which will cause the app to crash because the Target must be configured by AsyncImageState</p>"},{"location":"decode_interceptor/","title":"DecodeInterceptor","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>The decoding process of Sketch supports changing the input and output before and after decoding through interceptors.</p> <p>First implement the DecodeInterceptor interface to implement your DecodeInterceptor, and then register it through the addDecodeInterceptor() method, as follows:</p> <pre><code>class MyDecodeInterceptor : DecodeInterceptor {\n\n    // If the current DecodeInterceptor will modify the returned results and is only used for some requests, then please give a unique key to build the cache key, otherwise give null\n    override val key: String = \"MyDecodeInterceptor\"\n\n    // Used for sorting, the larger the value, the further back in the list. The value range is 0 ~ 100. Usually zero. Only EngineDecodeInterceptor can be 100\n    override val sortWeight: Int = 0\n\n    @WorkerThread\n    override suspend fun intercept(\n        chain: DecodeInterceptor.Chain,\n    ): Result&lt;DecodeResult&gt; {\n        val newRequest = chain.request.newRequest {\n            colorType(Bitmap.Config.RGB_565)\n        }\n        return chain.proceed(newRequest)\n    }\n}\n\n// Register for all ImageRequests when customizing Sketch\nSketch.Builder(context).apply {\n    components {\n        addDecodeInterceptor(MyDecodeInterceptor())\n    }\n}.build()\n\n// Register for a single ImageRequest when loading an image\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addDecodeInterceptor(MyDecodeInterceptor())\n    }\n}\n</code></pre> <p>[!TIP] 1. MyDecodeInterceptor demonstrates a case of changing the Bitmap.Config of all requests to      RGB_565 2. If you want to modify the return result, just intercept the result returned by the proceed      method and return a new DecodeResult 3. If you don\u2019t want to execute the request anymore, just don\u2019t execute the proceed method.</p>"},{"location":"decoder/","title":"Decoder","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Decoder is used to decode image files. Each supported image type has a corresponding Decoder implementation, as shown in the following table:</p> Format Decoder Dependent modules Android iOS Desktop Web jpeg BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c jpeg SkiaDecoder - \u274c \u2705 \u2705 \u2705 png BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c png SkiaDecoder - \u274c \u2705 \u2705 \u2705 webp BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c webp SkiaDecoder - \u274c \u2705 \u2705 \u2705 bmp BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c bmp SkiaDecoder - \u274c \u2705 \u2705 \u2705 heif BitmapFactoryDecoder - \u2705 (API 28) \u274c \u274c \u274c avif BitmapFactoryDecoder - \u2705 (API 31) \u274c \u274c \u274c gif ImageDecoderGifDecoder sketch-animated-gif \u2705 (API 28) \u274c \u274c \u274c gif MovieGifDecoder(Not Support resize) sketch-animated-gif \u2705 \u274c \u274c \u274c gif SkiaGifDecoder(Not Support resize) sketch-animated-gif \u2705 \u274c \u274c \u274c gif KoralGifDecoder sketch-animated-gif-koral \u274c \u2705 \u2705 \u2705 Animated webp ImageDecoderAnimatedWebpDecoder sketch-animated-webp \u2705 (API 28) \u274c \u274c \u274c Animated webp SkiaAnimatedWebpDecoder(Not Support resize) sketch-animated-webp \u274c \u2705 \u2705 \u2705 Animated heif ImageDecoderAnimatedHeifDecoder sketch-animated-heif \u2705 (API 30) \u274c \u274c \u274c svg SvgDecoder sketch-svg \u2705 \u2705(Not Support CSS) \u2705(Not Support CSS) \u2705(Not Support CSS) Video frames VideoFrameDecoder sketch-video \u2705 \u274c \u274c \u274c Video frames FFmpegVideoFrameDecoder sketch-video-ffmpeg \u2705 \u274c \u274c \u274c BlurHash BlurHashDecoder sketch-blurhash \u2705 \u2705 \u2705 \u2705 Apk Icon ApkIconDecoder sketch-extensions-core \u2705 \u274c \u274c \u274c <ul> <li>ApkIconDecoder Decoding the icon of an Apk file on   Android (Learn more)</li> <li>BitmapFactoryDecoder Decode images on the Android platform using Android's   built-in BitmapFactory, which is the last resort decoder</li> <li>DrawableDecoder Decode vector, shape and other xml drawable images supported by Android on the   Android platform</li> <li>ImageDecoderGifDecoder Use Android's built-in ImageDecoder to decode gif animations on the   Android   platform (Learn more)</li> <li>KoralGifDecoder Use koral--'s android-gif-drawable library to decode   animated gifs on the Android platform (Learn more)</li> <li>MovieGifDecoder Use Android's built-in Movie to decode gif animations on the Android   platform (Learn more)</li> <li>SkiaGifDecoder Use Skia's built-in Codec to decode gif animations on non-Android   platforms (Learn more)</li> <li>ImageDecoderAnimatedHeifDecoder Use Android's built-in ImageDecoder to decode heif   animations (Learn more)</li> <li>SkiaDecoder Use Skia's built-in Image to decode images on non-Android platforms, which is the   last decoder* SvgDecoder Use BigBadaboom's androidsvg library on Android platforms, and use   Skia's built-in SVGDOM to decode static svg files on non-Android platforms ( Learn more)</li> <li>ImageDecoderAnimatedWebpDecoder Use Android's built-in ImageDecoder to decode webp animations   on the   Android platform (Learn more)</li> <li>SkiaAnimatedWebpDecoder Use Skia's built-in Codec to decode webp animations on non-Android   platforms (Learn more)</li> <li>VideoFrameDecoder Decode frames of video files using Android's built-in MediaMetadataRetriever   class on the Android platform (Learn more)</li> <li>FFmpegVideoFrameDecoder Decoding video frames using wseemann's FFmpegMediaMetadataRetriever   library on Android (Learn more)</li> <li>BlurHashDecoder Decode blurred images from BlurHash string \uff08\u4e86\u89e3\u66f4\u591a\uff09</li> </ul> <p>[!IMPORTANT] The above components all support automatic registration. You only need to import them without additional configuration. If you need to register manually, please read the documentation: \u300aRegister component\u300b</p>"},{"location":"decoder/#extend-decoder","title":"Extend Decoder","text":"<p>First implement the Decoder interface to define your Decoder and its Factory</p> <p>Then refer to the document \u300aRegister component\u300b to register your Decoder.</p> <p>[!CAUTION] 1. Customizing Decoder requires applying many properties related to image quality and size in      ImageRequest, such as size, colorType, colorSpace, etc. You can refer to other Decoder      implementations 2. If your Decoder is decoding animated images, you must determine the ImageRequest      .disallowAnimatedImage parameter.</p>"},{"location":"decoder/#decoding-properties","title":"Decoding Properties","text":""},{"location":"decoder/#bitmapcolortype","title":"BitmapColorType","text":"<p>BitmapColorType is used to set the color type of the bitmap. The optional values are:</p> <ul> <li>FixedColorType: always use the specified color type</li> <li>LowQualityColorType: Prioritize low-quality color types<ul> <li>jpeg images on the Android platform use RGB_565, and other values use the default value.</li> <li>jpeg and webp images on non-Android platforms use RGB_565, others use ARGB_4444</li> </ul> </li> <li>HighQualityColorType: Give priority to high-quality color types<ul> <li>On the Android platform, API 26 and above use RGBA_F16, and others use the default value.</li> <li>Always use RGBA_F16 on non-Android platforms</li> </ul> </li> </ul> <p>Example:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Use specified color type on Android platform\n    colorType(Bitmap.Config.RGB_565)\n\n    // Use specified color type on non-Android platforms\n    colorType(ColorType.RGBA_F16)\n\n    // Prioritize lower quality color types\n    colorType(LowQualityColorType)\n\n    // Prioritize high-quality color types\n    colorType(HighQualityColorType)\n}\n</code></pre>"},{"location":"decoder/#bitmapcolorspace","title":"BitmapColorSpace","text":"<p>BitmapColorSpace is used to set the color space of the bitmap. The optional values are:</p> <ul> <li>FixedColorSpace: Always use the specified color space</li> </ul> <p>Example:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Use specified color space on Android platform\n    colorSpace(ColorSpace.Named.DISPLAY_P3)\n\n    // Use specified color space on non-Android platforms\n    colorSpace(ColorSpace.displayP3)\n}\n</code></pre>"},{"location":"decoder/#preferqualityoverspeed","title":"preferQualityOverSpeed","text":"<p>preferQualityOverSpeed is used to set quality priority when decoding. It can only be used on the Android platform.</p> <p>Example:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    preferQualityOverSpeed(true)\n}\n</code></pre>"},{"location":"download_cache/","title":"Download Cache","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>In order to avoid repeatedly downloading pictures from the network and improve the loading speed of pictures, Sketch has introduced download cache. The download cache function will first store the pictures on disk for a long time, then read them from disk, and skip the download process next time you read them directly from disk.</p> <p>HttpUriFetcher is responsible for the core logic, and DiskCache is responsible for the storage management.</p> <p>The default implementation of DiskCache is LruDiskCache:</p> <ul> <li>The default maximum capacity is 300 MB</li> <li>Clear old cache based on least used principle</li> </ul>"},{"location":"download_cache/#cache-directory","title":"Cache Directory","text":"<p>In order to adapt to the differences between different platforms, the locations of cache directories are also different on different platforms.</p>"},{"location":"download_cache/#android","title":"Android","text":"<p>The default download cache directory on Android is obtained in the following order:</p> <ol> <li><code>/sdcard/Android/data/[APP_PACKAGE_NAME]/cache/sketch4/download</code></li> <li><code>/data/data/[APP_PACKAGE_NAME]/cache/sketch4/download</code></li> </ol> <p>[!TIP] In order to be compatible with multiple processes, when using Sketch in a non-main process, the process name will be added after the cache directory name, such as \"download:push\"</p>"},{"location":"download_cache/#ios","title":"iOS","text":"<p>The default download cache directory on iOS is:</p> <pre><code>val appCacheDirectory =\n    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, true).first() as String\nval downloadCacheDir = \"$appCacheDirectory/sketch4/download\"\n</code></pre>"},{"location":"download_cache/#desktop","title":"Desktop","text":"<p>The default download cache directory on desktop platforms is:</p> <pre><code>val appName = (getComposeResourcesPath() ?: getJarPath(Sketch::class.java)).md5()\n\n// macOS\n\"/Users/[user]/Library/Caches/SketchImageLoader/${appName}/sketch4/download\"\n\n// Windows\n\"C:\\\\Users\\\\[user]\\\\AppData\\\\Local\\\\SketchImageLoader\\\\${appName}\\\\sketch4/download\\\\Cache\"\n\n// Linux\n\"/home/[user]/.cache/SketchImageLoader/${appName}/sketch4/download\"\n</code></pre>"},{"location":"download_cache/#web","title":"Web","text":"<p>The web platform does not yet support download caching</p>"},{"location":"download_cache/#customize","title":"Customize","text":"<p>You can pass Sketch.Builder's downloadCache() or downloadCacheOptions() when initializing Sketch Method to customize the implementation or configuration of download cache, as follows:</p> <pre><code>// Use the default LruDiskCache implementation and configure its parameters\nSketch.Builder(context).apply {\n    downloadCacheOptions(\n        DiskCache.Options(\n            // Just choose one of directory and appCacheDirectory\n            directory = \"/tmp/myapp/sketch/download\",\n            // Just choose one of directory and appCacheDirectory\n            appCacheDirectory = \"/tmp/myapp\",\n            // 100 MB\n            maxSize = 1024 * 1024 * 100,\n            // The app's management version number for the download cache. \n            // If you want to clear the old download cache, upgrade this version number.\n            appVersion = 1,\n        )\n    )\n}.build()\n\n// Use your own DiskCache implementation\nclass MyDiskCache : DiskCache {\n    // ...\n}\nSketch.Builder(context).apply {\n    downloadCache(MyDiskCache())\n}.build()\n</code></pre>"},{"location":"download_cache/#cache-policy","title":"Cache Policy","text":"<p>The download cache policy is used to control how to use the download cache. The default configuration is CachePolicy.ENABLED, which you can configure via the downloadCachePolicy property of ImageRequest or ImageOptions:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Disable\n    downloadCachePolicy(CachePolicy.DISABLED)\n    // Read only\n    downloadCachePolicy(CachePolicy.READ_ONLY)\n    // Write Only\n    downloadCachePolicy(CachePolicy.WRITE_ONLY)\n}\n</code></pre>"},{"location":"download_cache/#cache-key","title":"Cache key","text":"<p>By default, Sketch will automatically generate a download cache key based on the requested configuration, but you can also customize the download cache key with the following properties:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n     // Use custom download cache key\n     downloadCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n     // Modify the automatically generated download cache key\n     downloadCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n\nImageOptions {\n     // Use custom download cache key\n     downloadCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n     // Modify the automatically generated download cache key\n     downloadCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n</code></pre> <p>You can also get the final download cache key through the following methods:</p> <pre><code>// The download cache key can be obtained through RequestContext in the customized RequestInterceptor, \n// DecodeInterceptor, Transformation, Fetcher, and Decoder components.\nval requestContext: RequestContext = ...\nrequestContext.downloadCacheKey\n\n// Get the download cache key from ImageResult\nval imageSuccess = sketch.execute(request) as ImageResult.Success\nimageSuccess.downloadCacheKey\n</code></pre>"},{"location":"download_cache/#read-and-write-cache","title":"Read and write cache","text":"<p>You can obtain the download cache instance through the <code>sketch.downloadCache</code> property to access the download cache, but be careful to obtain the lock first before accessing, so as to avoid problems under multi-threading, as follows:</p> <pre><code>scope.launch {\n    val downloadCache = sketch.downloadCache\n    val downloadCacheKey = imageRequest.downoadCacheKey\n    downloadCache.withLock(downloadCacheKey) {\n        // get\n        openSnapshot(downloadCacheKey)?.use { snapshot -&gt;\n            val dataPath: Path = snapshot.data\n            val metadataPath: Path = snapshot.metadata\n            val dataContent = fileSystem.source(dataPath).buffer().use {\n                it.readUtf8()\n            }\n            val metadataContent = fileSystem.source(metadataPath).buffer().use {\n                it.readUtf8()\n            }\n        }\n\n        // edit\n        val editor: DiskCache.Editor? = openEditor(downloadCacheKey)\n        if (editor != null) {\n            try {\n                val dataPath: Path = editor.data\n                val metadataPath: Path = editor.metadata\n                fileSystem.sink(dataPath).buffer().use {\n                    it.writeUtf8(\"data\")\n                }\n                fileSystem.sink(metadataPath).buffer().use {\n                    it.writeUtf8(\"metadata\")\n                }\n                editor.commit()\n            } catch (e: Exception) {\n                editor.abort()\n            }\n        }\n\n        // remove\n        val cleared: Boolean = remove(downloadCacheKey)\n    }\n\n    // Clear all\n    downloadCache.clear()\n}\n</code></pre> <p>[!CAUTION] 1. openSnapshot and openEditor with the same key conflict with each other. For example,      openSnapshot is not closed before openEditor is closed. Always returns null and vice versa 2. So it must be executed inside withLock, otherwise unexpected events may occur.</p> <p>For more available methods, please refer to DiskCache</p>"},{"location":"download_cache/#clear-cache","title":"Clear cache","text":"<p>The download cache is cleared under the following circumstances:</p> <ol> <li>Actively call the <code>remove()</code> and clear()` methods of DiskCache</li> <li>Actively call the <code>abort()</code> method of DiskCache.Editor</li> <li>Automatically clear older caches when maximum capacity is reached</li> </ol>"},{"location":"download_image/","title":"Download Image","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sometimes we need to download pictures to the disk cache in advance, or export pictures from the Internet to the album. In this case, we need to download the pictures first.</p> <p>You can download images through the Sketch.enqueueDownload() or executeDownload() method, as follows:</p> <pre><code>val imageUri = \"https://example.com/image.jpg\"\n\nval deferred: Deferred&lt;Result&lt;DownloadData&gt;&gt; = sketch\n    .enqueueDownload(ImageRequest(context, imageUri))\nscope.launch {\n    val result = deferred.await()\n    val data: DownloadData = result.getOrNull()\n    if (data != null) {\n        // success\n        if (data is DownloadData.Cache) {\n            val path: Path = data.path\n        } else if (data is DownloadData.Bytes) {\n            val bytes: ByteArray = data.bytes\n        }\n    } else {\n        // failed\n        val throwable = result.exceptionOrNull()\n    }\n}\n\n// or\nscope.launch {\n    val result = sketch.executeDownload(ImageRequest(context, imageUri))\n    val data: DownloadData = result.getOrNull()\n    if (data != null) {\n        // success\n        if (data is DownloadData.Cache) {\n            val path: Path = data.path\n        } else if (data is DownloadData.Bytes) {\n            val bytes: ByteArray = data.bytes\n        }\n    } else {\n        // failed\n        val throwable = result.exceptionOrNull()\n    }\n}\n</code></pre> <p>[!TIP] 1. Prioritize returning DownloadData of type DownloadData.Cache 2. When Sketch.downloadCache is not available (JS) or ImageRequest      .downloadCachePolicy.readEnabled is false, DownloadData.Bytes is returned</p>"},{"location":"exif_orientation/","title":"Exif Orientation","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch supports restoring the orientation of images based on their Exif information. This feature is forcibly turned on and cannot be turned off.</p> <p>On Android, rely on <code>androidx.exifinterface:exifinterface</code> to read the exif information and then restore the orientation of the image during decoding</p> <p>On non-Android devices, it relies on Skia's own support for Exif.</p>"},{"location":"fetcher/","title":"Fetcher","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Fetcher is used to get data from uri, return FetchResult, and hand it over to Decoder for use.</p> <p>Each uri supported by Sketch has a corresponding Fetcher implementation, as shown in the following table:</p> URI Fetcher Create Dependent modules Android iOS Desktop Web http://, https:// HurlHttpUriFetcher - sketch-http-hurl \u2705 \u274c \u2705 \u274c http://, https:// OkHttpHttpUriFetcher - sketch-http-okhttp \u2705 \u274c \u2705 \u274c http://, https:// KtorHttpUriFetcher - sketch-http-ktor3 \u2705 \u2705 \u2705 \u2705 file://, /, D:/ FileUriFetcher newFileUri() - \u2705 \u2705 \u2705 \u2705 file:///compose_resource/ ComposeResourceUriFetcher newComposeResourceUri() sketch-compose-resources \u2705 \u2705 \u2705 \u2705 data:image/, data:img/ Base64UriFetcher newBase64Uri() - \u2705 \u2705 \u2705 \u2705 file:///android_asset/ AssetUriFetcher newAssetUri() - \u2705 \u274c \u274c \u274c content:// ContentUriFetcher - - \u2705 \u274c \u274c \u274c android.resource:// ResourceUriFetcher newResourceUri() - \u2705 \u274c \u274c \u274c app.icon:// AppIconUriFetcher newAppIconUri() sketch-extensions-appicon \u2705 \u274c \u274c \u274c file:///kotlin_resource/ KotlinResourceUriFetcher newKotlinResourceUri() - \u274c \u2705 \u2705 \u274c blurhash:// BlurHashUriFetcher newBlurHashUri() sketch-blurhash \u2705 \u2705 \u2705 \u2705 <ul> <li>HurlHttpUriFetcher: Use the HttpURLConnection that comes with jvm to load images from the   network. Learn more</li> <li>OkHttpHttpUriFetcher: Use OkHttp to load images from the network. Learn more</li> <li>KtorHttpUriFetcher: Use Ktor to load images from the network. Learn more</li> <li>AssetUriFetcher: is used to load images from the Android assets directory</li> <li>ContentUriFetcher: ContentResolver for Android to load images</li> <li>ResourceUriFetcher: is used to load images from Android's resources directory</li> <li>AppIconUriFetcher: is used to load the icon of the installed App. It also needs to rely   on <code>sketch-extensions-core</code>   module. Learn more</li> <li>Base64UriFetcher: is used to load images from the base64 data block of the uri itself</li> <li>ComposeResourceUriFetcher: is used to load images from the composeResources directory of   Compose Multiplatform, it also needs to depend on the <code>sketch-compose-resources</code> module.</li> <li>KotlinResourceUriFetcher: is used to load images from the resources directory of kotlin</li> <li>BlurHashUriFetcher\uff1aSupports loading images from BlurHash strings</li> </ul> <p>[!IMPORTANT] The above components all support automatic registration. You only need to import them without additional configuration. If you need to register manually, please read the documentation: \u300aRegister component\u300b</p>"},{"location":"fetcher/#extend-fetcher","title":"Extend Fetcher","text":"<p>First implement the Fetcher interface to define your Fetcher and its Factory</p> <p>Then refer to the document \u300aRegister component\u300b to register your Fetcher</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"getting_started/#load-image","title":"Load Image","text":"<p>Loading images with Sketch is very simple, as follows:</p> <p>Compose Multiplatform:</p> <pre><code>// val imageUri = \"/Users/my/Downloads/image.jpg\"\n// val imageUri = file:///compose_resource/composeResources/com.github.panpf.sketch.sample.resources/files/sample.png\nval imageUri = \"https://example.com/image.jpg\"\n\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    uri = imageUri,\n    state = rememberAsyncImageState(ComposableImageOptions {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    }),\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    rqeuest = ComposableImageRequest(imageUri) {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    },\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(\n        request = ComposableImageRequest(imageUri) {\n            placeholder(Res.drawable.placeholder)\n            error(Res.drawable.error)\n            crossfade()\n            // There is a lot more...\n        }\n    ),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] 1. On Compose Multiplatform you can use AsyncImage directly Components can also      use <code>Image + AsyncImagePainter</code> to load the image. 2. But it is more recommended to use the AsyncImage component because AsyncImage is slightly      faster. 3. This is because Sketch relies on the exact size of the component to start loading images,      AsyncImage The size of the component can be obtained during the layout stage,      while <code>Image + AsyncImagePainter</code> cannot obtain the component size until the drawing stage. 4. <code>placeholder(Res.drawable.placeholder)</code> needs to import the <code>sketch-compose-resources</code> module</p> <p>Android View:</p> <pre><code>// val imageUri = \"/sdcard/download/image.jpg\"\n// val imageUri = \"file:///android_asset/image.jpg\"\n// val imageUri = \"content://media/external/images/media/88484\"\nval imageUri = \"https://example.com/image.jpg\"\n\nimageView.loadImage(imageUri)\n\nimageView.loadImage(imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    // There is a lot more...\n}\n\nval request = ImageRequest(context, imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    target(imageView)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n</code></pre> <p>Sketch will automatically adjust the size of the image according to the size of the component to prevent the size of the image loaded into the memory from exceeding the size of the component itself and cause memory waste. It will also automatically cancel the request when the component is destroyed.</p>"},{"location":"getting_started/#supported-image-formats","title":"Supported Image Formats","text":"<p>Sketch supports a variety of static and dynamic image types, as follows:</p> Format Dependent Modules jpeg _ png _ bmp _ webp _ heif _ avif _ svg sketch-svg gif sketch-animated-gifsketch-animated-gif-koral Animated webp sketch-animated-webp Animated heif sketch-animated-heif Video frames sketch-videosketch-video-ffmpeg Apk icon sketch-extensions-apkicon <p>Each image type has a corresponding Decoder support for it, Learn more about Decoder</p>"},{"location":"getting_started/#supported-uris","title":"Supported URIs","text":"<p>Sketch supports loading images from different data sources such as the network, local machine, and resources, as follows:</p> URI Describe Create Function Dependent Modules http://, https:// File in network _ sketch-http-hurlsketch-http-okhttpsketch-http-ktor2sketch-http-ktor3 file://, /, D:/ File in SDCard newFileUri() _ content:// Android Content Resolver _ _ file:///android_asset/ Android Asset newAssetUri() _ android.resource:// Android Resource newResourceUri() _ data:image/, data:img/ Base64 newBase64Uri() _ file:///compose_resource/ Compose Resource newComposeResourceUri() sketch-compose-resources file:///kotlin_resource/ Kotlin Resource newKotlinResourceUri() _ blurhash:// BlurHash newBlurHashUri() sketch-blurhash app.icon:// Android App Icon newAppIconUri() sketch-extensions-appicon <p>Each URI has its own Fetcher to support it, Learn more about Fetcher</p>"},{"location":"getting_started/#platform-differences","title":"Platform differences","text":"<p>Due to limitations of platform characteristics, the functions on different platforms are also different, as follows:</p> Feature Android iOS Desktop Web jpegpngwebpbmp \u2705 \u2705 \u2705 \u2705 heif \u2705 (API 28) \u274c \u274c \u274c avif \u2705 (API 31) \u274c \u274c \u274c svg \u2705 \u2705(Not Support CSS) \u2705(Not Support CSS) \u2705(Not Support CSS) gif \u2705 \u2705 \u2705 \u2705 Animated webp \u2705 (API 28) \u2705 \u2705 \u2705 Animated heif \u2705 (API 30) \u274c \u274c \u274c Video frames \u2705 \u274c \u274c \u274c BlurHash \u2705 \u2705 \u2705 \u2705 http://https://file://, /file:///compose_resource/data:image/jpeg;base64 \u2705 \u2705 \u2705 \u2705 file:///android_asset/content://android.resource:// \u2705 \u274c \u274c \u274c file:///kotlin_resource/ \u274c \u2705 \u2705 \u274c Exif Orientation \u2705 \u2705 \u2705 \u2705 Memory Cache \u2705 \u2705 \u2705 \u2705 Result Cache \u2705 \u2705 \u2705 \u274c Download Cache \u2705 \u2705 \u2705 \u274c Default image decoder BitmapFactory Skia Image Skia Image Skia Image Minimum API API 21 - JDK 1.8 - <p>The minimum API is '-' to synchronize with Compose Multiplatform</p>"},{"location":"getting_started/#sketch","title":"Sketch","text":"<p>The Sketch class is the core of the entire framework, which is used to execute and manage ImageRequest</p> <p>The <code>sketch-compose-core</code> and <code>sketch-view-core</code> modules provide components such as ImageRequest, AsyncImage to load images, but they also require you to create Sketch instances and then use it when loading the image, as follows:</p> <pre><code>val sketch = Sketch(context)\n\n// Compose\nAsyncImage(\n     uri = \"https://www.example.com/image.jpg\",\n     sketch = sketch,\n     moidifier = Modifier.fillMaxSize(),\n     contentDescription = \"photo\",\n)\n\n// View\nval request = ImageRequest(imageView, uri = \"https://www.example.com/image.jpg\")\nsketch.enqueue(request)\n</code></pre> <p>For more convenience, Sketch provides singleton mode and Koin mode, which allows you to directly use the shared Sketch instance when loading pictures.</p>"},{"location":"getting_started/#singleton-mode","title":"Singleton mode","text":"<p>You can directly rely on the <code>sketch-compose</code> or <code>sketch-view</code> module to use singleton mode, and also provide more convenient components or loading functions, as follows:</p> <pre><code>// Android\nval sketch = context.sketch\nval sketch = SingletonSketch.get(context)\n\n// Non Android\nval sketch = SingletonSketch.get()\n\n// Compose\nAsyncImage(\n     uri = \"https://www.example.com/image.jpg\",\n     moidifier = Modifier.fillMaxSize(),\n     contentDescription = \"photo\",\n)\n\n// View\nimageView.loadImage(uri = \"https://www.example.com/image.jpg\")\n// or\nImageRequest(imageView, uri = \"https://www.example.com/image.jpg\").enqueue(request)\n</code></pre> <p>When you need to customize Sketch, you can create Sketch and configure it in the following ways:</p> <pre><code>// Android\nclass MyApplication : Application(), SingletonSketch.Factory {\n\n    override fun createSketch(): Sketch {\n        return Sketch.Builder(context).apply {\n            logger(level = Logger.Level.Debug)\n            // There is a lot more...\n        }.build()\n    }\n}\n\n// Non Android. Called in the App entry function\nSingletonSketch.setSafe {\n    Sketch.Builder(PlatformContext.INSTANCE).apply {\n        logger(level = Logger.Level.Debug)\n        // There is a lot more...\n    }.build()\n}\n</code></pre>"},{"location":"getting_started/#koin-mode","title":"Koin mode","text":"<p>If you use Koin as a dependency injection framework, you can rely on the <code>sketch-compose-koin</code> or <code>sketch-view-koin</code> module to use the Koin pattern, which also provides more convenient components or loading functions, as follows:</p> <pre><code>// Initialize koin in the app's entry function or onCreate in the Application\nstartKoin {\n     modules(\n          module {\n               single&lt;Sketch&gt; {\n                    Sketch.Builder(get()).apply {\n                         logger(level = Logger.Level.Debug)\n                         // There is a lot more...\n                    }.build()\n               }\n          })\n}\n\n// Get instances anywhere\nval sketch = KoinPlatform.getKoin().get&lt;Sketch&gt;()\n\n// Compose\nAsyncImage(\n     uri = \"https://www.example.com/image.jpg\",\n     moidifier = Modifier.fillMaxSize(),\n     contentDescription = \"photo\",\n)\n\n// View\nimageView.loadImage(uri = \"https://www.example.com/image.jpg\")\n// or\nImageRequest(imageView, uri = \"https://www.example.com/image.jpg\").enqueue(request)\n</code></pre>"},{"location":"getting_started/#imagerequest","title":"ImageRequest","text":"<p>ImageRequest is used to describe an image loading request, which includes the uri of the image and placeholder image, transform, transition, new size, Target, Listener and other configurations</p>"},{"location":"getting_started/#create-imagerequest","title":"Create ImageRequest","text":"<p>Create a simple ImageRequest that limits the maximum number of pixels of the image to 300x300</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    // There is a lot more...\n}\n</code></pre> <p>[!TIP] For more configuration of ImageRequest, please refer to the ImageRequest.Builder class</p>"},{"location":"getting_started/#configure-target","title":"Configure Target","text":"<p>To load the results directly into the component, you also need to configure Target</p> <p>On Compose Target is configured by AsyncImage and AsyncImagePainter's cornerstone AsyncImageState, you just need to Just pass ImageRequest to AsyncImage or AsyncImagePainter, as follows:</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    // There is a lot more...\n}\n\nAsyncImage(\n    request = request,\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(request),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!CAUTION] You cannot call the target() function in AsyncImage and AsyncImagePainter, which will cause the app to crash</p> <p>In the Android View system, you need to actively call the target() function and pass in the ImageView, as follows:</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    target(imageView)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n</code></pre> <p>You can also use ImageRequest(ImageView, String) or ImageView.loadImage() extension functions, they will call target() for you, as follows:</p> <pre><code>val request = ImageRequest(imageView, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n\nimageView.loadImage() {\n    size(300, 300)\n    // There is a lot more...\n}\n</code></pre>"},{"location":"getting_started/#execute-imagerequest","title":"Execute ImageRequest","text":"<p>After ImageRequest is created, it is handed over to Sketch for execution. Sketch supports asynchronous and synchronous execution of ImageRequest, as follows:</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\")\n\n// Asynchronous execution of ImageRequest does not block the current thread or suspend the current coroutine.\nval disposable: Disposable = sketch.enqueue(request)\n\n// Synchronously execute ImageRequest and suspend the current coroutine until the result is returned.\ncoroutineScope.launch(Dispatchers.Main) {\n    val imageResult: ImageResult = sketch.execute(request)\n    val image: Image = imageResult.image\n}\n</code></pre> <p>[!NOTE] The singleton mode provides ImageRequest.enqueue() and ImageRequest.execute() extension functions for ImageRequest to facilitate sequential writing.</p>"},{"location":"getting_started/#get-result","title":"Get Result","text":"<p>When Target is configured, Sketch will hand over the results to Target for display, but sometimes you need to do something with the results or when Target is not configured, you need to actively obtain the results, as follows:</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\")\n\n// When using the enqueue() method to asynchronously execute a request, you can obtain the result through the returned Disposable.job\nval disposable = sketch.enqueue(request)\ncoroutineScope.launch(Dispatchers.Main) {\n    val imageResult: ImageResult = disposable.job.await()\n}\n\n// You can directly obtain the results when executing a request synchronously using the execute() method.\ncoroutineScope.launch(Dispatchers.Main) {\n    val imageResult: ImageResult = sketch.execute(request)\n}\n</code></pre> <p>ImageResult contains a lot of useful information, as follows:</p> <pre><code>val imageResult: ImageResult = ...\nval request: ImageRequest = imageResult.request\nval image: Image = imageResult.image\nwhen (image) {\n    is BitmapImage -&gt; {\n        val bitmap: Bitmap = image.bitmap\n    }\n    is DrawableImage -&gt; {\n        val drawable: Drawable = image.drawable\n    }\n    is PainterImage -&gt; {\n        val painter: Painter = image.painter\n    }\n    is AnimatedImage -&gt; {\n        val codec: Codec = image.codec\n    }\n}\nif (imageResult is ImageResult.Success) {\n    val memoryCacheKey: String = imageResult.memoryCacheKey\n    val resultCacheKey: String = imageResult.resultCacheKey\n    val downloadCacheKey: String = imageResult.downloadCacheKey\n    val imageInfo: ImageInfo = imageResult.imageInfo\n    val dataFrom: DataFrom = imageResult.dataFrom\n    val resize: Resize = imageResult.resize\n    val transformeds: List&lt;String&gt;? = imageResult.transformeds\n    val extras: Map&lt;String, String&gt;? = imageResult.extras\n} else if (imageResult is ImageResult.Error) {\n    val throwable: Throwable = imageResult.throwable\n}\n</code></pre>"},{"location":"getting_started/#cancel-request","title":"Cancel request","text":"<p>When Target is configured, ImageRequest will automatically cancel the request under the following circumstances:</p> <ul> <li>AsyncImage or AsyncImagePainter component forgotten</li> <li>ImageView's onViewDetachedFromWindow() method is executed</li> <li>Lifecycle changes to DESTROYED state</li> </ul> <p>When Target is not configured or when active cancellation is required, it can be canceled through Disposable or Job, as follows:</p> <pre><code>// When using the enqueue() method to asynchronously execute a request, a Disposable will be returned, which can be used to cancel the request when needed.\nval request = ImageRequest(context, \"https://www.example.com/image.jpg\")\nval disposable = sketch.enqueue(request)\ndisposable.dispose()\n\n// When using the execute() method to execute a request synchronously, you can cancel the request through its coroutine's Job when needed.\nval job = coroutineScope.launch(Dispatchers.Main) {\n    val request = ImageRequest(context, \"https://www.example.com/image.jpg\")\n    val imageResult: ImageResult = sketch.execute(request)\n}\njob.cancel()\n</code></pre>"},{"location":"getting_started/#imageview-extensions","title":"ImageView extensions","text":"<p>Sketch provides a series of extensions for ImageView, as follows:</p> <pre><code>// load\nimageView.loadImage(\"https://www.example.com/image.jpg\") {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade(true)\n}\n\n// cancel\nimageView.disposeLoad()\n\n// result\nval imageResult: ImageResult? = imageView.imageResult\n</code></pre> <p>loadImage() is only available in singleton mode</p>"},{"location":"getting_started/#document","title":"Document","text":"<p>Basic functions:</p> <ul> <li>Register component</li> <li>Compose</li> <li>Http: Load network images</li> <li>AnimatedImage: GIF\u3001WEBP\u3001HEIF</li> <li>Resize: Modify the image size</li> <li>Transformation: Transformation image</li> <li>Transition: Display images in cool transitions</li> <li>StateImage: Placeholder and error images</li> <li>Listener: Listen for request status and download progress</li> <li>DownloadCache: Understand download caching to avoid repeated downloads</li> <li>ResultCache: Understand result caching to avoid duplicate conversions</li> <li>MemoryCache: Understand memory caching to avoid repeated loading</li> <li>Fetcher: Learn about Fetcher and extend new URI types</li> <li>Decoder: Understand the decoding process of Sketch</li> <li>Target: Apply the load results to the target</li> <li>SVG: Decode SVG still images</li> <li>VideoFrames: Decode video frames</li> <li>BlurHash</li> <li>ExifOrientation: Correct the image orientation</li> <li>ImageOptions: Manage image configurations in a unified manner</li> <li>RequestInterceptor: Intercept ImageRequest</li> <li>DecodeInterceptor: Intercept the decoding process</li> <li>Preload images into memory</li> <li>Download images</li> <li>Lifecycle</li> <li>Log</li> <li>Migrate</li> </ul> <p>Featured functions:</p> <ul> <li>SketchImageView: Configure the request through XML attributes</li> <li>Improve the clarity of long images in grid lists</li> <li>Displays the download progress</li> <li>Displays the image type corner</li> <li>Pause image downloads on cellular data to save data</li> <li>The list slides to pause the loading of images</li> <li>Displays an icon for an apk file or installed app</li> </ul>"},{"location":"http/","title":"Http network image","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"http/#components","title":"Components","text":"<p>Sketch provides the <code>sketch-http-*</code> series of modules to support Http network images, the supported platforms and differences are as follows:</p> Module FetcherProvider Fetcher Android iOS Desktop Js WasmJs sketch-http jvm: HurlHttpUriFetcherProvidernonJvm: KtorHttpUriFetcherProvider jvm: HurlHttpUriFetchernonJvm: KtorHttpUriFetcher \u2705 \u2705 \u2705 \u2705 \u2705 sketch-http-hurl HurlHttpUriFetcherProvider HurlHttpUriFetcher \u2705 \u274c \u2705 \u274c \u274c sketch-http-okhttp OkHttpHttpUriFetcherProvider OkHttpHttpUriFetcher \u2705 \u274c \u2705 \u274c \u274c sketch-http-ktor2 KtorHttpUriFetcherProvider KtorHttpUriFetcher \u2705 \u2705 \u2705 \u2705 \u274c sketch-http-ktor3 KtorHttpUriFetcherProvider KtorHttpUriFetcher \u2705 \u2705 \u2705 \u2705 \u2705 <p>[!IMPORTANT] * HurlHttpUriFetcher is implemented using jvm\u2019s own HttpURLConnection and does not require     additional dependencies. * Both the <code>sketch-http-ktor2</code> and <code>sketch-http-ktor3</code> modules contain the engines required for     each platform. If you need to use other engines, please use their core versions, such as     <code>sketch-http-ktor2-core</code> and <code>sketch-http-ktor3-core</code>, and then configure the dependencies of     the engine you need * ktor2 does not support the wasmJs platform. If you must support the wasmJs platform, please use     ktor3 * The above components all support automatic registration. You only need to import them without     additional configuration. If you need to register manually, please read the     documentation: \u300aRegister component\u300b</p>"},{"location":"http/#install-component","title":"Install component","text":"<p>Before loading network images, you need to select one of the above components and configure dependencies. Take <code>sketch-http</code> as an example:</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-http:${LAST_VERSION}\")\n</code></pre>"},{"location":"http/#load-network-images","title":"Load network images","text":"<p>Simply use http uri to load images, as follows:</p> <pre><code>val imageUri = \"https://www.sample.com/image.jpg\"\n\n// compose\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\n// view\nimageView.loadImage(imageUri)\n</code></pre>"},{"location":"http/#configuration","title":"Configuration","text":"<p>Sketch abstracts the http part into HttpStack, and each *HttpUriFetcher has a corresponding HttpStack implementation, as follows:</p> <ul> <li>HurlHttpUriFetcher\uff1aHurlStack</li> <li>OkHttpHttpUriFetcher\uff1aOkHttpStack</li> <li>KtorHttpUriFetcher\uff1a[KtorStack]</li> </ul> <p>You can disable automatic registration of related components first, and then modify the configuration of HttpStack when manually configuring *HttpUriFetcher, as follows:</p> <p>HurlStack:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(HurlHttpUriFetcherProvider::class)\n    addComponents {\n        val httpStack = HurlStack.Builder().apply {\n            connectTimeout(5000)\n            readTimeout(5000)\n            userAgent(\"Android 8.1\")\n            headers(\"accept-encoding\" to \"gzip\")   // non-repeatable header\n            addHeaders(\"cookie\" to \"...\")    // repeatable header\n            addInterceptor(object : HurlStack.Interceptor {\n                override fun intercept(chain: Interceptor.Chain): Response {\n                    val connection: HttpURLConnection = chain.connection\n                    // ...\n                    return chain.proceed()\n                }\n            })\n        }.build()\n        addFetcher(HurlHttpUriFetcher.Factory(httpStack))\n    }\n}.build()\n</code></pre> <p>OkHttpStack:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(OkHttpHttpUriFetcherProvider::class)\n    addComponents {\n        val httpStack = OkHttpStack.Builder().apply {\n            connectTimeout(5000)\n            readTimeout(5000)\n            userAgent(\"Android 8.1\")\n            headers(\"accept-encoding\" to \"gzip\")   // non-repeatable header\n            addHeaders(\"cookie\" to \"...\")    // repeatable header\n            interceptors(object : okhttp3.Interceptor {\n                override fun intercept(chain: Interceptor.Chain): Response {\n                    val request = chain.request()\n                    // ...\n                    return chain.proceed(request)\n                }\n            })\n            networkInterceptors(object : okhttp3.Interceptor {\n                override fun intercept(chain: Interceptor.Chain): Response {\n                    val request = chain.request()\n                    // ...\n                    return chain.proceed(request)\n                }\n            })\n        }.build()\n        addFetcher(OkHttpHttpUriFetcher.Factory(httpStack))\n    }\n}.build()\n</code></pre> <p>KtorStack:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(KtorHttpUriFetcherProvider::class)\n    addComponents {\n        val httpClient = HttpClient {\n            // ...\n        }\n        val httpStack = KtorStack(httpClient)\n        addFetcher(KtorHttpUriFetcher.Factory(httpStack))\n    }\n}.build()\n</code></pre>"},{"location":"image_options/","title":"ImageOptions","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>ImageOptions is used to define image request configurations in batches and supports all image-related attributes of ImageRequest.</p> <p>ImageOptions can be used in the following locations:</p> <ul> <li>Target.getImageOptions()<ul> <li>SketchImageView.imageOptions</li> <li>rememberAsyncImageState(ImageOptions)</li> </ul> </li> <li>ImageRequest.Builder.merge(ImageOptions)/default(ImageOptions)</li> <li>Sketch.Builder.globalImageOptions(ImageOptions)</li> </ul> <p>The final priority of the same properties when constructing the ImageRequest is:</p> <ol> <li>ImageRequest.Builder</li> <li>Target.getImageOptions()</li> <li>ImageRequest.Builder.default(ImageOptions)</li> <li>Sketch.globalImageOptions</li> </ol>"},{"location":"image_options/#example","title":"Example","text":"<p>Global\uff1a</p> <pre><code>Sketch.Builder(context).apply {\n    globalImageOptions(ImageOptions {\n        placeholer(R.drawable.placeholder)\n        error(R.drawable.error)\n        // more ...\n    })\n}.build()\n</code></pre> <p>View\uff1a</p> <pre><code>sketchImageView.imageOptions = ImageOptions {\n    placeholer(R.drawable.placeholder)\n    // more ...\n}\n</code></pre> <p>ImageRequest\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    merge(ImageOptions {\n        placeholer(R.drawable.placeholder)\n        error(R.drawable.error)\n        // more ...\n    })\n    default(ImageOptions {\n        placeholer(R.drawable.placeholder)\n        error(R.drawable.error)\n        // more ...\n    })\n}\n</code></pre> <p>AsyncImageState\uff1a</p> <pre><code>val state = rememberAsyncImageState(ComposableImageOptions {\n  placeholer(Res.drawable.placeholder)\n  error(Res.drawable.error)\n  // more ...\n})\nAsyncImage(\n  uri = \"https://example.com/image.jpg\",\n  contentDescription = \"\",\n  state = state,\n)\n</code></pre>"},{"location":"lifecycle/","title":"Lifecycle","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch relies on Lifecycle to monitor the life cycle of the page for the following functions:</p> <ol> <li>When the animation is loaded, it will automatically play if the page has reached the Start state.</li> <li>Start or stop playing animations when the page reaches Start or Stop state</li> <li>Stop the request when the page is destroyed function.</li> </ol>"},{"location":"lifecycle/#default-value","title":"Default Value","text":"<p>If Lifecycle is not set when creating the request, Sketch will be obtained in the following order:</p> <ul> <li>compose:<ol> <li>Obtained through LocalLifecycleOwner.current.lifecycle API</li> <li>Use GlobalLifecycle</li> </ol> </li> <li>view:<ol> <li>Obtained through view.findViewTreeLifecycleOwner() API</li> <li>Obtained through view.context (if context implements the LifecycleOwner interface, such as    Activity)</li> <li>Obtained through ImageRequest.Builder.context (if context implements the LifecycleOwner    interface, e.g.    Activity)</li> <li>Use GlobalLifecycle</li> </ol> </li> </ul>"},{"location":"lifecycle/#configuration","title":"Configuration","text":"<p>If the above Sketch cannot obtain Lifecycle by default or the Lifecycle obtained by default does not meet your needs, ImageRequest.Builder also provides the lifecycle() method for setting lifecycle, as follows:</p> <pre><code>val lifecycle: Lifecycle = ...\nImageRequest(context, \"https://www.example.com/image.gif\") {\n    lifecycle(lifecycle)\n}\n</code></pre>"},{"location":"listener/","title":"Listener","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p>"},{"location":"listener/#compose","title":"Compose","text":"<p>In Compose you have to pass loadState and progress of AsyncImageState Properties to monitor the status and progress of the request. For specific reasons, please refer to \u300aCompose\u300b, as follows:</p> <pre><code>val state = rememberAsyncImageState()\nval loadState: LoadState? = state.loadState\nwhen (loadState) {\n    is Started -&gt; {\n\n    }\n    is Success -&gt; {\n\n    }\n    is Error -&gt; {\n\n    }\n    is Canceled -&gt; {\n\n    }\n    else -&gt; {\n        // null\n    }\n}\nval progress: Progress? = state.progress\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\",\n    state = state\n)\n</code></pre>"},{"location":"listener/#android-view","title":"Android View","text":"<p>ImageRequest You can monitor start, completion, error, cancellation, and progress through Listener and ProgressListener, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    addListener(object : Listener {\n        override fun onStart(request: ImageRequest) {\n            // ...\n        }\n\n        override fun onSuccess(request: ImageRequest, result: ImageResult.Success) {\n            // ...\n        }\n\n        override fun onError(request: ImageRequest, error: ImageResult.Error) {\n            // ...\n        }\n\n        override fun onCancel(request: ImageRequest) {\n            // ...\n        }\n    })\n    // \u6216\n    addListener(\n        onStart = { request: ImageRequest -&gt;\n            // ...\n        },\n        onSuccess = { request: ImageRequest, result: ImageResult.Success -&gt;\n            // ...\n        },\n        onError = { request: ImageRequest, error: ImageResult.Error -&gt;\n            // ...\n        },\n        onCancel = { request: ImageRequest -&gt;\n            // ...\n        },\n    )\n\n    addProgressListener { request: ImageRequest, progress: Progress -&gt;\n        // ...\n    }\n}\n</code></pre> <p>[!TIP] All callbacks will be executed on the main thread</p>"},{"location":"listener/#sketchimageview","title":"SketchImageView","text":"<p>SketchImageView provides Flow method to monitor the status and progress of requests, as follows:</p> <pre><code>val sketchImageView = SketchImageView(context)\nscope.launch {\n    sketchImageView.requestState.loadState.collect { loadState -&gt;\n        when (loadState) {\n            is Started -&gt; {\n\n            }\n            is Success -&gt; {\n\n            }\n            is Error -&gt; {\n\n            }\n            is Canceled -&gt; {\n\n            }\n            else -&gt; {\n                // null\n            }\n        }\n    }\n}\n\nscope.launch {\n    sketchImageView.requestState.progressState.collect { progress -&gt;\n\n    }\n}\n</code></pre>"},{"location":"log/","title":"Log","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>The log of Sketch is provided by the Logger component, and the tag is unified as <code>Sketch</code></p>"},{"location":"log/#modify-level","title":"Modify Level","text":"<p>Like most logging frameworks, Logger also controls the level of output logs through Logger .Level, which defaults to <code>Info</code></p> <p>You can modify the level at any time, as follows:</p> <pre><code>// When initializing Sketch\nSketch.Builder(context).apply {\n    logger(level = Logger.Level.Debug)\n}.build()\n\n// At any other time\ncontext.sketch.logger.level = Logger.Level.Debug\n</code></pre> <p>[!TIP] Excessive logs will affect UI fluency. For the official release version, please set the level to Info and above.</p>"},{"location":"log/#_1","title":"\u4fee\u6539\u8f93\u51fa","text":"<p>Logger Output logs through the Logger.Pipeline interface, on the Android platform Logger .Pipeline The implementation is AndroidLogPipeline, on non-Android platforms it is PrintLogPipeline</p> <p>You can implement the Logger.Pipeline interface to customize new output, and then use it when initializing Sketch, as follows:</p> <pre><code>class MyPipeline : Logger.Pipeline {\n\n    override fun log(level: Logger.Level, tag: String, msg: String, tr: Throwable?) {\n        if (tr != null) {\n            val trString = tr.stackTraceToString()\n            println(\"$level. $tag. $msg. \\n$trString\")\n        } else {\n            println(\"$level. $tag. $msg\")\n        }\n    }\n\n    override fun flush() {\n\n    }\n\n    override fun toString(): String = \"MyPipeline\"\n}\n\nSketch.Builder(context).apply {\n    logger(pipeline = MyPipeline())\n}.build()\n</code></pre>"},{"location":"long_image_grid_thumbnails/","title":"Improve the clarity of long images in grid lists","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Long images in the grid list will be displayed very blurry because the thumbnail size is too small.</p> <p>For example, if the component is 400x400 and the image width and height are 30000x960, Sketch automatically calculates the Resize size to be 400x400, and the Precision default is LESS_PIXELS. The final calculated inSampleSize is 16 and the thumbnail size is 1875x60. This thumbnail is extremely blurry and cannot identify any content.</p> <p>At this time, you can use LongImagePrecisionDecider to dynamically calculate Precision based on the image width, height and ImageRequest.size. If it is judged to be a long image, use Precision.SAME_ASPECT_RATIO to improve the clarity of the thumbnail. Otherwise, still use Precision.LESS_PIXELS, so It not only ensures that long images have a clear thumbnail, but also ensures fast loading of non-long images.</p> <p>[!TIP] 1. The default implementation of long image rules is DefaultLongImageDecider, you can also use      custom rules when creating LongImagePrecisionDecider 2. SAME_ASPECT_RATIO will only read part of the original image, so you can get a clearer      thumbnail.</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    precision(LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO))\n    scale(LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP))\n}\n</code></pre>"},{"location":"memory_cache/","title":"Memory Cache","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>In order to avoid duplicate loading of images and improve the loading speed of images, Sketch has introduced memory cache, which will convert the loaded Image Cache is in memory, and the loading process is skipped when you read it directly from memory next time.</p> <p>The memory cache function is responsible for the core logic by MemoryCacheRequestInterceptor, and MemoryCache is responsible for the storage management.</p> <p>The default implementation of MemoryCache is LruMemoryCache:</p> <ul> <li>Release the old Bitmap based on the least used principle</li> <li>Maximum capacity is 25% to 33% of maximum available memory on Android and 15% of maximum available   memory on non-Android</li> </ul>"},{"location":"memory_cache/#customize","title":"Customize","text":"<p>You can customize the implementation or configuration of the memory cache through the memoryCache() method of Sketch.Builder when initializing Sketch, as follows:</p> <pre><code>// Use the default MemoryCache implementation and configure its parameters\nSketch.Builder(context).apply {\n    memoryCache(\n        MemoryCache.Builder(context)\n            .maxSizePercent(0.4f)\n            .build()\n    )\n}.build()\n\n// Use your own MemoryCache implementation\nclass MyMemoryCache : MemoryCache {\n    // ...\n}\nSketch.Builder(context).apply {\n    memoryCache(MyDiskCache())\n}.build()\n</code></pre>"},{"location":"memory_cache/#cache-policy","title":"Cache Policy","text":"<p>The cache policy is used to control how memory cache is used. The default configuration is CachePolicy.ENABLED, which you can configure via the memoryCachePolicy property of ImageRequest or ImageOptions:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Disable\n    memoryCachePolicy(CachePolicy.DISABLED)\n    // Read only\n    memoryCachePolicy(CachePolicy.READ_ONLY)\n    // Write Only\n    memoryCachePolicy(CachePolicy.WRITE_ONLY)\n}\n</code></pre>"},{"location":"memory_cache/#cache-key","title":"Cache key","text":"<p>By default, Sketch will automatically generate memory cache keys based on the requested configuration, but you can also customize memory cache keys with the following properties:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Use custom memory cache key\n    memoryCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // Modify the automatically generated memory cache key\n    memoryCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n\nImageOptions {\n    // Use custom memory cache key\n    memoryCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // Modify the automatically generated memory cache key\n    memoryCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n</code></pre> <p>You can also get the final memory cache key through the following methods:</p> <pre><code>// The memory cache key can be obtained through RequestContext in the customized RequestInterceptor, \n// DecodeInterceptor, Transformation, Fetcher, and Decoder components.\nval requestContext: RequestContext = ...\nrequestContext.memoryCacheKey\n\n// Get memory cache key from ImageResult\nval imageSuccess = sketch.execute(request) as ImageResult.Success\nimageSuccess.memoryCacheKey\n</code></pre>"},{"location":"memory_cache/#read-and-write-cache","title":"Read and write cache","text":"<p>You can access the memory cache by getting the memory cache instance through the <code>sketch.memoryCache</code> property.</p> <pre><code>scope.launch {\n    val memoryCache = sketch.memoryCache\n    val memoryCacheKey = requestContext.memoryCacheKey\n    memoryCache.withLock(memoryCacheKey) {\n        // put\n        val newBitmap: Bitmap = Bitmap.create(100, 100, Bitmap.Config.ARGB_8888)\n        val newCacheValue = newBitmap.asImage().cacheValue()!!\n        put(memoryCacheKey, newCacheValue)\n\n        // exist\n        val exist: Boolean = exist(memoryCacheKey)\n\n        // get\n        val cachedValue: MemoryCache.Value? = get(memoryCacheKey)\n        val image: Image = cachedValue?.image\n\n        // remove\n        val clearedValue: MemoryCache.Value? = remove(memoryCacheKey)\n    }\n\n    // Clear all\n    memoryCache.clear()\n\n    // trim\n    memoryCache.trim((memoryCache.maxSize * 0.5f).toLong())\n}\n</code></pre> <p>[!CAUTION] When accessing the memoryCache of a specified key, you must first obtain the lock and then access it. This will not only avoid repeated loading of the same request, but also avoid problems under multi-threading.</p> <p>For more available methods, please refer to MemoryCache</p>"},{"location":"memory_cache/#clear-cache","title":"Clear cache","text":"<p>The memory cache is cleared under the following circumstances:</p> <ul> <li>Actively call the <code>trim()</code>, <code>remove()</code>, and <code>clear()</code> methods of MemoryCache</li> <li>Automatically release older caches when maximum capacity is reached</li> <li>The low available memory of the device triggers the <code>onLowMemory()</code> method of Application</li> <li>System trimming memory triggers Application's <code>onTrimMemory(int)</code> method</li> </ul>"},{"location":"migrate/","title":"Migrate","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>The sketch3compat directory provides some utility functions, utility classes, and alias classes that are compatible with the sketch3 API, which can help you adapt to sketch4 more easily. You can copy them directly into your project.</p> <ul> <li>DownloadRequest: You can use <code>Sketch.executeDownload(ImageRequest)</code> or   <code>Sketch.enqueueDownload(ImageRequest)</code> instead</li> <li>LoadRequest: Just don\u2019t set <code>target</code></li> </ul> <p>Other migration details are being gradually improved.</p>"},{"location":"mime_type_logo/","title":"Mime type logo","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch provides extended functions for displaying image type logo for view and Compose, as follows:</p> <p></p>"},{"location":"mime_type_logo/#compose","title":"Compose","text":"<p>First install the component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\n</code></pre> <p>Then add the image type logo through the mimeTypeLogo() function</p> <pre><code>val imageTypeIconMap = remember {\n    mapOf(\n        \"image/gif\" to painterResource(Res.drawable.image_type_gif),\n        \"image/png\" to painterResource(Res.drawable.image_type_png),\n        \"image/jpeg\" to painterResource(Res.drawable.image_type_jpeg),\n        \"image/webp\" to painterResource(Res.drawable.image_type_webp),\n        \"image/bmp\" to painterResource(Res.drawable.image_type_bmp),\n        \"image/svg+xml\" to painterResource(Res.drawable.image_type_svg),\n        \"image/heif\" to painterResource(Res.drawable.image_type_heif),\n    )\n}\n\nval state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    modifier = Modifier\n        .size(200.dp)\n        .mimeTypeLogo(state, imageTypeIconMap, margin = 4.dp),\n    state = state,\n    contentDescription = \"\",\n)\n</code></pre> <p>[!TIP] Compose version function is implemented by MimeTypeLogoModifier</p>"},{"location":"mime_type_logo/#view","title":"View","text":"<p>First install the component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre> <p>Then use the showMimeTypeLogoWithRes() function with SketchImageView to add the image type logo.</p> <pre><code>val sketchImageView = SketchImageView(context)\nsketchImageView.showMimeTypeLogoWithRes(\n    mimeTypeIconMap = mapOf(\n        \"image/gif\" to R.drawable.image_type_gif,\n        \"image/png\" to R.drawable.image_type_png,\n        \"image/jpeg\" to R.drawable.image_type_jpeg,\n        \"image/webp\" to R.drawable.image_type_webp,\n        \"image/bmp\" to R.drawable.image_type_bmp,\n        \"image/svg+xml\" to R.drawable.image_type_svg,\n        \"image/heif\" to R.drawable.image_type_heif,\n    ),\n    margin = 4.dp2px\n)\n</code></pre> <p>[!TIP] View version functionality is implemented by MimeTypeLogoAbility</p>"},{"location":"pause_load_when_scrolling/","title":"Pause loading of images when list scrolling","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Loading a large number of images during list scrolling will reduce UI fluency. Therefore, pausing the loading of images during list scrolling on devices with poor performance can significantly improve UI fluency.</p> <p>First install component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\n// or\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre> <p>Then add a scroll listener to the list control, as follows:</p> <pre><code>// RecyclerView\nrecyclerView.addOnScrollListener(PauseLoadWhenScrollingMixedScrollListener())\n\n// ListView\nlistView.setOnScrollListener(PauseLoadWhenScrollingMixedScrollListener())\n\n// Compose LazyColumn\n@Composable\nfun ListContent() {\n    val lazyListState = rememberLazyListState()\n    bindPauseLoadWhenScrolling(lazyListState)\n\n    LazyColumn(state = lazyListState) {\n        // ...\n    }\n}\n</code></pre> <p>Then register the PauseLoadWhenScrollingDecodeInterceptor request interceptor, as follows:</p> <pre><code>// Register for all ImageRequests when customizing Sketch\nSketch.Builder(context).apply {\n    components {\n        addDecodeInterceptor(PauseLoadWhenScrollingDecodeInterceptor())\n    }\n}.build()\n\n// Register for a single ImageRequest when loading an image\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addDecodeInterceptor(PauseLoadWhenScrollingDecodeInterceptor())\n    }\n}\n</code></pre> <p>Finally, enable the pause loading function during list scrolling for a single request, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    pauseLoadWhenScrolling(true)\n}\n</code></pre>"},{"location":"preload/","title":"Preload","text":""},{"location":"preload/#preload","title":"Preload","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sometimes in order to improve the loading speed and prevent users from seeing the image loading process, it is necessary to load the image into memory in advance.</p> <p>We just need not to set Target, and then ensure that the size, precision, and scale parameters are the same as when used, as follows:</p> <pre><code>val request = ImageRequest(context, \"https://example.com/image.jpg\") {\n    size(200, 200)\n    precision(Precision.LESS_PIXELS)\n    scale(Scale.CENTER_CROP)\n}\n\nsketch.enqueue(request)\n// or\nscope.launch {\n    sketch.execute(request)\n}\n</code></pre> <p>[!TIP] When building ImageRequest, you need to actively set and use consistent size, precision, and scale, because if there is no active setting when using Size, precision and scale will be obtained from Target, which may cause inconsistencies in size, precision, and scale between preloading and use, resulting in failure to hit the cache.</p>"},{"location":"progress_indicator/","title":"Download progress indicator","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch provides extended functions for view and Compose to display download progress, as follows:</p> <p></p> <p>Three styles are provided to choose from, as follows:</p> <p></p> <p>[!TIP] They can also adjust color, size and behavior</p>"},{"location":"progress_indicator/#compose","title":"Compose","text":"<p>First install component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\n</code></pre> <p>Then use the progressIndicator() function to add a progress indicator</p> <pre><code>// val progressPainter = rememberMaskProgressPainter()\n// val progressPainter = rememberSectorProgressPainter()\nval progressPainter = rememberRingProgressPainter()\nval state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    modifier = Modifier\n        .size(200.dp)\n        .progressIndicator(state, progressPainter),\n    state = state,\n    contentDescription = \"\",\n)\n</code></pre> <p>[!TIP] Compose version function is implemented by ProgressIndicatorModifier</p>"},{"location":"progress_indicator/#custom-indicator","title":"Custom indicator","text":"<p>You can inherit AbsProgressPainter to implement your own progress indicator, as follows:</p> <pre><code>class MyProgressPainter(\n    private val maskColor: Color = Color(PROGRESS_INDICATOR_MASK_COLOR),\n    hiddenWhenIndeterminate: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_INDETERMINATE,\n    hiddenWhenCompleted: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_COMPLETED,\n    stepAnimationDuration: Int = PROGRESS_INDICATOR_STEP_ANIMATION_DURATION,\n) : AbsProgressPainter(\n    hiddenWhenIndeterminate = hiddenWhenIndeterminate,\n    hiddenWhenCompleted = hiddenWhenCompleted,\n    stepAnimationDuration = stepAnimationDuration\n), SketchPainter {\n\n    override val intrinsicSize: Size = Size(200.0, 200.0)\n\n    override fun DrawScope.drawProgress(drawProgress: Float) {\n        // Draw your indicator\n    }\n}\n</code></pre> <p>Then use your own indicator like this:</p> <pre><code>val progressPainter = remember { MyProgressPainter() }\nval state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    modifier = Modifier\n        .size(200.dp)\n        .progressIndicator(state, progressPainter),\n    state = state,\n    contentDescription = \"\",\n)\n</code></pre>"},{"location":"progress_indicator/#view","title":"View","text":"<p>First install component</p> <p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre> <p>Then use the show*ProgressIndicator() function with SketchImageView to add a progress indicator</p> <pre><code>val sketchImageView = SketchImageView(context)\n\nsketchImageView.showMaskProgressIndicator()\n// or\nsketchImageView.showSectorProgressIndicator()\n// or\nsketchImageView.showRingProgressIndicator()\n</code></pre> <p>[!TIP] View version functionality is implemented by ProgressIndicatorAbility</p>"},{"location":"progress_indicator/#custom-indicator_1","title":"Custom indicator","text":"<p>You can extends AbsProgressDrawable to implement your own progress indicator, as follows:</p> <pre><code>class MyProgressDrawable(\n    hiddenWhenIndeterminate: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_INDETERMINATE,\n    hiddenWhenCompleted: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_COMPLETED,\n    stepAnimationDuration: Int = PROGRESS_INDICATOR_DEFAULT_STEP_ANIMATION_DURATION,\n) : AbsProgressDrawable(\n    hiddenWhenIndeterminate = hiddenWhenIndeterminate,\n    hiddenWhenCompleted = hiddenWhenCompleted,\n    stepAnimationDuration = stepAnimationDuration\n) {\n\n    private val paint = Paint().apply {\n        if (VERSION.SDK_INT &gt;= VERSION_CODES.KITKAT) {\n            alpha = this@RingProgressDrawable.alpha\n        }\n        if (VERSION.SDK_INT &gt;= VERSION_CODES.LOLLIPOP) {\n            colorFilter = this@RingProgressDrawable.colorFilter\n        }\n    }\n\n    override fun drawProgress(canvas: Canvas, drawProgress: Float) {\n        val bounds = bounds.takeIf { !it.isEmpty } ?: return\n        canvas.withSave {\n            // Draw your indicator\n        }\n    }\n\n    override fun setAlpha(alpha: Int) {\n        paint.alpha = alpha\n    }\n\n    override fun setColorFilter(colorFilter: ColorFilter?) {\n        paint.colorFilter = colorFilter\n    }\n\n    @Deprecated(\n        \"Deprecated in Java. This method is no longer used in graphics optimizations\",\n        ReplaceWith(\"\")\n    )\n    override fun getOpacity(): Int = PixelFormat.TRANSLUCENT\n\n    override fun getIntrinsicWidth(): Int = 200\n\n    override fun getIntrinsicHeight(): Int = 200\n\n    override fun mutate(): ProgressDrawable {\n        return this\n    }\n}\n</code></pre> <p>Then use your own indicator like this:</p> <pre><code>val sketchImageView = SketchImageView(context)\nsketchImageView.showProgressIndicator(MyProgressDrawable())\n</code></pre>"},{"location":"register_component/","title":"Register component","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch supports extending the functions of Sketch through the Fetcher and Decoder interfaces, and the built-in <code>sketch-http-*</code> and this is how <code>sketch-animated-*</code> and extension components such as <code>sketch-svg</code> and <code>sketch-video</code> are implemented</p> <p>Extended components need to be registered with Sketch or ImageRequest before use. Components registered with Sketch can be used by all ImageRequests, while components registered with ImageRequest can only be used by the current ImageRequest.</p> <p>[!TIP] Components registered in ImageRequest have higher priority than components registered in Sketch</p>"},{"location":"register_component/#register-to-sketch","title":"Register to Sketch","text":"<p>There are two ways to register to Sketch: automatic registration and manual registration. Automatic registration is enabled by default, and all modules that come with it have been adapted to automatic registration.</p>"},{"location":"register_component/#automatic-registration","title":"Automatic registration","text":"<p>Sketch supports automatic discovery and registration of Fetcher and Decoder components. It is implemented through <code>ServiceLoader</code> on the jvm platform and on non-jvm platforms. The platform is implemented through the <code>@EagerInitialization</code> annotation.</p> <p>For components that are adapted to automatic registration, you only need to configure their dependencies. There is no need to manually register the component when initializing Sketch.</p>"},{"location":"register_component/#manual-registration","title":"Manual registration","text":"<p>If you want to have more precise control over component registration, you can disable the automatic component registration function and then use manual component registration, as follows:</p> <pre><code>Sketch.Builder(context).apply {\n    componentLoaderEnabled(false)    // Disable automatic registration for all components\n    components {\n        addFetcher(MyFetcher.Factory())\n        addDecoder(MyDecoder.Factory())\n        // ...\n    }\n}.build()\n</code></pre> <p>You can also disable the automatic registration function of only some components, as follows:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(MyFetcherProvider::class)    // Disable automatic registration of the MyFetcherProvider component\n    addIgnoreDecoderProvider(MyDecoderProvider::class)    // Disable automatic registration of the MyDecoderProvider component\n    components {\n        addFetcher(MyFetcher.Factory())\n        addDecoder(MyDecoder.Factory())\n        // ...\n    }\n}.build()\n</code></pre>"},{"location":"register_component/#adapt-to-automatic-registration","title":"Adapt to automatic registration","text":"<p>To adapt to the automatic registration function, newly developed components need to follow the following steps (taking full-platform components as an example):</p> <ol> <li>Create an implementation class of the expect version FetcherProvider or DecoderProvider in    the commonMain directory</li> <li>jvm platform:<ol> <li>Create an actual version of the FetcherProvider or DecoderProvider implementation class    in the jvmCommonMain directory. Note that Add the @Keep annotation to the implementation    class because ServiceLoader creates its instance through reflection</li> <li>Create 'resources/META-INF/services' directory under androidMain and desktopMain directories</li> <li>Create a file named 'com.github.panpf.sketch.util.FetcherProvider' or ' in the services    directory com.github.panpf.sketch.util.DecoderProvider' files</li> <li>Fill in the full name of your FetcherProvider or DecoderProvider implementation class one    line in the file</li> </ol> </li> <li>Non-jvm platforms:<ol> <li>Create an actual version of the FetcherProvider or DecoderProvider implementation class    in the nonJvmCommonMain directory</li> </ol> </li> <li>Create any file anywhere in the iosMain and wasmJsMain platform directories and fill in the       following content:        <pre><code>@Suppress(\"DEPRECATION\")\n@OptIn(ExperimentalStdlibApi::class)\n@EagerInitialization\n@Deprecated(\"\", level = DeprecationLevel.HIDDEN)\nval ktorHttpUriFetcherProviderInitHook: Any = ComponentLoader.register(KtorHttpUriFetcherProvider())\n</code></pre></li> <li>Create any file anywhere in the jsMain platform directory and fill in the following content:       <pre><code>@JsExport\n@Suppress(\"DEPRECATION\")\n@OptIn(ExperimentalStdlibApi::class, ExperimentalJsExport::class)\n@EagerInitialization\n@Deprecated(\"\", level = DeprecationLevel.HIDDEN)\nval ktorHttpUriFetcherProviderInitHook: Any = ComponentLoader.register(KtorHttpUriFetcherProvider())\n</code></pre></li> <li><code>ktorHttpUriFetcherProviderInitHook</code> and <code>KtorHttpUriFetcherProvider</code> need to be replaced        with yours        FetcherProvider or DecoderProvider implementation class name</li> </ol> <p>[!TIP] For a complete example, please refer to the <code>sketch-http-ktor3</code> module</p>"},{"location":"register_component/#register-to-imagerequest","title":"Register to ImageRequest","text":"<p>Registering to ImageRequest is the same as manually registering to Sketch, as follows:</p> <pre><code>ImageRequest(context, \"http://sample.com/sample.jpeg\").apply {\n    components {\n        addFetcher(MyFetcher.Factory())\n        addDecoder(MyDecoder.Factory())\n        // ...\n    }\n}.build()\n</code></pre>"},{"location":"request_interceptor/","title":"RequestInterceptor","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch intercepts the execution process of ImageRequest through RequestInterceptor, and you can use this to change the input and output of the execution process.</p> <p>First implement the RequestInterceptor interface to define your RequestInterceptor, as follows:</p> <pre><code>class MyRequestInterceptor : RequestInterceptor {\n\n    // If the current RequestInterceptor will modify the returned results and is only used for some requests, then please give a unique key to build the cache key, otherwise give null\n    override val key: String? = null\n\n    // Used for sorting, the larger the value, the further back in the list. The value range is 0 ~ 100. Usually zero. Only EngineRequestInterceptor can be 100\n    override val sortWeight: Int = 0\n\n    override suspend fun intercept(chain: Chain): Result&lt;ImageData&gt; {\n        // Disable memory caching for all requests\n        val newRequest = chain.request.newRequest {\n            memoryCachePolicy(CachePolicy.DISABLED)\n        }\n        return chain.proceed(newRequest)\n    }\n}\n</code></pre> <p>[!TIP] 1. MyRequestInterceptor demonstrates a case where all requests are prohibited from using the      memory cache 2. If you want to modify the return result, just intercept the result returned by the proceed      method and return a new ImageData 3. If you don\u2019t want to execute the request anymore, just don\u2019t execute the proceed method.</p> <p>Then register your RequestInterceptor as follows:</p> <pre><code>// Register for all ImageRequests when customizing Sketch\nSketch.Builder(context).apply {\n  components {\n      addRequestInterceptor(MyRequestInterceptor())\n  }\n}.build()\n\n// Register for a single ImageRequest when loading an image\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addRequestInterceptor(MyRequestInterceptor())\n    }\n}\n</code></pre>"},{"location":"resize/","title":"Resize","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch will adjust the size of the image to avoid exceeding the target and causing memory waste.</p> <p>Adjusting the image size depends on the sizeResolver, precisionDecider and scaleDecider of ImageRequest Attributes, when they are determined, a Resize will be generated and handed over to Decoder for use.</p> <p>Decoder First reduce the image size through subsampling or regional subsampling during decoding. If the size still does not meet the Resize requirements after decoding, it will be adjusted again.</p> <p>Resize consists of Size, Precision, Scale</p> <ul> <li>Size: Desired width and height</li> <li>Precision: Decide how to use Size to resize images<ul> <li>LESS_PIXELS: As long as the number of pixels of the final Image (width times height) is less   than or equal to the number of pixels of Size</li> <li>SMALLER_SIZE: As long as the width and height of the final Image are less than or equal   to Size</li> <li>SAME_ASPECT_RATIO: Ensure that the aspect ratio of the final Image is consistent with the   aspect ratio of Size and the number of pixels is less than or equal to the number of pixels   of Size. If they are inconsistent, the original image will be cropped according to Scale</li> <li>EXACTLY: Make sure the size of the final Image is consistent with Size, if not the original   image will be cropped according to Scale</li> </ul> </li> <li>Scale: Determines how to crop the original image when Precision is EXACTLY or   SAME_ASPECT_RATIO<ul> <li>START_CROP: Keep the head part</li> <li>CENTER_CROP: Keep the center part</li> <li>END_CROP: Keep the end part</li> <li>FILL: All retained but deformed</li> </ul> </li> </ul>"},{"location":"resize/#configuration","title":"Configuration","text":"<p>Both ImageRequest and ImageOptions provide resize, size, precision, and scale methods for configuring Resize, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    /* Set three properties at once */\n    resize(\n        width = 100,\n        height = 100,\n        precision = Precision.SAME_ASPECT_RATIO,\n        scale = Scale.END_CROP\n    )\n    // or\n    resize(\n        size = Size(100, 100),\n        precision = LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO),\n        scale = LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP)\n    )\n    // or\n    resize(\n        size = FixedSizeResolver(100, 100),\n        precision = LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO),\n        scale = LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP)\n    )\n\n    /* Set size properties only */\n    size(100, 100)\n    // or\n    size(Size(100, 100))\n    // or\n    size(FixedSizeResolver(100, 100))\n\n    /* Set precision properties only */\n    precision(Precision.SAME_ASPECT_RATIO)\n    // or\n    precision(LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO))\n\n    /* Set only scale properties */\n    scale(Scale.END_CROP)\n    // or\n    scale(LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP))\n}\n</code></pre>"},{"location":"resize/#sizeresolver","title":"SizeResolver","text":"<p>Sketch Use Resolver wrapper to provide Size for ImageRequest, this is because the size of the View or Compose component changes when building ImageRequest may not be determined and needs to wait until the drawing stage to obtain it, so use SizeResolver to solve this problem</p>"},{"location":"resize/#precisiondecider-scaledecider","title":"PrecisionDecider \u548c ScaleDecider","text":"<p>Sketch also uses the Decider wrapper to provide Precision and Scale for ImageRequest, so that when decoding, you can dynamically decide which Precision and Scale to use based on the image size and Resize</p> <p>The following implementations are provided by default:</p> <ul> <li>PrecisionDecider: Determine which Precision to use based on the image size and Size   of Resize<ul> <li>FixedPrecisionDecider: Always use the specified Precision</li> <li>LongImagePrecisionDecider: If it is a long image, use the specified Precision,   otherwise always use LESS_PIXELS</li> </ul> </li> <li>ScaleDecider: Decide which Scale to use based on the image size and Size of Resize<ul> <li>FixedScaleDecider: Always use the specified Scale</li> <li>LongImageScaleDecider: Specify two Scale, the first one is used for long images, otherwise   the second one is used</li> </ul> </li> </ul> <p>[!TIP] 1. Using LongImagePrecisionDecider and LongImageScaleDecider helps improve the clarity of      long images in grid lists. Learn more 2. The default implementation of long image rules is DefaultLongImageDecider. You can also use      custom rules when creating LongImagePrecisionDecider or LongImageScaleDecider</p>"},{"location":"resize/#build-order-and-defaults","title":"Build order and defaults","text":"<p>Determining the values of these properties when building ImageRequest is still a bit complicated, follows:</p> <ul> <li>Size:<ol> <li>ImageRequest.Builder.sizeResolver</li> <li>Target.getImageOptions().sizeResolver</li> <li>ImageRequest.Builder.defaultOptions.sizeResolver</li> <li>Sketch.globalImageOptions.sizeResolver</li> <li>Target.getSizeResolver()<ol> <li>View \u6216 Compose \u7ec4\u4ef6\u7684\u5bbd\u9ad8</li> <li>DisplayMetrics size \u6216 LocalWindow containerSize</li> </ol> </li> <li>[PlatformContext.screenSize()]</li> </ol> </li> <li>Precision:<ol> <li>ImageRequest.Builder.precisionDecider</li> <li>Target.getImageOptions().precisionDecider</li> <li>ImageRequest.Builder.defaultOptions.precisionDecider</li> <li>Sketch.globalImageOptions.precisionDecider</li> <li>Precision.LESS_PIXELS</li> </ol> </li> <li>Scale:<ol> <li>ImageRequest.Builder.scaleDecider</li> <li>Target.getImageOptions().scaleDecider</li> <li>ImageRequest.Builder.defaultOptions.scaleDecider</li> <li>Sketch.globalImageOptions.scaleDecider</li> <li>Scale.CENTER_CROP</li> </ol> </li> </ul> <p>[!TIP] 1. When Target is ViewTarget, the LayoutParams width and height of the View are taken first,      and then the measured width and height of the View are delayed until the drawing stage. If the      drawing stage is not executed, the request will not be executed. 2. If the width of the component is a fixed value (for example, 100) and the height is wrap, Size      will be '100xContainerHeight' 3. For detailed build rules, please refer to the ImageRequest.Builder.build() method</p>"},{"location":"resize/#platformcontextscreensize","title":"PlatformContext.screenSize()","text":"<p>The [PlatformContext.screenSize()] method is used to obtain the size of the screen. When constructing the ImageRequest, if the Size cannot be obtained, the screen size will be used as the final Size.</p> <p>[!IMPORTANT] screenSize() can obtain the accurate screen size on non-JS platforms, but on JS platforms it will always return <code>Size(1920, 1080)</code></p>"},{"location":"resize/#sizemultiplier","title":"sizeMultiplier","text":"<p>sizeMultiplier is used to scale size. For example, when sizeMultiplier is 2.0, when size is 100x100, the actual size is 200x200</p> <p>This is usually used to use the size of the component as the size by default, but the component is too small and the size needs to be enlarged to improve the image quality, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    sizeMultiplier(2.0f)\n}\n</code></pre>"},{"location":"resize/#resizeondraw","title":"resizeOnDraw","text":"<p>The resizeOnDraw properties of ImageRequest and ImageOptions are used to apply Resize to the placeholder, error, result Image of Target to change the size of Image during drawing</p> <p>resizeOnDraw relies on ResizeOnDrawHelper implementation, ResizeOnDrawHelper will use ResizeDrawable or ResizePainter to wrap placeholder, error, result Image with a layer, Size of Resize is used externally as the width and height, and Scale of Resize is used internally to scale Image</p> <p>resizeOnDraw paired with CrossfadeTransition can achieve a perfect transition. Understanding Perfect Transition</p> <p>[!IMPORTANT] 1. ResizeOnDrawHelper is provided by Target, so if Target is not set, the resizeOnDraw      property will have no effect</p>"},{"location":"result_cache/","title":"Result Cache","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>In order to avoid repeated conversion of pictures and improve the loading speed of pictures Sketch, the result cache function will store the converted pictures on disk for a long time, and skip the conversion process next time you read them directly from disk.</p> <p>The result caching function is managed by ResultCacheDecodeInterceptor, and DiskCache is managed by the storage management.</p> <p>The default implementation of DiskCache is LruDiskCache:</p> <ul> <li>Default maximum capacity is 200 MB</li> <li>Clear old cache based on least used principle</li> </ul>"},{"location":"result_cache/#cache-directory","title":"Cache directory","text":"<p>In order to adapt to the differences between different platforms, the locations of cache directories are also different on different platforms.</p>"},{"location":"result_cache/#android","title":"Android","text":"<p>The default result cache directories on Android are obtained in the following order:</p> <ol> <li><code>/sdcard/Android/data/[APP_PACKAGE_NAME]/cache/sketch4/result</code></li> <li><code>/data/data/[APP_PACKAGE_NAME]/cache/sketch4/result</code></li> </ol> <p>[!TIP] In order to be compatible with multiple processes, when using Sketch in a non-main process, the process name will be added after the cache directory name, such as \"result:push\"</p>"},{"location":"result_cache/#ios","title":"iOS","text":"<p>The default results cache directory on iOS is:</p> <pre><code>val appCacheDirectory =\n    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, true).first() as String\nval resultCacheDir = \"$appCacheDirectory/sketch4/result\"\n</code></pre>"},{"location":"result_cache/#desktop","title":"Desktop","text":"<p>The default results cache directory on desktop platforms is:</p> <pre><code>val appName = (getComposeResourcesPath() ?: getJarPath(Sketch::class.java)).md5()\n\n// macOS\n\"/Users/[user]/Library/Caches/SketchImageLoader/${appName}/sketch4/result\"\n\n// Windows\n\"C:\\\\Users\\\\[user]\\\\AppData\\\\Local\\\\SketchImageLoader\\\\${appName}\\\\sketch4/result\\\\Cache\"\n\n// Linux\n\"/home/[user]/.cache/SketchImageLoader/${appName}/sketch4/result\"\n</code></pre>"},{"location":"result_cache/#web","title":"Web","text":"<p>The web platform does not yet support result caching</p>"},{"location":"result_cache/#customize","title":"Customize","text":"<p>You can pass resultCache() or resultCacheOptions() of Sketch.Builder when initializing Sketch Method to customize the implementation or configuration of result cache, as follows:</p> <pre><code>// Use the default LruDiskCache implementation and configure its parameters\nSketch.Builder(context).apply {\n    resultCacheOptions(\n        DiskCache.Options(\n            // Just choose one of directory and appCacheDirectory\n            directory = \"/tmp/myapp/sketch/result\",\n            // Just choose one of directory and appCacheDirectory\n            appCacheDirectory = \"/tmp/myapp\",\n            // 100 MB\n            maxSize = 1024 * 1024 * 100,\n            // The app's management version number for the result cache. \n            // If you want to clear the old result cache, upgrade this version number.\n            appVersion = 1,\n        )\n    )\n}.build()\n\n// Use your own DiskCache implementation\nclass MyDiskCache : DiskCache {\n    // ...\n}\nSketch.Builder(context).apply {\n    resultCache(MyDiskCache())\n}.build()\n</code></pre>"},{"location":"result_cache/#cache-policy","title":"Cache Policy","text":"<p>The result caching policy is used to control how to use the result caching. The default configuration is CachePolicy.ENABLED, which you can configure via the resultCachePolicy attribute of ImageRequest or ImageOptions:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Disable\n    resultCachePolicy(CachePolicy.DISABLED)\n    // Read only\n    resultCachePolicy(CachePolicy.READ_ONLY)\n    // Write Only\n    resultCachePolicy(CachePolicy.WRITE_ONLY)\n}\n</code></pre>"},{"location":"result_cache/#cache-key","title":"Cache key","text":"<p>By default, Sketch will automatically generate a result cache key based on the requested configuration, but you can also customize the result cache key with the following properties:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // Use custom result cache key\n    resultCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // Modify the automatically generated result cache key\n    resultCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n\nImageOptions {\n    // Use custom result cache key\n    resultCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // Modify the automatically generated result cache key\n    resultCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n</code></pre> <p>You can also get the final result cache key through the following methods:</p> <pre><code>// The result cache key can be obtained through RequestContext in the customized RequestInterceptor, \n// DecodeInterceptor, Transformation, Fetcher, and Decoder components.\nval requestContext: RequestContext = ...\nrequestContext.resultCacheKey\n\n// Get the result cache key from ImageResult\nval imageSuccess = sketch.execute(request) as ImageResult.Success\nimageSuccess.resultCacheKey\n</code></pre>"},{"location":"result_cache/#read-and-write-cache","title":"Read and write cache","text":"<p>You can access the result cache by obtaining the result cache instance through the <code>sketch.resultCache</code> property, but be careful to obtain the lock before accessing, so as to avoid problems under multi-threading, as follows:</p> <pre><code>scope.launch {\n    val resultCache = sketch.resultCache\n    val resultCacheKey = requestContext.resultCacheKey\n    resultCache.withLock(resultCacheKey) {\n        // get\n        openSnapshot(resultCacheKey)?.use { snapshot -&gt;\n            val dataPath: Path = snapshot.data\n            val metadataPath: Path = snapshot.metadata\n            val dataContent = fileSystem.source(dataPath).buffer().use {\n                it.readUtf8()\n            }\n            val metadataContent = fileSystem.source(metadataPath).buffer().use {\n                it.readUtf8()\n            }\n        }\n\n        // edit\n        val editor: DiskCache.Editor? = openEditor(resultCacheKey)\n        if (editor != null) {\n            try {\n                val dataPath: Path = editor.data\n                val metadataPath: Path = editor.metadata\n                fileSystem.sink(dataPath).buffer().use {\n                    it.writeUtf8(\"data\")\n                }\n                fileSystem.sink(metadataPath).buffer().use {\n                    it.writeUtf8(\"metadata\")\n                }\n                editor.commit()\n            } catch (e: Exception) {\n                editor.abort()\n            }\n        }\n\n        // remove\n        val cleared: Boolean = remove(resultCacheKey)\n    }\n\n    // Clear all\n    resultCache.clear()\n}\n</code></pre> <p>[!CAUTION] 1. openSnapshot and openEditor with the same key conflict with each other. For example,      openSnapshot is not closed before openEditor is closed. Always returns null and vice versa 2. So it must be executed inside withLock, otherwise unexpected events may occur.</p> <p>For more available methods, please refer to DiskCache</p>"},{"location":"result_cache/#clear-cache","title":"Clear cache","text":"<p>The results cache is cleared under the following circumstances:</p> <ol> <li>Actively call the <code>remove()</code> and clear()` methods of DiskCache</li> <li>Actively call the <code>abort()</code> method of DiskCache.Editor</li> <li>Automatically clear older caches when maximum capacity is reached</li> </ol>"},{"location":"save_cellular_traffic/","title":"Save cellular data","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>[!IMPORTANT] Only available on Android platform</p> <p>The cellular traffic saving function can set the depth parameter of ImageRequest to Depth.LOCAL when detecting that current cellular traffic is present, so that images will no longer be downloaded from the network.</p>"},{"location":"save_cellular_traffic/#install-component","title":"Install component","text":"<p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-core:${LAST_VERSION}\")\n</code></pre>"},{"location":"save_cellular_traffic/#configure","title":"Configure","text":"<p>First register the SaveCellularTrafficRequestInterceptor request interceptor, as follows:</p> <pre><code>// Register for all ImageRequests when customizing Sketch\nSketch.Builder(context).apply {\n    components {\n        addRequestInterceptor(SaveCellularTrafficRequestInterceptor())\n    }\n}.build()\n\n// Register for a single ImageRequest when loading an image\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addRequestInterceptor(SaveCellularTrafficRequestInterceptor())\n    }\n}\n</code></pre> <p>Then enable the cellular data saving function for a single request, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    saveCellularTraffic(true)\n}\n</code></pre> <p>Finally, configure the error status picture dedicated to the cellular traffic saving function, as follows:</p> <pre><code>// View\nImageRequest(context, \"https://example.com/image.jpg\") {\n    saveCellularTraffic(true)\n\n    error(\n        ConditionStateImage(defaultImage = R.drawable.ic_error) {\n            saveCellularTrafficError(R.drawable.ic_signal_cellular)\n        }\n    )\n}\n\n// Compose\nComposableImageRequest(context, \"https://example.com/image.jpg\") {\n    saveCellularTraffic(true)\n\n    error(\n        ComposableConditionStateImage(defaultImage = Res.drawable.ic_error) {\n            saveCellularTrafficError(Res.drawable.ic_signal_cellular)\n        }\n    )\n}\n</code></pre> <p>[!TIP] <code>saveCellularTrafficError(Res.drawable.ic_signal_cellular)</code> needs to import the <code>sketch-extensions-compose-resources</code> module</p>"},{"location":"save_cellular_traffic/#click-to-force-load","title":"Click to force load","text":"<p>[!IMPORTANT] 1. Only supports Android View 2. This feature requires the use of SketchImageView</p> <p>Enable clicking ImageView to ignore cellular data and redisplay the image</p> <pre><code>sketchImageView.setClickIgnoreSaveCellularTrafficEnabled(true)\n</code></pre>"},{"location":"sketch_image_view/","title":"SketchImageView","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch provides a SketchImageView component, which can be used with Sketch to load images more conveniently. It supports xml attributes to configure request attributes, supports flow methods to monitor the status and results of requests, and also supports functions such as displaying download progress and image type icons.</p>"},{"location":"sketch_image_view/#install-component","title":"Install component","text":"<p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre>"},{"location":"sketch_image_view/#xml-attributes","title":"XML attributes","text":"<p>SketchImageView provides a wealth of xml attributes to configure request attributes in the layout, as follows:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"&gt;\n\n    &lt;com.github.panpf.sketch.SketchImageView android:id=\"@+id/imageView\"\n        android:layout_width=\"300dp\" android:layout_height=\"300dp\"\n        android:contentDescription=\"@string/app_name\"\n        app:sketch_placeholder=\"@drawable/im_placeholder\" app:sketch_error=\"@drawable/im_error\"\n        app:sketch_fallback=\"@drawable/im_fallback\" app:sketch_crossfade=\"true\"\n        app:sketch_transformation=\"rotate\" app:sketch_transformation_rotate_degrees=\"55\" /&gt;\n&lt;/FrameLayout&gt;\n</code></pre> <p>For more supported attributes, please refer to the attrs file.</p>"},{"location":"sketch_image_view/#requeststate","title":"RequestState","text":"<p>SketchImageView provides a flow method to monitor the status and results of requests, as follows:</p> <pre><code>val sketchImageView = SketchImageView(context)\n\n// collect state\nscope.launch {\n    sketchImageView.requestState.loadState.collect {\n        when (it) {\n            is LoadState.Started -&gt; {\n                val request: ImageRequest = it.request\n            }\n            is LoadState.Success -&gt; {\n                val request: ImageRequest = it.request\n                val result: ImageResult.Success = it.result\n            }\n            is LoadState.Error -&gt; {\n                val request: ImageRequest = it.request\n                val result: ImageResult.Error = it.result\n            }\n            is LoadState.Canceled -&gt; {\n                val request: ImageRequest = it.request\n            }\n            else -&gt; {\n                // null\n            }\n        }\n    }\n}\n\n// collect result\nscope.launch {\n    sketchImageView.requestState.resultState.collect {\n        when (it) {\n            is ImageResult.Success -&gt; {\n            }\n            is ImageResult.Error -&gt; {\n            }\n            else -&gt; {\n                // null\n            }\n        }\n    }\n}\n\n// collect progress\nscope.launch {\n    sketchImageView.requestState.progressState.collect {\n        if (it != null) {\n            val totalLength: Long = it.totalLength\n            val completedLength: Long = it.completedLength\n        } else {\n            // null\n        }\n    }\n}\n</code></pre>"},{"location":"sketch_image_view/#other-functions","title":"Other Functions","text":"<p>Thanks to the implementation of the ViewAbilityContainer interface, SketchImageView also supports the following functions:</p> <ul> <li>Show download progress</li> <li>Show image type badge</li> </ul>"},{"location":"state_image/","title":"StateImage","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>StateImage is used to provide images for loading status and error status. There are several implementations:</p> <p>For View:</p> <ul> <li>DrawableStateImage: Use Drawable as status picture</li> <li>ColorDrawableStateImage: Create a ColorDrawable using colors as status picture</li> <li>IconDrawableStateImage: Use IconDrawable as status picture. It can ensure that the size of the   icon remains unchanged and is not affected by the scaling of the component. It is suitable for use   in waterfall layouts.</li> <li>IconAnimatableDrawableStateImage: Use IconAnimatableDrawable as state image. It can ensure that   the size of the icon remains unchanged and is not affected by the scaling of the component. It is   suitable for use in waterfall layouts.</li> </ul> <p>For Compose:</p> <ul> <li>PainterStateImage: Use Painter as status picture</li> <li>ColorPainterStateImage: Create a ColorPainter using colors as a status picture</li> <li>IconPainterStateImage: Use IconPainter as status image. It can ensure that the size of the icon   remains unchanged and is not affected by the scaling of the component. It is suitable for use in   waterfall layouts.</li> <li>IconAnimatablePainterStateImage: Use IconAnimatablePainter as state image. It can ensure that   the size of the icon remains unchanged and is not affected by the scaling of the component. It is   suitable for use in waterfall layouts.</li> </ul> <p>Generic:</p> <ul> <li>CurrentStateImage: Use the component's current Image as the state image</li> <li>MemoryCacheStateImage: Use the given memory cache key to obtain the Image from the memory cache   as the status image, and use crossfade to achieve a perfect transition from small to large images.</li> <li>ThumbnailMemoryCacheStateImage: A simplified version of MemoryCacheStateImage that uses the   given or currently requested uri to match the aspect ratio of the image in the memory cache to be   consistent with the original image, and the thumbnail that has not been modified by Transformation   is used as the state image. It can also be used with crossfade to achieve a perfect transition   from small images to large images.</li> <li>ConditionStateImage: Different status pictures can be used according to different conditions</li> </ul>"},{"location":"state_image/#configuration","title":"Configuration","text":"<p>StateImage is used in the placeholder(), fallback(), and error() methods of ImageRequest and ImageOptions, as follows:</p> <pre><code>// View\nImageRequest(context, \"https://example.com/image.jpg\") {\n  placeholder(R.drawable.placeholder)\n  placeholder(context.getEquitableDrawable(R.drawable.placeholder))\n  placeholder(IntColorDrawableStateImage(Color.Gray))\n  placeholder(DrawableStateImage(R.drawable.placeholder))\n  placeholder(\n    IconDrawableStateImage(\n      icon = R.drawable.placeholder,\n      background = IntColorFetcher(Color.GRAY)\n    )\n  )\n  placeholder(ConditionStateImage(defaultResId = R.drawable.error){\n    addState(condition = MyCondition, resId = R.drawable.mystate)\n  })\n\n  fallback(R.drawable.fallback)\n  fallback(context.getEquitableDrawable(R.drawable.fallback))\n  fallback(IntColorDrawableStateImage(Color.RED))\n  fallback(DrawableStateImage(R.drawable.fallback))\n  fallback(\n    IconDrawableStateImage(\n      icon = R.drawable.fallback,\n      background = IntColorFetcher(Color.RED)\n    )\n  )\n  fallback(ConditionStateImage(defaultResId = R.drawable.error) {\n    addState(condition = MyCondition, resId = R.drawable.mystate)\n  })\n\n  error(R.drawable.error)\n  error(context.getEquitableDrawable(R.drawable.error))\n  error(IntColorDrawableStateImage(Color.RED))\n  error(DrawableStateImage(R.drawable.error))\n  error(IconDrawableStateImage(icon = R.drawable.error, background = IntColorFetcher(Color.RED)))\n  error(ConditionStateImage(defaultResId = R.drawable.error) {\n    addState(condition = MyCondition, resId = R.drawable.mystate)\n  })\n}\n\n// Compose\nComposableImageRequest(\"https://example.com/image.jpg\") {\n  placeholder(Res.drawable.placeholder)\n  placeholder(rememberPainterStateImage(Res.drawable.placeholder))\n  placeholder(rememberColorPainterStateImage(Color.Gray))\n  placeholder(rememberIconPainterStateImage(Res.drawable.placeholder, background = Color.Gray))\n  placeholder(ComposableConditionStateImage(defaultImage = Res.drawable.placeholder){\n    addState(condition = MyCondition, stateImage = Res.drawable.mystate)\n  })\n\n  fallback(Res.drawable.fallback)\n  fallback(rememberPainterStateImage(Res.drawable.fallback))\n  fallback(rememberColorPainterStateImage(Color.Red))\n  fallback(rememberIconPainterStateImage(Res.drawable.fallback, background = Color.Red))\n  fallback(ComposableConditionStateImage(defaultImage = Res.drawable.fallback){\n    addState(condition = MyCondition, stateImage = Res.drawable.mystate)\n  })\n\n  error(Res.drawable.error)\n  error(rememberPainterStateImage(Res.drawable.error))\n  error(rememberColorPainterStateImage(Color.Red))\n  error(rememberIconPainterStateImage(Res.drawable.error, background = Color.Red))\n  error(ComposableConditionStateImage(defaultImage = Res.drawable.error){\n    addState(condition = MyCondition, stateImage = Res.drawable.mystate)\n  })\n}\n</code></pre> <p>[!TIP] You need to import the <code>sketch-compose-resources</code> module placeholder, fallback, and error to support the DrawableResource of compose resources.</p>"},{"location":"state_image/#customize","title":"Customize","text":"<p>You can refer to the existing implementation of StateImage</p>"},{"location":"state_image/#conditionstateimage","title":"ConditionStateImage","text":"<p>ConditionStateImage supports returning different status images according to different condition. You can implement the ConditionStateImage .Condition interface to extend the new type, and then use the custom type through ConditionStateImage .Builder.addState(), as follows:</p> <pre><code>object MyCondition : ConditionStateImage.Condition {\n\n    override fun accept(\n        request: ImageRequest,\n        throwable: Throwable?\n    ): Boolean = throwable is IOException\n}\n\n// View\nImageRequest(context, \"https://example.com/image.jpg\") {\n    error(ConditionStateImage(R.drawable.error) {\n        addState(condition = MyCondition, stateImage = DrawableStateImage(R.drawable.mystate))\n    })\n}\n\n// Compose\nComposableImageRequest(context, \"https://example.com/image.jpg\") {\n    error(ComposableConditionStateImage(Res.drawable.error) {\n        addState(condition = MyCondition, stateImage = DrawableStateImage(Res.drawable.mystate))\n    })\n}\n</code></pre>"},{"location":"state_image/#iconstateimage","title":"Icon*StateImage","text":"<p>In the waterfall flow layout, since the size of each item may be different, when all items use the same placeholder, the placeholder will appear to be larger or smaller on the page due to the scaling of the component.</p> <p>For this situation, using Icon*StateImage can perfectly solve the problem. Icon*StateImage consists of an icon and a background. The icon is not affected by component scaling. The icon always remains a fixed size, so that all placeholders on the page look the same. the size of</p>"},{"location":"state_image/#thumbnailmemorycachestateimage","title":"ThumbnailMemoryCacheStateImage","text":"<p>When jumping from the image list page to the image details page, we hope to use the thumbnail image loaded on the list page as a placeholder image when the details page loads the large image.</p> <p>In this way, in conjunction with <code>crossfade(fadeStart = false)</code>, when the large image is loaded, the page will gradually change from a blurry image to a clear image, which will have a better effect.</p> <p>ThumbnailMemoryCacheStateImage can help us find thumbnails from the memory cache very conveniently, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    placeholder(ThumbnailMemoryCacheStateImage())\n    crossfade(fadeStart = false)\n}\n</code></pre> <p>ThumbnailMemoryCacheStateImage By default, the uri of the current ImageRequest will be used to find thumbnails in the memory, but if the list page and the details page use different uri, you need to actively specify the uri of the list page, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    placeholder(ThumbnailMemoryCacheStateImage(\"https://www.sample.com/image.jpg?widht=300\"))\n    crossfade(fadeStart = false)\n}\n</code></pre> <p>[!TIP] The standard for thumbnails is images with the same aspect ratio and without any Transformation modification.</p>"},{"location":"svg/","title":"SVG","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch supports decoding SVG static images, powered by SvgDecoder</p>"},{"location":"svg/#install-component","title":"Install component","text":"<p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-svg:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] <code>sketch-svg</code> The module supports automatic registration of components. For details on component registration, please see the documentation: \u300aRegister component\u300b</p>"},{"location":"svg/#configure","title":"Configure","text":"<p>ImageRequest and ImageOptions support some svg-related configurations, as follows:</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.svg\") {\n    svgBackgroundColor(Color.WHITE)\n    svgCss(\"...\")    // Only Android\n}\n</code></pre>"},{"location":"target/","title":"Target","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>The main job of Target is to display Image. It is also responsible for providing SizeResolver, ScaleDecider, ResizeOnDrawHelper, LifecycleResolver and other properties when building ImageRequest. These properties will be used as default values.</p>"},{"location":"target/#compose","title":"Compose","text":"<p>Displaying Image to the Compose component does not require you to actively set the target, AsyncImage and AsyncImagePainter will be set, you only need to set other parameters, as follows:</p> <pre><code>AsyncIage(\n    rqeuest = ComposableImageRequest(\"https://example.com/image.jpg\") {\n        placeholder(Res.drawable.placeholder)\n        crossfade()\n    },\n    contentDescription = \"photo\",\n)\n</code></pre> <p>[!TIP] <code>placeholder(Res.drawable.placeholder)</code> needs to import the <code>sketch-compose-resources</code> module</p>"},{"location":"target/#view","title":"View","text":"<p>When displaying Image to View, you need to actively set Target</p>"},{"location":"target/#imageview","title":"ImageView","text":"<p>Sketch provides ImageViewTarget to display images to [ImageView], as follows:</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    placeholder(R.drawable.placeholder)\n    crossfade()\n    target(imageView)\n}.enqueue(request)\n</code></pre>"},{"location":"target/#remoteviews","title":"RemoteViews","text":"<p>Sketch also provides RemoteViewsTarget to display images to RemoteViews, as follows:</p> <pre><code>val remoteViews =\n    RemoteViews(context.packageName, R.layout.remote_views_notification)\n\nval notification = NotificationCompat.Builder(context, NOTIFICATION_CHANNEL_ID).apply {\n    setSmallIcon(R.mipmap.ic_launcher)\n    setContent(remoteViews)\n}.build()\n\nImageRequest(context, \"https://www.example.com/image.jpg\") {\n    resize(100.dp2px, 100.dp2px, scale = START_CROP)\n    target(\n        RemoteViewsTarget(\n            remoteViews = remoteViews,\n            imageViewId = R.id.remoteViewsNotificationImage,\n            ignoreNullDrawable = true,\n            onUpdated = {\n                val notificationManager =\n                    context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n                notificationManager.notify(1101, notification)\n            }\n        )\n    )\n}.enqueue()\n</code></pre> <p>[!TIP] 1. As shown above RemoteViewsTarget only converts the Drawable to Bitmap and calls the setImageViewBitmap method of RemoteViews to set the Bitmap 2. So you still need to refresh the notification or AppWidget in the onUpdated function to display the Bitmap on the screen.</p>"},{"location":"transformation/","title":"Transformation","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Transformation can convert the decoded Image. Sketch has the following built-in Transformation</p> <ul> <li>CircleCropTransformation: Crop the image into a circle</li> <li>RotateTransformation: Rotate the image by a specified angle</li> <li>RoundedCornersTransformation: Crop the image into a rounded rectangle</li> <li>MaskTransformation: Cover the image with a color mask, often used to darken the image when using   it as the background of a window or module.</li> <li>BlurTransformation: Blur the image</li> </ul> <p>[!TIP] 1. Transformation does not support animated graphics. Please use the animatedTransformation()      function for animated image. 2. When using RoundedCornersTransformation, please use it with 'precision(Precision.EXACTLY)',      because if the original image size is the same as When the resize size is inconsistent, the      final fillet will be scaled during display, resulting in the fillet size being inconsistent      with expectations.</p>"},{"location":"transformation/#configure","title":"Configure","text":"<p>Both ImageRequest and ImageOptions provide transformations methods for configuring Transformation</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    transformations(CircleCropTransformation(), RoundedCornersTransformation(20f))\n}\n</code></pre>"},{"location":"transformation/#customize","title":"Customize","text":"<p>When customizing Transformation, you need to pay attention to the implementation of the key attribute. Because the key attribute is used to build the cache key, you must ensure the uniqueness and certainty of the key attribute:</p> <ul> <li>The same Transformation inputs the same parameters and outputs the same key</li> <li>The same Transformation inputs different parameters and outputs different keys.</li> </ul> <p>[!TIP] For custom Transformation, do not perform recycle() on the input Image of the transform method. This will cause unpredictable errors.</p>"},{"location":"transition/","title":"Transition","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Transition is used to configure the transition method between the new picture and the old picture when it is displayed. CrossfadeTransition is provided by default to support the fade-in and fade-out effect.</p>"},{"location":"transition/#configuration","title":"Configuration","text":"<p>Both ImageRequest and ImageOptions provide the crossfade() method and transitionFactory() method for configuring Transition ,as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    crossfade()\n    // or\n    transitionFactory(CrossfadeTransition.Factory())\n}\n</code></pre>"},{"location":"transition/#customize","title":"Customize","text":"<p>Please refer to the implementation of CrossfadeTransition</p>"},{"location":"transition/#perfect-transition","title":"Perfect transition","text":"<p>CrossfadeTransition Use the maximum width and height of the placeholder image and result image as the width and height of the new image, and then change the placeholder Image and result image are scaled</p> <p>If the size of the result image and the placeholder image are inconsistent, for example, the result is larger than the placeholder, the placeholder image will be enlarged at the beginning of the transition. Although this process is fast, it is still easy to see.</p> <p>The best way to solve this problem is to keep the size of the placeholder image and the result image consistent. This effect can be easily achieved with the help of the resizeOnDraw attribute of ImageRequest and ImageOptions</p> <p>The resizeOnDraw attribute will use ResizePainter or ResizeDrawable to wrap the placeholder, error, and result images, use ImageRequest.size as the new size, and then use the ImageRequest.scale attribute to scale the image. Learn about resizeOnDraw</p> <p>Therefore, it is usually recommended to use CrossfadeTransition and resizeOnDraw together, as follows:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    placeholder(R.drawable.im_placeholder)\n    crossfade()\n    resizeOnDraw()\n}\n</code></pre>"},{"location":"video_frame/","title":"Video Frame","text":"<p>Translations: \u7b80\u4f53\u4e2d\u6587</p> <p>Sketch provides the <code>sketch-video-*</code> series of modules to support decoding video frames</p> Module DecoderProvider Decoder Android iOS Desktop Web sketch-video VideoFrameDecoderProvider VideoFrameDecoder \u2705(API 27) \u274c \u274c \u274c sketch-video-ffmpeg FFmpegVideoFrameDecoderProvider FFmpegVideoFrameDecoder \u2705 \u274c \u274c \u274c <ul> <li>VideoFrameDecoder:<ul> <li>Decode video frames using Android's built-in MediaMetadataRetriever class</li> <li>It is recommended to use Android 8.1 and above, because versions 8.0 and below do not support   reading frame thumbnails, which will consume a lot of memory when decoding larger videos such   as 4k.</li> </ul> </li> <li>FFmpegVideoFrameDecoder:<ul> <li>Decode video frames using the FFmpegMediaMetadataRetriever class of   the wseemann/FFmpegMediaMetadataRetriever-project   library</li> <li>Library size is approximately 23 MB</li> </ul> </li> </ul>"},{"location":"video_frame/#install-component","title":"Install component","text":"<p><code>${LAST_VERSION}</code>:  (Not included 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-video:${LAST_VERSION}\")\n// or\nimplementation(\"io.github.panpf.sketch4:sketch-video-ffmpeg:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] The above components all support automatic registration. You only need to import them without additional configuration. If you need to register manually, please read the documentation: \u300aRegister component\u300b</p>"},{"location":"video_frame/#configuration","title":"Configuration","text":"<p>ImageRequest and ImageOptions support some video frame-related configurations, as follows:</p> <pre><code>ImageRequest(context, \"file:///sdcard/sample.mp4\") {\n    // Extract the frame at 1000000 microseconds\n    videoFrameMicros(1000000)\n\n    // or extract the frame at 10000 ms\n    videoFrameMillis(10000)\n\n    // or get the frames in between\n    videoFramePercentDuration(0.5f)\n\n    // Set the processing strategy when frames cannot be extracted at the specified time\n    videoFrameOption(MediaMetadataRetriever.OPTION_CLOSEST)\n}\n</code></pre>"},{"location":"zh/","title":"Sketch Image Loader","text":"<p> []license_link []version_link </p> <p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u662f\u4e13\u4e3a Compose Multiplatform \u548c Android View \u8bbe\u8ba1\u7684\u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u5b83\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a</p> <ul> <li><code>\u591a\u52a0\u8f7d\u6e90</code>\uff1a\u652f\u6301\u4ece http\u3001file\u3001compose resource\u3001android asset/content/resource \u7b49\u591a\u79cd\u6765\u6e90\u52a0\u8f7d\u56fe\u7247</li> <li><code>\u529f\u80fd\u5f3a\u5927</code>\uff1a\u652f\u6301\u4e09\u7ea7\u7f13\u5b58\u3001\u81ea\u52a8\u53d6\u6d88\u8bf7\u6c42\u3001\u81ea\u52a8\u8c03\u6574\u56fe\u7247\u5c3a\u5bf8\u3001\u81ea\u52a8\u6839\u636e Exif Orientation \u65cb\u8f6c\u56fe\u7247\u7b49</li> <li><code>\u529f\u80fd\u4e30\u5bcc</code>\uff1a\u652f\u6301\u52a8\u56fe\u3001SVG \u56fe\u7247\u3001Base64 \u56fe\u7247\u3001\u89c6\u9891\u5e27</li> <li><code>\u6613\u4e8e\u6269\u5c55</code>\uff1a\u652f\u6301\u5bf9\u7f13\u5b58\u3001\u89e3\u7801\u3001\u8f6c\u6362\u3001\u8fc7\u6e21\u3001\u5360\u4f4d\u56fe\u7b49\u5404\u4e2a\u73af\u8282\u7684\u6269\u5c55</li> <li><code>\u6269\u5c55\u529f\u80fd</code>\uff1a\u63d0\u4f9b\u8702\u7a9d\u6d41\u91cf\u65f6\u6682\u505c\u4e0b\u8f7d\u3001\u5217\u8868\u6eda\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u3001\u56fe\u7247\u7c7b\u578b\u5fbd\u7ae0\u3001\u4e0b\u8f7d\u8fdb\u5ea6\u6307\u793a\u5668\u7b49\u5b9e\u7528\u6269\u5c55</li> <li><code>\u73b0\u4ee3\u5316</code>\uff1a\u5b8c\u5168\u57fa\u4e8e Kotlin \u548c Kotlin \u534f\u7a0b\u8bbe\u8ba1</li> </ul>"},{"location":"zh/#app","title":"\u793a\u4f8b App","text":"<ul> <li>Android\u3001iOS\u3001\u684c\u9762\u7248\u3001Web \u53ef\u90e8\u7f72\u5305\u8bf7\u5230 Releases \u9875\u9762\u4e0b\u8f7d\u6700\u65b0\u7248\u672c</li> <li>Web \u793a\u4f8b\uff1ahttps://panpf.github.io/sketch/app</li> </ul>"},{"location":"zh/#_1","title":"\u5b89\u88c5","text":"<p><code>\u5df2\u53d1\u5e03\u5230 mavenCentral</code></p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p>"},{"location":"zh/#compose-multiplatform","title":"Compose Multiplatform:","text":"<p>\u5bfc\u5165\u5fc5\u9700\u7684 Compose \u548c\u7f51\u7edc\u6a21\u5757\uff1a</p> <pre><code>// \u63d0\u4f9b\u4e86 Sketch \u7684\u6838\u5fc3\u529f\u80fd\u4ee5\u53ca\u5355\u4f8b\u548c\u4f9d\u8d56\u5355\u4f8b\u5b9e\u73b0\u7684\u6269\u5c55\u51fd\u6570\nimplementation(\"io.github.panpf.sketch4:sketch-compose:${LAST_VERSION}\")\n\n// \u63d0\u4f9b\u4e86\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\u7684\u80fd\u529b\nimplementation(\"io.github.panpf.sketch4:sketch-http:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] \u4e3a\u63d0\u5347 compose \u7684\u6027\u80fd\u8bf7\u62f7\u8d1d <code>sketch-core</code> \u6a21\u5757\u4e0b\u7684 compose_compiler_config.conf \u6587\u4ef6\u5230\u60a8\u7684\u9879\u76ee\u4e2d\uff0c\u7136\u540e\u6309\u7167  Compose Stability Configuration \u6587\u6863\u914d\u7f6e\u5b83</p>"},{"location":"zh/#android-view","title":"Android View:","text":"<p>\u5bfc\u5165\u5fc5\u9700\u7684 View \u548c\u7f51\u7edc\u6a21\u5757\uff1a</p> <pre><code>// \u63d0\u4f9b\u4e86 Sketch \u7684\u6838\u5fc3\u529f\u80fd\u4ee5\u53ca\u5355\u4f8b\u548c\u4f9d\u8d56\u5355\u4f8b\u5b9e\u73b0\u7684\u6269\u5c55\u51fd\u6570\nimplementation(\"io.github.panpf.sketch4:sketch-view:${LAST_VERSION}\")\n\n// \u63d0\u4f9b\u4e86\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\u7684\u80fd\u529b\nimplementation(\"io.github.panpf.sketch4:sketch-http:${LAST_VERSION}\")\n</code></pre>"},{"location":"zh/#_2","title":"\u53ef\u9009\u6a21\u5757","text":"<pre><code>// \u4f7f\u7528 Android \u6216 Skia \u5185\u7f6e\u7684\u89e3\u7801\u5668\u89e3\u7801 gif \u52a8\u56fe\u5e76\u64ad\u653e\nimplementation(\"io.github.panpf.sketch4:sketch-animated-gif:${LAST_VERSION}\")\n\n// [\u4ec5 Android] \u4f7f\u7528 android-gif-drawable \u5e93\u7684 GifDrawable \u89e3\u7801 gif \u52a8\u56fe\u5e76\u64ad\u653e\nimplementation(\"io.github.panpf.sketch4:sketch-animated-gif-koral:${LAST_VERSION}\")\n\n// [\u4ec5 Android] Android \u6216 Skia \u5185\u7f6e\u7684\u89e3\u7801\u5668\u89e3\u7801 heif \u52a8\u56fe\u5e76\u64ad\u653e\nimplementation(\"io.github.panpf.sketch4:sketch-animated-heif:${LAST_VERSION}\")\n\n// \u4f7f\u7528 Android \u6216 Skia \u5185\u7f6e\u7684\u89e3\u7801\u5668\u89e3\u7801 webp \u52a8\u56fe\u5e76\u64ad\u653e\nimplementation(\"io.github.panpf.sketch4:sketch-animated-webp:${LAST_VERSION}\")\n\n// \u652f\u6301 BlurHash \u683c\u5f0f\u56fe\u7247\nimplementation(\"io.github.panpf.sketch4:sketch-blurhash:${LAST_VERSION}\")\n\n// \u652f\u6301\u901a\u8fc7 uri \u6216 placeholder\u3001fallback\u3001error \u8bbf\u95ee compose resources \u8d44\u6e90\nimplementation(\"io.github.panpf.sketch4:sketch-compose-resources:${LAST_VERSION}\")\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-compose-resources:${LAST_VERSION}\")\n\n// \u63d0\u4f9b\u4e0b\u8f7d\u8fdb\u5ea6\u3001\u56fe\u7247\u7c7b\u578b\u89d2\u6807\u3001\u5217\u8868\u6eda\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u3001\u8282\u7701\u8702\u7a9d\u6d41\u91cf\u7b49\u5b9e\u7528\u529f\u80fd\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n\n// [\u4ec5 Android] \u652f\u6301\u901a\u8fc7\u6587\u4ef6\u8def\u5f84\u52a0\u8f7d apk \u6587\u4ef6\u7684\u56fe\u6807 \nimplementation(\"io.github.panpf.sketch4:sketch-extensions-apkicon:${LAST_VERSION}\")\n\n// [\u4ec5 Android] \u652f\u6301\u901a\u8fc7\u5305\u540d\u548c\u7248\u672c\u53f7\u52a0\u8f7d\u5df2\u5b89\u88c5 app \u7684\u56fe\u6807\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-appicon:${LAST_VERSION}\")\n\n// [\u4ec5 JVM] \u652f\u6301\u4f7f\u7528 HttpURLConnection \u8bbf\u95ee\u7f51\u7edc\u56fe\u7247\nimplementation(\"io.github.panpf.sketch4:sketch-http-hurl:${LAST_VERSION}\")\n\n// [\u4ec5 JVM] \u652f\u6301\u4f7f\u7528 OkHttp \u8bbf\u95ee\u7f51\u7edc\u56fe\u7247\nimplementation(\"io.github.panpf.sketch4:sketch-http-okhttp:${LAST_VERSION}\")\n\n// \u652f\u6301\u4f7f\u7528 2.x \u7248\u672c\u7684 ktor \u8bbf\u95ee\u7f51\u7edc\u56fe\u7247\nimplementation(\"io.github.panpf.sketch4:sketch-http-ktor2:${LAST_VERSION}\")\n\n// \u652f\u6301\u4f7f\u7528 3.x \u7248\u672c\u7684 ktor \u8bbf\u95ee\u7f51\u7edc\u56fe\u7247\nimplementation(\"io.github.panpf.sketch4:sketch-http-ktor3:${LAST_VERSION}\")\n\n// \u63d0\u4f9b koin \u96c6\u6210\u652f\u6301\uff0c\u4ee3\u66ff sketch-compose \u548c sketch-view\uff0c\u9ed8\u8ba4\u4ece koin \u83b7\u53d6 Sketch \u5b9e\u4f8b\nimplementation(\"io.github.panpf.sketch4:sketch-compose-koin:${LAST_VERSION}\")\nimplementation(\"io.github.panpf.sketch4:sketch-view-koin:${LAST_VERSION}\")\n\n// \u652f\u6301 SVG \u56fe\u7247\nimplementation(\"io.github.panpf.sketch4:sketch-svg:${LAST_VERSION}\")\n\n// [\u4ec5 Android] \u4f7f\u7528 Android \u5185\u7f6e\u7684 MediaMetadataRetriever \u7c7b\u5b9e\u73b0\u89e3\u7801\u89c6\u9891\u5e27\nimplementation(\"io.github.panpf.sketch4:sketch-video:${LAST_VERSION}\")\n\n// [\u4ec5 Android] \u4f7f\u7528 wseemann \u7684 FFmpegMediaMetadataRetriever \u5e93\u5b9e\u73b0\u89e3\u7801\u89c6\u9891\u5e27\nimplementation(\"io.github.panpf.sketch4:sketch-video-ffmpeg:${LAST_VERSION}\")\n</code></pre> <p>[!TIP] * <code>sketch-compose</code>\u3001<code>sketch-view</code> \u6a21\u5757\u90fd\u4f9d\u8d56 <code>sketch-singleton</code>     &gt; \u6a21\u5757\u63d0\u4f9b\u7684\u5355\u4f8b\uff0c\u5982\u679c\u4f60\u4e0d\u9700\u8981\u5355\u4f8b\u5219\u53ef\u4ee5\u76f4\u63a5\u4f9d\u8d56\u4ed6\u4eec\u7684 <code>*-core</code> \u7248\u672c * <code>sketch-http</code> \u6a21\u5757\u5728 jvm \u5e73\u53f0\u4e0a\u4f9d\u8d56 <code>sketch-http-hurl</code>\uff0c\u5728\u975e jvm \u5e73\u53f0\u4e0a\u4f9d\u8d56 <code>sketch-http-ktor3</code></p>"},{"location":"zh/#_3","title":"\u6ce8\u518c\u7ec4\u4ef6","text":"<p>Sketch \u652f\u6301\u81ea\u52a8\u53d1\u73b0\u5e76\u6ce8\u518c Fetcher \u548c Decoder \u7ec4\u4ef6\uff0c\u5728 jvm \u5e73\u53f0\u901a\u8fc7 ServiceLoader \u5b9e\u73b0\uff0c\u5728\u975e jvm \u5e73\u53f0\u901a\u8fc7 @EagerInitialization \u6ce8\u89e3\u5b9e\u73b0\u3002</p> <p>\u81ea\u5e26\u6a21\u5757\u5168\u90e8\u652f\u6301\u81ea\u52a8\u6ce8\u518c\uff0c\u5982\u679c\u4f60\u60f3\u7981\u7528\u81ea\u52a8\u6ce8\u518c\uff0c\u91c7\u7528\u624b\u52a8\u6ce8\u518c\u7684\u65b9\u5f0f\u8bf7\u53c2\u8003\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/#r8-proguard","title":"R8 / Proguard","text":"<ol> <li>Android\u3001iOS\u3001Web \u7b49\u5e73\u53f0\u4e0d\u9700\u8981\u914d\u7f6e\u4efb\u4f55\u6df7\u6dc6\u89c4\u5219</li> <li>\u684c\u9762\u5e73\u53f0\u9700\u8981\u914d\u7f6e\u4ee5\u4e0b\u6df7\u6dc6\u89c4\u5219\uff1a     <pre><code># -------------------------- Sketch Privider ---------------------------- #\n-keep class * implements com.github.panpf.sketch.util.DecoderProvider { *; }\n-keep class * implements com.github.panpf.sketch.util.FetcherProvider { *; }\n</code></pre></li> <li>\u53ef\u80fd\u8fd8\u9700\u8981\u4e3a\u95f4\u63a5\u4f9d\u8d56\u7684 Kotlin Coroutines, OkHttp, Okio \u7b49\u4e09\u65b9\u5e93\u6dfb\u52a0\u6df7\u6dc6\u914d\u7f6e</li> </ol>"},{"location":"zh/#_4","title":"\u5feb\u901f\u4e0a\u624b","text":""},{"location":"zh/#compose-multiplatform_1","title":"Compose Multiplatform\uff1a","text":"<pre><code>// val imageUri = \"/Users/my/Downloads/image.jpg\"\n// val imageUri = file:///compose_resource/composeResources/com.github.panpf.sketch.sample.resources/files/sample.png\nval imageUri = \"https://www.sample.com/image.jpg\"\n\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    uri = imageUri,\n    state = rememberAsyncImageState(ComposableImageOptions {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    }),\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    rqeuest = ComposableImageRequest(imageUri) {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    },\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(\n        request = ComposableImageRequest(imageUri) {\n            placeholder(Res.drawable.placeholder)\n            error(Res.drawable.error)\n            crossfade()\n            // There is a lot more...\n        }\n    ),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] <code>placeholder(Res.drawable.placeholder)</code> \u9700\u8981\u5bfc\u5165 <code>sketch-compose-resources</code> \u6a21\u5757</p>"},{"location":"zh/#android-view_1","title":"Android View\uff1a","text":"<pre><code>// val imageUri = \"/sdcard/download/image.jpg\"\n// val imageUri = \"file:///android_asset/image.jpg\"\n// val imageUri = \"content://media/external/images/media/88484\"\nval imageUri = \"https://www.sample.com/image.jpg\"\n\nimageView.loadImage(imageUri)\n\nimageView.loadImage(imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    // There is a lot more...\n}\n\nval request = ImageRequest(context, imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    target(imageView)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n</code></pre>"},{"location":"zh/#_5","title":"\u6587\u6863","text":"<p>\u57fa\u7840\u529f\u80fd\uff1a</p> <ul> <li>\u5f00\u59cb\u4f7f\u7528</li> <li>\u6ce8\u518c\u7ec4\u4ef6</li> <li>Compose</li> <li>Http\uff1a\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247</li> <li>AnimatedImage\uff1aGIF\u3001WEBP\u3001HEIF</li> <li>Resize\uff1a\u4fee\u6539\u56fe\u7247\u5c3a\u5bf8</li> <li>Transformation\uff1a\u8f6c\u6362\u56fe\u7247</li> <li>Transition\uff1a\u7528\u70ab\u9177\u7684\u8fc7\u6e21\u65b9\u5f0f\u663e\u793a\u56fe\u7247</li> <li>StateImage\uff1a\u5360\u4f4d\u56fe\u548c\u9519\u8bef\u56fe</li> <li>Listener\uff1a\u76d1\u542c\u8bf7\u6c42\u72b6\u6001\u548c\u4e0b\u8f7d\u8fdb\u5ea6</li> <li>DownloadCache\uff1a\u4e86\u89e3\u4e0b\u8f7d\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u4e0b\u8f7d</li> <li>ResultCache\uff1a\u4e86\u89e3\u7ed3\u679c\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u8f6c\u6362</li> <li>MemoryCache\uff1a\u4e86\u89e3\u5185\u5b58\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u52a0\u8f7d</li> <li>Fetcher\uff1a\u4e86\u89e3 Fetcher \u53ca\u6269\u5c55\u65b0\u7684 URI \u7c7b\u578b</li> <li>Decoder\uff1a\u4e86\u89e3 Sketch \u7684\u89e3\u7801\u8fc7\u7a0b</li> <li>Target\uff1a\u5c06\u52a0\u8f7d\u7ed3\u679c\u5e94\u7528\u5230\u76ee\u6807\u4e0a</li> <li>SVG\uff1a\u89e3\u7801 SVG \u9759\u6001\u56fe\u7247</li> <li>VideoFrames\uff1a\u89e3\u7801\u89c6\u9891\u5e27</li> <li>BlurHash</li> <li>ExifOrientation\uff1a\u7ea0\u6b63\u56fe\u7247\u65b9\u5411</li> <li>ImageOptions\uff1a\u7edf\u4e00\u7ba1\u7406\u56fe\u7247\u914d\u7f6e</li> <li>RequestInterceptor\uff1a\u62e6\u622a ImageRequest</li> <li>DecodeInterceptor\uff1a\u62e6\u622a\u89e3\u7801\u8fc7\u7a0b</li> <li>\u9884\u52a0\u8f7d\u56fe\u7247\u5230\u5185\u5b58\u4e2d</li> <li>\u4e0b\u8f7d\u56fe\u7247</li> <li>Lifecycle</li> <li>\u65e5\u5fd7</li> <li>\u8fc1\u79fb</li> </ul> <p>\u7279\u8272\u529f\u80fd\uff1a</p> <ul> <li>SketchImageView\uff1a\u901a\u8fc7 XML \u5c5e\u6027\u914d\u7f6e\u8bf7\u6c42</li> <li>\u63d0\u9ad8\u957f\u56fe\u5728\u7f51\u683c\u5217\u8868\u4e2d\u7684\u6e05\u6670\u5ea6</li> <li>\u663e\u793a\u4e0b\u8f7d\u8fdb\u5ea6</li> <li>\u663e\u793a\u56fe\u7247\u7c7b\u578b\u89d2\u6807</li> <li>\u8702\u7a9d\u6570\u636e\u7f51\u7edc\u4e0b\u6682\u505c\u4e0b\u8f7d\u56fe\u7247\u8282\u7701\u6d41\u91cf</li> <li>\u5217\u8868\u6ed1\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u56fe\u7247</li> <li>\u663e\u793a APK \u6587\u4ef6\u6216\u5df2\u5b89\u88c5 APP \u7684\u56fe\u6807</li> </ul>"},{"location":"zh/#_6","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u8bf7\u67e5\u770b CHANGELOG.md \u6587\u4ef6</p>"},{"location":"zh/#_7","title":"\u6d4b\u8bd5\u5e73\u53f0","text":"<ul> <li>Android: Emulator; Arm64; API 21-34</li> <li>Desktop: macOS; 14.6.1; JDK 17</li> <li>iOS: iphone 16 simulator; iOS 18.1</li> <li>Web: Chrome; 130</li> </ul>"},{"location":"zh/#app_1","title":"\u8fd0\u884c\u793a\u4f8b App","text":"<p>\u51c6\u5907\u73af\u5883\uff1a</p> <ol> <li>Android Studio: Norwhal+ (2025.1.1+)</li> <li>JDK: 17+</li> <li>\u4f7f\u7528 kdoctor \u68c0\u67e5\u8fd0\u884c\u73af\u5883\uff0c\u5e76\u6309\u7167\u63d0\u793a\u5b89\u88c5\u9700\u8981\u7684\u8f6f\u4ef6</li> <li>Android Studio \u5b89\u88c5 <code>Kotlin Multiplatform</code> \u63d2\u4ef6</li> </ol> <p>\u8fd0\u884c\u793a\u4f8b App\uff1a</p> <ol> <li>\u514b\u9686\u9879\u76ee\u5e76\u4f7f\u7528 Android Studio \u6253\u5f00</li> <li>\u540c\u6b65\u5b8c\u6210\u540e <code>Kotlin Multiplatform</code> \u63d2\u4ef6\u4f1a\u81ea\u52a8\u4e3a\u5404\u4e2a\u5e73\u53f0\u521b\u5efa\u8fd0\u884c\u914d\u7f6e</li> <li>\u9009\u62e9\u5bf9\u5e94\u5e73\u53f0\u7684\u8fd0\u884c\u914d\u7f6e\uff0c\u7136\u540e\u70b9\u51fb\u8fd0\u884c\u5373\u53ef</li> </ol>"},{"location":"zh/#40","title":"\u5173\u4e8e 4.0 \u7248\u672c","text":"<ul> <li>maven groupId \u5347\u7ea7\u4e3a <code>io.github.panpf.sketch4</code>\uff0c\u56e0\u6b64 2.*\u30013.* \u7248\u672c\u4e0d\u4f1a\u63d0\u793a\u5347\u7ea7</li> <li>4.0 \u7248\u672c\u4e13\u4e3a Compose Multiplatform \u6253\u9020\uff0c\u6240\u4ee5 API \u6709\u5f88\u591a\u7834\u574f\u6027\u6539\u52a8\uff0c\u8bf7\u8c28\u614e\u5347\u7ea7</li> <li>4.0 \u7248\u672c\u505a\u4e86\u5927\u91cf\u7684\u7b80\u5316\uff0c\u6bd4 3.0 \u7248\u672c\u7b80\u5355\u5f88\u591a\uff0c\u8be6\u60c5\u8bf7\u67e5\u770b\u66f4\u65b0\u65e5\u5fd7</li> <li>Android \u6700\u4f4e API \u5347\u5230\u4e86 API 21</li> <li>Kotlin \u7248\u672c\u5347\u7ea7\u5230\u4e86 2.0.0</li> </ul>"},{"location":"zh/#_8","title":"\u7279\u522b\u611f\u8c22","text":"<ul> <li>coil-kt/coil: Sketch \u4f7f\u7528\u4e86\u6765\u81ea Coil \u7684\u90e8\u5206\u4ee3\u7801\uff0c\u5305\u62ec framework\u3001compose \u4ee5\u53ca   sketch-animated \u7684 movie \u90e8\u5206</li> <li>koral--/android-gif-drawable: https://github.com/panpf/sketch/blob/main/sketch-animated-koralgif</li> <li>wseemann/FFmpegMediaMetadataRetriever: https://github.com/panpf/sketch/blob/main/sketch-video-ffmpeg</li> <li>BigBadaboom/androidsvg: https://github.com/panpf/sketch/blob/main/sketch-svg</li> </ul>"},{"location":"zh/#_9","title":"\u6211\u7684\u9879\u76ee","text":"<p>\u4ee5\u4e0b\u662f\u6211\u7684\u5176\u5b83\u5f00\u6e90\u9879\u76ee\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\uff1a</p> <ul> <li>zoomimage\uff1a\u7528\u4e8e\u7f29\u653e\u56fe\u7247\u7684\u5e93\uff0c\u652f\u6301 Compose Multiplatform \u548c   Android   View\uff1b\u652f\u6301\u53cc\u51fb\u7f29\u653e\u3001\u5355\u6307\u6216\u53cc\u6307\u624b\u52bf\u7f29\u653e\u3001\u5355\u6307\u62d6\u52a8\u3001\u60ef\u6027\u6ed1\u52a8\u3001\u5b9a\u4f4d\u3001\u65cb\u8f6c\u3001\u8d85\u5927\u56fe\u5b50\u91c7\u6837\u7b49\u529f\u80fd\u3002</li> <li>assembly-adapter\uff1aAndroid \u4e0a\u7684\u4e00\u4e2a\u4e3a\u5404\u79cd Adapter \u63d0\u4f9b\u591a\u7c7b\u578b   Item \u5b9e\u73b0\u7684\u5e93\u3002\u8fd8\u987a\u5e26\u4e3a RecyclerView \u63d0\u4f9b\u4e86\u6700\u5f3a\u5927\u7684 divider\u3002</li> <li>sticky-item-decoration\uff1aRecyclerView \u9ecf\u6027 item \u5b9e\u73b0</li> </ul>"},{"location":"zh/#license","title":"License","text":"<p>Apache 2.0. \u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 LICENSE \u6587\u4ef6.</p>"},{"location":"zh/CHANGELOG/","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!CAUTION] 1. 4.x \u7248\u672c\u4e3a\u517c\u5bb9 Compose Multiplatform \u800c\u8fdb\u884c\u4e86\u5927\u91cf\u7834\u574f\u6027\u91cd\u6784\u548c\u7b80\u5316\uff0c\u4e0d\u517c\u5bb9 3.x \u7248\u672c 2. maven groupId \u5347\u7ea7\u4e3a <code>io.github.panpf.sketch4</code>\uff0c\u56e0\u6b64 2.*\u30013.* \u7248\u672c\u4e0d\u4f1a\u63d0\u793a\u5347\u7ea7 3. \u53c2\u8003 \u300a\u8fc1\u79fb\u6587\u6863\u300b \u4ece 3.x \u7248\u672c\u8fc1\u79fb 4.x \u7248\u672c</p>"},{"location":"zh/CHANGELOG/#440-alpha01","title":"4.4.0-alpha01","text":"<ul> <li>improve: DecodeConfig \u73b0\u5728\u53ef\u4ee5\u4ece common \u6a21\u5757\u8bbf\u95ee</li> <li>new: \u65b0\u589e 'sketch-blurhash' \u6a21\u5757\u4ee5\u652f\u6301   BlurHash\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003\u6587\u6863 BlurHash\u3002#261</li> </ul>"},{"location":"zh/CHANGELOG/#431","title":"4.3.1","text":"<ul> <li>fix: \u4fee\u590d\u4ece 4.3.0 \u7248\u672c\u5f00\u59cb ThumbnailMemoryCacheStateImage \u5728\u9047\u5230\u7f13\u5b58 key \u548c uri \u76f8\u540c\u6216\u8005\u5c3a\u5bf8\u76f8\u540c\u7684\u60c5\u51b5\u65f6\u8fd4\u56de   null \u7684 bug\u3002#263</li> </ul>"},{"location":"zh/CHANGELOG/#430","title":"4.3.0","text":"<ul> <li>fix: \u4fee\u590d ThumbnailMemoryCacheStateImage \u5728\u9047\u5230\u6ca1\u6709 ImageInfo \u7684\u5185\u5b58\u7f13\u5b58\u65f6\u5bfc\u81f4 App \u5d29\u6e83\u6216\u56fe\u7247\u52a0\u8f7d\u5931\u8d25\u7684   bug\u3002 #259</li> <li>fix: \u4fee\u590d MemoryCacheRequestInterceptor \u5728\u9047\u5230\u6ca1\u6709 ImageInfo \u7684\u7f13\u5b58\u65f6\u56fe\u7247\u52a0\u8f7d\u5931\u8d25\u7684   bug\u3002 #260</li> <li>break: 'sketch-compose-koin', 'sketch-view-koin', 'sketch-koin' \u6a21\u5757\u7684\u6587\u4ef6\u540d\u4ece Singleton \u6539\u4e3a   Koin\uff0c\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027\u88ab\u7834\u574f\uff0c\u4f9d\u8d56\u4e8e\u6b64\u7684\u5e93\u53ef\u80fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1</li> <li>new: MemoryCache \u65b0\u589e entries() \u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u6240\u6709\u7f13\u5b58\u6761\u76ee</li> <li>improve: \u6539\u8fdb ThumbnailMemoryCacheStateImage \u7684\u6027\u80fd\uff0c\u73b0\u5728\u9ed8\u8ba4\u904d\u5386\u6240\u6709\u7684\u5185\u5b58\u7f13\u5b58\u5e76\u4e14\u6539\u8fdb\u7f29\u7565\u56fe\u7684\u5224\u65ad\u7cbe\u5ea6</li> </ul>"},{"location":"zh/CHANGELOG/#420","title":"4.2.0","text":"<p>[!NOTE] \u548c 4.2.0-beta02 \u7248\u672c\u76f8\u6bd4\u6ca1\u6709\u4efb\u4f55\u6539\u53d8`</p> <ul> <li>fix: \u4fee\u590d\u4f7f\u7528 sketch-http-ktor3 \u548c sketch-http-ktor2 \u65f6\u4e0d\u66f4\u65b0\u4e0b\u8f7d\u8fdb\u5ea6\u7684   bug\u3002 #253</li> <li>fix: \u4fee\u590d AsyncImageState \u56e0\u53d1\u8d77\u65b0\u8bf7\u6c42\u800c\u53d6\u6d88\u65e7\u8bf7\u6c42\u540e\uff0c\u4ecd\u7136\u53ef\u4ee5\u6536\u5230\u65e7\u8bf7\u6c42\u7684\u53d6\u6d88\u72b6\u6001\u7684 bug</li> <li>change: \u5f03\u7528\u5e26\u6709 keepContentNoneStartOnDraw \u53c2\u6570\u7684 AsyncImage</li> <li>change: \u5f03\u7528 TransitionTarget \u7684 fitScale \u5c5e\u6027\uff0c\u65b0\u589e ViewTarget.scaleType \u548c   ComposeTarget.contentsScale \u4ee5\u53ca ComposeTarget.alignment \u4ee3\u66ff fitScale</li> <li>change: AnimatedImage \u73b0\u5728\u662f\u63a5\u53e3\uff0c\u5b83\u7684\u5b9e\u73b0\u7c7b\u662f SkiaAnimatedImage</li> <li>improve: \u7cbe\u7b80\u8bf7\u6c42\u65e5\u5fd7\uff0c\u53bb\u6389\u548c\u52a0\u8f7d\u65e0\u5173\u7684\u4fe1\u606f</li> <li>new: CrossfadePainter \u73b0\u5728\u652f\u6301 contentScale \u548c alignment</li> <li>new: ResizePainter \u73b0\u5728\u652f\u6301 contentScale \u548c alignment</li> <li>new: CrossfadeDrawable \u73b0\u5728\u652f\u6301 scaleType</li> <li>new: ResizeDrawable \u73b0\u5728\u652f\u6301 scaleType</li> <li>new: \u65b0\u589e <code>sketch-compose-koin</code> \u548c <code>sketch-view-koin</code> \u6a21\u5757\uff0c\u63d0\u4f9b Koin   \u4f9d\u8d56\u6ce8\u5165\u652f\u6301\u3002 #256</li> <li>new: \u65b0\u589e <code>Sketch(PlatformContext, (Sketch.Builder.() -&gt; Unit)? = null)</code> \u51fd\u6570\u548c   <code>Sketch.Builder.logger(Logger)</code> \u51fd\u6570</li> <li>new: ImageRequest\u3001ImageOptions \u548c ImageResult.Success \u65b0\u589e downloadCacheKey,   downloadCacheKeyMapper, resultCacheKey,   resultCacheKeyMapper, memoryCacheKey, memoryCacheKeyMapper   \u5c5e\u6027\u3002 #255</li> </ul>"},{"location":"zh/CHANGELOG/#420-beta02","title":"4.2.0-beta02","text":"<ul> <li>new: \u65b0\u589e <code>sketch-compose-koin</code> \u548c <code>sketch-view-koin</code> \u6a21\u5757\uff0c\u63d0\u4f9b Koin   \u4f9d\u8d56\u6ce8\u5165\u652f\u6301\u3002 #256</li> <li>new: \u65b0\u589e <code>Sketch(PlatformContext, (Sketch.Builder.() -&gt; Unit)? = null)</code> \u51fd\u6570\u548c   <code>Sketch.Builder.logger(Logger)</code> \u51fd\u6570</li> <li>new: ImageRequest\u3001ImageOptions \u548c ImageResult.Success \u65b0\u589e downloadCacheKey,   downloadCacheKeyMapper, resultCacheKey,   resultCacheKeyMapper, memoryCacheKey, memoryCacheKeyMapper   \u5c5e\u6027\u3002 #255</li> </ul>"},{"location":"zh/CHANGELOG/#420-beta01","title":"4.2.0-beta01","text":"<ul> <li>fix: \u4fee\u590d\u4f7f\u7528 sketch-http-ktor3 \u548c sketch-http-ktor2 \u65f6\u4e0d\u66f4\u65b0\u4e0b\u8f7d\u8fdb\u5ea6\u7684   bug\u3002 #253</li> <li>fix: \u4fee\u590d AsyncImageState \u56e0\u53d1\u8d77\u65b0\u8bf7\u6c42\u800c\u53d6\u6d88\u65e7\u8bf7\u6c42\u540e\uff0c\u4ecd\u7136\u53ef\u4ee5\u6536\u5230\u65e7\u8bf7\u6c42\u7684\u53d6\u6d88\u72b6\u6001\u7684 bug</li> <li>change: \u5f03\u7528\u5e26\u6709 keepContentNoneStartOnDraw \u53c2\u6570\u7684 AsyncImage</li> <li>change: \u5f03\u7528 TransitionTarget \u7684 fitScale \u5c5e\u6027\uff0c\u65b0\u589e ViewTarget.scaleType \u548c   ComposeTarget.contentsScale \u4ee5\u53ca ComposeTarget.alignment \u4ee3\u66ff fitScale</li> <li>change: AnimatedImage \u73b0\u5728\u662f\u63a5\u53e3\uff0c\u5b83\u7684\u5b9e\u73b0\u7c7b\u662f SkiaAnimatedImage</li> <li>improve: \u7cbe\u7b80\u8bf7\u6c42\u65e5\u5fd7\uff0c\u53bb\u6389\u548c\u52a0\u8f7d\u65e0\u5173\u7684\u4fe1\u606f</li> <li>new: CrossfadePainter \u73b0\u5728\u652f\u6301 contentScale \u548c alignment</li> <li>new: ResizePainter \u73b0\u5728\u652f\u6301 contentScale \u548c alignment</li> <li>new: CrossfadeDrawable \u73b0\u5728\u652f\u6301 scaleType</li> <li>new: ResizeDrawable \u73b0\u5728\u652f\u6301 scaleType</li> </ul>"},{"location":"zh/CHANGELOG/#410","title":"4.1.0","text":"<p>[!CAUTION] compose multiplatform 1.8.0 \u7248\u672c\u5fc5\u987b jvm 11 \u624d\u80fd\u7f16\u8bd1\uff0c\u8bf7\u4fee\u6539 sourceCompatibility\u3001targetCompatibility\u3001jvmTarget \u7b49\u914d\u7f6e\u4e3a 11+</p> <ul> <li>fix: \u4fee\u590d CrossfadePainter, ResizePainter, ImageBitmapPainter \u548c DrawablePainter   \u56e0\u4e22\u5931\u6d6e\u70b9\u7cbe\u5ea6\u5bfc\u81f4\u5185\u5bb9\u65e0\u6cd5\u5145\u6ee1\u753b\u5e03\u7684 bug</li> <li>new: AsyncImage \u589e\u52a0 keepContentNoneStartOnDraw \u53c2\u6570</li> <li>depend: \u66f4\u65b0 kotlin 2.1.10</li> <li>depend: \u66f4\u65b0 compose multiplatform 1.8.0</li> <li>depend: \u66f4\u65b0 android-gif-drawable 1.2.29</li> <li>depend: \u66f4\u65b0 ffmpegMediaMetadataRetriever 1.0.19</li> <li>depend: \u66f4\u65b0 jetbrains-lifecycle 2.8.4</li> <li>depend: \u66f4\u65b0 kotlinx-coroutines 1.10.2</li> <li>depend: \u66f4\u65b0 ktor2 2.3.13</li> <li>depend: \u66f4\u65b0 ktor3 3.0.3</li> <li>depend: \u66f4\u65b0 okio 3.11.0</li> <li>depend: \u4e0d\u518d\u66ff\u6362 <code>kotlin-stdlib-jdk7</code> \u548c <code>kotlin-stdlib-jdk8</code> \u4e3a <code>kotlin-stdlib</code></li> </ul>"},{"location":"zh/CHANGELOG/#406","title":"4.0.6","text":"<p>compose:</p> <ul> <li>improve: \u73b0\u5728 AsyncImage \u5728\u7a97\u53e3\u5927\u5c0f\u4e3a 0 \u65f6\u4e0d\u518d\u5d29\u6e83\uff0c\u800c\u662f\u6700\u5c0f\u4e3a   100\u3002 #244</li> </ul>"},{"location":"zh/CHANGELOG/#405","title":"4.0.5","text":"<p>fetch:</p> <ul> <li>fix: \u4fee\u590d FileUriFetcher \u65e0\u6cd5\u52a0\u8f7d windows \u6587\u4ef6\u8def\u5f84\u7684   bug\u3002 #239</li> </ul>"},{"location":"zh/CHANGELOG/#404","title":"4.0.4","text":"<p>compose:</p> <ul> <li>fix: \u4fee\u590d AsyncImage \u548c SubcomposeAsyncImage \u5728\u7ec4\u4ef6\u5927\u5c0f\u4e3a 0 \u65f6\u65e0\u6cd5\u52a0\u8f7d\u56fe\u7247\u7684   bug\u3002 #236</li> <li>improve: \u6062\u590d AsyncImage \u548c SubcomposeAsyncImage \u5728\u8bbe\u7f6e size \u65f6\u5982\u679c\u5bbd\u6216\u9ad8\u4e3a 0 \u5c31\u66ff\u6362\u4e3a\u7a97\u53e3\u5bb9\u5668\u5927\u5c0f\u7684\u529f\u80fd</li> </ul>"},{"location":"zh/CHANGELOG/#403","title":"4.0.3","text":"<ul> <li>fix: \u4fee\u590d svg \u6587\u4ef6\u5934\u90e8\u6709\u6ce8\u91ca\u65f6 SvgDecoder \u65e0\u6cd5\u8bc6\u522b\u7684   bug\u3002 #232</li> </ul>"},{"location":"zh/CHANGELOG/#402","title":"4.0.2","text":"<p>compose:</p> <ul> <li>fix: \u5f53\u524d\u7a97\u53e3\u5927\u5c0f\u6539\u53d8\u65f6 AsyncImage   \u7ec4\u4ef6\u4f1a\u91cd\u65b0\u52a0\u8f7d\u3002 #231</li> </ul>"},{"location":"zh/CHANGELOG/#401","title":"4.0.1","text":"<p>android:</p> <ul> <li>fix: \u4fee\u590d BitmapImage \u8f6c\u4e3a BitmapDrawable \u65f6\u6ca1\u6709\u8bbe\u7f6e Resources \u5bfc\u81f4 BitmapDrawable \u7684 Intrinsic   \u5c3a\u5bf8\u548c Bitmap \u4e0d\u4e00\u81f4\u7684 bug\u3002 #226</li> </ul>"},{"location":"zh/CHANGELOG/#400-stable","title":"4.0.0 Stable","text":"<p>Sketch:</p> <ul> <li>change: SketchSingleton \u91cd\u6784\u4e3a SingletonSketch</li> <li>change: Sketch \u7684 execute(DownloadRequest) \u548c enqueue(DownloadRequest) \u65b9\u6cd5\u91cd\u6784\u4e3a executeDownload(   ImageRequest) \u548c enqueueDownload(ImageRequest)</li> <li>new: Sketch.Builder \u548c ComponentRegistry.Builder \u65b0\u589e addComponents() \u51fd\u6570</li> <li>new: Sketch.Builder \u589e\u52a0 networkParallelismLimited() \u548c decodeParallelismLimited()   \u65b9\u6cd5\u63a7\u5236\u7f51\u7edc\u548c\u89e3\u7801\u5e76\u53d1\u6570\u91cf #200</li> <li>new: \u65b0\u589e ComponentLoader\uff0c\u652f\u6301\u81ea\u52a8\u63a2\u6d4b\u5e76\u6ce8\u518c Fetcher \u548c Decoder \u7ec4\u4ef6\uff0c\u6240\u6709\u81ea\u5e26\u6a21\u5757\u91cc\u7684\u7ec4\u4ef6\u90fd\u5df2\u652f\u6301</li> </ul> <p>request:</p> <ul> <li>change: \u4e0d\u518d\u533a\u5206 Display\u3001Load\u3001Download\uff0c\u73b0\u5728\u53ea\u6709\u4e00\u4e2a ImageRequest\u3001ImageResult\u3001ImageListener</li> <li>change: ImageResult \u7684 requestKey \u5c5e\u6027\u88ab\u79fb\u9664\u3001requestCacheKey \u5c5e\u6027\u91cd\u547d\u540d\u4e3a cacheKey</li> <li>change: \u73b0\u5728 Target\u3001ImageResult\u3001DecodeResult \u90fd\u4f7f\u7528 Image</li> <li>change: SketchDrawable \u7684   imageUri\u3001requestKey\u3001requestCacheKey\u3001imageInfo\u3001dataFrom\u3001transformedList\u3001extras \u7b49\u5c5e\u6027\u88ab\u79fb\u9664\uff0c\u73b0\u5728\u8bf7\u4ece   ImageResult \u4e2d\u83b7\u53d6\u5b83\u4eec</li> <li>change: depth \u548c depthFrom \u5c5e\u6027\u5408\u5e76\u6210 DepthHolder</li> <li>change: bitmapConfig\u3001colorSpace\u3001preferQualityOverSpeed\u3001placeholder(Int)\u3001fallback(Int)\u3001error(Int) \u7b49   Android \u5e73\u53f0\u7279\u6709 API \u4ee5\u6269\u5c55\u51fd\u6570\u7684\u5f62\u5f0f\u63d0\u4f9b</li> <li>change: resizeApplyToDrawable \u91cd\u547d\u540d\u4e3a resizeOnDraw</li> <li>change: Parameters \u91cd\u547d\u540d\u4e3a Extras</li> <li>change: LongImageClipPrecisionDecider \u91cd\u547d\u540d\u4e3a LongImagePrecisionDecider,   LongImageStartCropScaleDecider \u91cd\u547d\u540d\u4e3a LongImageScaleDecider</li> <li>remove: \u79fb\u9664 listener() \u548c progressListener() \u65b9\u6cd5\uff0c\u73b0\u5728\u8bf7\u4f7f\u7528 addListener() \u548c   addProgressListener() \u65b9\u6cd5</li> <li>new: \u65b0\u589e 'sizeMultiplier: Float' \u5c5e\u6027\uff0c\u7528\u4e8e\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\u7684\u7f29\u653e\u6bd4\u4f8b</li> <li>new: \u65b0\u589e 'allowNullImage: Boolean' \u5c5e\u6027</li> </ul> <p>fetch:</p> <ul> <li>change: Fetcher.Factory.create() \u7684\u4f20\u53c2\u6539\u4e3a RequestContext</li> <li>new: ResourceUriFetcher \u652f\u6301 'android.resource:///drawable/ic_launcher' \u548c 'android.resource:   ///1031232' uri</li> <li>new: AssetUriFetcher \u652f\u6301 'file:///android_asset/' uri</li> </ul> <p>source:</p> <ul> <li>change: \u91cd\u6784 DataSource</li> </ul> <p>decode:</p> <ul> <li>change: Decoder \u7684 decode() \u65b9\u6cd5\u79fb\u9664 suspend \u4fee\u9970\u7b26\u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u4ece Result \u6539\u4e3a   DecodeResult <li>change: BitmapDecoder \u548c DrawableDecoder \u5408\u5e76\u4e3a Decoder</li> <li>change: BitmapDecodeInterceptor \u548c DrawableDecodeInterceptor \u5408\u5e76\u4e3a DecodeInterceptor</li> <li>change: BitmapConfig \u91cd\u6784\u4e3a BitmapColorType</li> <li>improve: \u6539\u8fdb\u52a8\u56fe\u76f8\u5173 Decoder \u5728\u5224\u65ad\u56fe\u7247\u7c7b\u578b\u65f6\u7684\u51c6\u786e\u6027\uff0c\u4e0d\u518d\u4f9d\u8d56 FetchResult \u7684 mimeType   \u5c5e\u6027\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4e0d\u51c6\u786e</li> <li>new: DrawableDecoder \u652f\u6301 colorSpace</li> <p>transformation:</p> <ul> <li>fix: \u4fee\u590d CircleCrop\u3001Rotate\u3001RoundedCorners Transformation \u5728 RGB_565 \u65f6\u4e0d\u5de5\u4f5c\u7684   bug\u3002 #209</li> <li>fix: \u4fee\u590d Android \u5e73\u53f0\u4e0a blur\u3001rotate \u7b49 Transformation \u6ca1\u6709\u4fdd\u6301 ColorSpace \u4e0d\u53d8\u7684   bug\u3002 #213</li> <li>change: Transformation \u7684 transform() \u65b9\u6cd5\u79fb\u9664 suspend \u4fee\u9970\u7b26</li> </ul> <p>cache:</p> <ul> <li>remove: \u79fb\u9664 BitmapPool \u4ee5\u53ca\u548c\u5b83\u76f8\u5173\u7684 disallowReuseBitmap   \u5c5e\u6027\u3001CountBitmap\u3001SketchCountBitmapDrawable \u7c7b</li> <li>change: \u91cd\u6784 DiskCache SnapShot \u548c Editor\uff0cget() \u548c edit() \u6539\u4e3a openSnapShot() \u548c openEditor()   \uff0c\u5e76\u4e14\u540c\u4e00\u4e2a key \u7684 openSnapShot() \u548c openEditor() \u73b0\u5728\u662f\u4e92\u76f8\u51b2\u7a81\u7684, openSnapshot \u672a\u5173\u95ed\u524d   openEditor \u59cb\u7ec8\u8fd4\u56de null</li> <li>change: \u91cd\u6784 MemoryCache.Value</li> </ul> <p>state:</p> <ul> <li>change: ImageRequest \u548c ImageOptions \u7684 uriEmpty \u5c5e\u6027\u91cd\u547d\u540d\u4e3a fallback</li> <li>change: ImageRequest \u548c ImageOptions \u7684 error \u5c5e\u6027\u7684\u7c7b\u578b\u4ece ErrorStateImage \u6539\u4e3a StateImage</li> <li>change: ErrorStateImage \u79fb\u9664 ErrorStateImage.Builder.uriEmptyError() \u65b9\u6cd5\u5e76\u91cd\u6784\u4e3a   ConditionStateImage</li> <li>improve: \u6539\u8fdb IconDrawable\uff0c\u652f\u6301\u6709\u56fa\u5b9a\u5927\u5c0f\u7684 background \u5e76\u4e14\u9650\u5236 icon \u5fc5\u987b\u6709\u56fa\u5b9a\u5c3a\u5bf8\u6216\u6307\u5b9a iconSize</li> </ul> <p>animated:</p> <ul> <li>fix: \u4fee\u590d GifDrawable \u548c MovieDrawable \u65e0\u6cd5\u6b63\u786e\u5e94\u7528 animatedTransformation \u7684   bug\u3002 #214</li> <li>fix: \u4fee\u590d GifDrawableDecoder \u7684 repeatCount \u8bbe\u7f6e\u9519\u8bef\u5e94\u8be5\u52a0 1 \u7684   bug\u3002 #215</li> <li>change: \u62c6\u5206 sketch-animated \u6a21\u5757\u4e3a sketch-animated-core \u548c   sketch-animated-gif\u3001sketch-animated-webp\u3001sketch-animated-heif, sketch-animated-koralgif \u6a21\u5757\u91cd\u547d\u540d\u4e3a   sketch-animated-gif-koral</li> </ul> <p>http:</p> <ul> <li>remove: \u79fb\u9664 DisplayRequest.Builder \u548c DisplayOptions.Builder \u7684 setHttpHeader() \u548c   addHttpHeader() \u65b9\u6cd5</li> <li>change: http \u529f\u80fd\u62c6\u5206\u6210\u5355\u72ec\u7684\u6a21\u5757\u63d0\u4f9b\uff0c\u589e\u52a0   sketch-http\u3001sketch-http-hurl\u3001sketch-http-ktor2\u3001sketch-http-ktor3 \u6a21\u5757\uff0csketch-okhttp \u6a21\u5757\u91cd\u547d\u540d\u4e3a   sketch-http-okhttp</li> </ul> <p>compose:</p> <ul> <li>fix: \u4fee\u590d AsyncImage \u7684 filterQuality \u53c2\u6570\u65e0\u6548\u7684   bug\u3002 #211</li> <li>remove: AsyncImage \u53ef\u7ec4\u5408\u51fd\u6570\u79fb\u9664 placeholder\u3001error\u3001uriEmpty\u3001onLoading\u3001onSuccess\u3001onError \u53c2\u6570</li> <li>new: AsyncImageState \u73b0\u5728\u53ef\u4ee5\u8bbe\u7f6e ImageOptions \u4e86\uff0c\u4f8b\u5982\uff1a'rememberAsyncImageState {   ImageOptions() }'</li> <li>new: \u65b0\u589e ErrorStateImage.Builder.saveCellularTrafficError(DrawableResource) \u6269\u5c55\u51fd\u6570</li> <li>new: ImageRequest.Builder \u548c ImageOptions.Builder \u65b0\u589e size(IntSize) \u6269\u5c55\u51fd\u6570</li> <li>new: AsyncImageState \u65b0\u589e onPainterState \u548c onLoadState \u5c5e\u6027\uff0c\u7528\u4e8e\u4ee5\u56de\u8c03\u7684\u65b9\u5f0f\u63a5\u6536 PainterState \u548c   LoadState \u66f4\u65b0</li> <li>new: \u65b0\u589e ComposableImageRequest() \u548c ComposableImageOptions() \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728   placeholder\u3001error\u3001fallback \u65b9\u6cd5\u4e0a\u4f7f\u7528\u4f7f\u7528 DrawableResource</li> </ul> <p>view:</p> <ul> <li>fix: \u4fee\u590d\u5f53 ImageView \u5df2\u9644\u5230\u7a97\u53e3\u4f46\u662f\u56e0 padding \u5bfc\u81f4 size \u4e3a null \u65f6\u65e0\u6cd5\u52a0\u8f7d\u56fe\u7247\u7684   bug\u3002 #208</li> <li>change: displayImage \u91cd\u547d\u540d\u4e3a loadImage</li> <li>change: ImageView.disposeDisplay() \u91cd\u547d\u540d\u4e3a ImageView.disposeLoad()</li> <li>new: ImageRequest.Builder \u548c ImageOptions.Builder \u65b0\u589e sizeWithView()\u3001sizeWithDisplay() \u6269\u5c55\u51fd\u6570</li> </ul> <p>extensions:</p> <ul> <li>fix: \u4fee\u590d AppIconUriFetcher.Factory \u89e3\u6790 versionCode \u65f6\u5f02\u5e38\u7684   bug\u3002#204</li> <li>change: \u4ece sketch-extensions-core \u6a21\u5757\u4e2d\u62c6\u5206\u51fa sketch-extensions-apkicon \u548c   sketch-extensions-appicon \u6a21\u5757</li> </ul> <p>other:</p> <ul> <li>upgrade\uff1aAndroid \u6700\u4f4e API \u5347\u5230\u4e86 API 21</li> <li>depend: \u5347\u7ea7 kotlin 2.0.21, kotlinx coroutines 1.9.0</li> <li>depend: \u5347\u7ea7 jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> </ul>"},{"location":"zh/CHANGELOG/#v400-rc01","title":"v4.0.0-rc01","text":"<p>compose:</p> <ul> <li>new: AsyncImageState \u65b0\u589e onPainterState \u548c onLoadState \u5c5e\u6027\uff0c\u7528\u4e8e\u4ee5\u56de\u8c03\u7684\u65b9\u5f0f\u63a5\u6536 PainterState \u548c   LoadState \u66f4\u65b0</li> </ul>"},{"location":"zh/CHANGELOG/#v400-beta03","title":"v4.0.0-beta03","text":"<p>core:</p> <ul> <li>new: \u65b0\u589e Image.asBitmap(), asBitmapOrNull(), asDrawableOrNull(), asPainterOrNull() \u6269\u5c55\u51fd\u6570</li> <li>improve: ConditionStateImage \u548c ComposableConditionStateImage \u7684 defaultImage \u5c5e\u6027\u73b0\u5728\u53ef\u7a7a</li> </ul> <p>decode:</p> <ul> <li>improve: \u6539\u8fdb\u6839\u636e mimeType \u5224\u65ad\u662f\u5426\u652f\u6301\u533a\u57df\u89e3\u7801\uff0c\u975e image \u7c7b\u578b\u76f4\u63a5\u8fd4\u56de false\uff0c\u975e Android \u5e73\u53f0\u4e0a\u6839\u636e   skiko \u7248\u672c\u5224\u65ad\u662f\u5426\u652f\u6301 heic\u3001heif\u3001avif \u7c7b\u578b</li> </ul> <p>fetch:</p> <ul> <li>improve: AssetUriFetcher \u548c ResourceUriFetcher \u73b0\u5728\u517c\u5bb9 sketch3 \u7684\u534f\u8bae</li> </ul>"},{"location":"zh/CHANGELOG/#400-beta02","title":"4.0.0-beta02","text":"<p>core:</p> <ul> <li>fix: \u4fee\u590d\u78c1\u76d8\u7f13\u5b58\u56e0\u88ab\u6740\u5bfc\u81f4 REMOVE \u8bb0\u5f55\u4e22\u5931\uff0c\u91cd\u65b0\u521d\u59cb\u5316\u672a\u6821\u9a8c\u6587\u4ef6\u662f\u5426\u5b58\u5728\u5bfc\u81f4 size() \u5f02\u5e38\u7684   bug #219</li> </ul> <p>animated:</p> <ul> <li>fix: \u4fee\u590d sketch-animated-heif \u7684\u4f9d\u8d56\u4e2d\u610f\u5916\u7684\u5305\u542b\u4e86\u672c\u5730\u6d4b\u8bd5 module \u7684   bug #220</li> </ul>"},{"location":"zh/CHANGELOG/#400-beta01","title":"4.0.0-beta01","text":"<p>core:</p> <ul> <li>remove: \u5220\u9664 Image.getPixels()</li> <li>remove: \u79fb\u9664 'com.github.panpf.sketch.annotation' \u5305\u4e0b\u7684 AnyThread\u3001MainThread\u3001IntRange\u3001IntDef   \u6ce8\u89e3\uff0c\u4f7f\u7528 'androidx.annotation' \u5305\u4e0b\u7684\u66ff\u4ee3</li> <li>change: \u5408\u5e76 AndroidBitmapImage \u548c SkiaBitmapImage \u4e3a BitmapImage</li> <li>change: DrawableEqualizer \u91cd\u547d\u540d\u4e3a EquitableDrawable</li> <li>change: \u79fb\u9664 AndroidBitmap\u3001SkiBitmap\u3001SkiaImageInfo\u3001SkiaImage\u3001SkiaRect</li> <li>change: SkiaAnimatedImage \u91cd\u547d\u540d\u4e3a AnimatedImage</li> <li>change: ImageRequest \u7684 registerListener \u548c registerProgressListener \u65b9\u6cd5\u91cd\u547d\u540d\u4e3a addListener \u548c   addProgressListener</li> <li>new: \u65b0\u589e ComponentLoader\uff0c\u652f\u6301\u81ea\u52a8\u63a2\u6d4b\u5e76\u6ce8\u518c Fetcher \u548c Decoder \u7ec4\u4ef6\uff0c\u6240\u6709\u81ea\u5e26\u6a21\u5757\u91cc\u7684\u7ec4\u4ef6\u90fd\u5df2\u652f\u6301</li> </ul> <p>compose:</p> <ul> <li>fix: \u4fee\u590d AsyncImage \u7684 filterQuality \u53c2\u6570\u65e0\u6548\u7684   bug\u3002 #211</li> <li>remove: \u79fb\u9664 ComposeBitmapImage</li> <li>change: \u79fb\u9664 PainterState.Empty</li> <li>change: PainterEqualizer \u91cd\u547d\u540d\u4e3a EquitablePainter</li> <li>change: ComposeImagePainter \u91cd\u547d\u540d\u4e3a ImageBitmapPainter\u3001SkiaAnimatedImagePainter \u91cd\u547d\u540d\u4e3a   AnimatedImagePainter</li> </ul> <p>view:</p> <ul> <li>fix: \u4fee\u590d\u5f53 ImageView \u5df2\u9644\u5230\u7a97\u53e3\u4f46\u662f\u56e0 padding \u5bfc\u81f4 size \u4e3a null \u65f6\u65e0\u6cd5\u52a0\u8f7d\u56fe\u7247\u7684   bug\u3002 #208</li> </ul> <p>decode:</p> <ul> <li>change: Decoder \u7684 decode() \u65b9\u6cd5\u79fb\u9664 suspend \u4fee\u9970\u7b26\u5e76\u4e14\u8fd4\u56de\u7c7b\u578b\u4ece Result \u6539\u4e3a   DecodeResult <li>change: BitmapConfig \u91cd\u6784\u4e3a BitmapColorType</li> <li>new: \u975e\u5b89\u5353\u5e73\u53f0\u73b0\u5728\u4e5f\u652f\u6301 ColorType \u4e86</li> <li>new: \u975e\u5b89\u5353\u5e73\u53f0\u73b0\u5728\u4e5f\u652f\u6301 ColorSpace \u4e86</li> <li>new: DrawableDecoder \u652f\u6301 colorSpace</li> <p>fetch:</p> <ul> <li>change: Fetcher.Factory.create() \u7684\u4f20\u53c2\u6539\u4e3a RequestContext</li> </ul> <p>cache:</p> <ul> <li>change: \u73b0\u5728\u975e\u5b89\u5353\u5e73\u53f0\u4e0a\u5185\u5b58\u7f13\u5b58\u4e2d\u7f13\u5b58\u7684\u662f SkiaBitmapImage\uff0c\u4e0d\u518d\u662f ComposeBitmapImage</li> <li>change: \u684c\u9762\u548c web \u5e73\u53f0\u7684\u9ed8\u8ba4\u5185\u5b58\u7f13\u5b58\u5927\u5c0f\u73b0\u5728\u662f 256MB\uff0cios \u5e73\u53f0\u662f 128MB</li> </ul> <p>http:</p> <ul> <li>remove: \u79fb\u9664 ImageRequest.Builder \u548c ImageOptions.Builder \u7684 setHttpHeader() \u548c addHttpHeader() \u65b9\u6cd5</li> <li>change: \u79fb\u9664 sketch-http-core \u6a21\u5757\uff0c\u589e\u52a0 sketch-http-hurl \u6a21\u5757\uff0csketch-http-ktor \u6a21\u5757\u91cd\u547d\u540d\u4e3a   sketch-http-ktor2 \u5e76\u4e14\u4e0d\u518d\u652f\u6301 wasmJs\uff0c\u589e\u52a0 sketch-http-ktor3 \u6a21\u5757</li> </ul> <p>animated:</p> <ul> <li>fix: \u4fee\u590d\u975e\u5b89\u5353\u5e73\u53f0\u4e0a\u52a8\u56fe\u8bbe\u7f6e repeatCount \u5e76\u64ad\u653e\u7ed3\u675f\u540e\u6ca1\u6709\u505c\u7559\u5728\u6700\u540e\u4e00\u5e27\uff0c\u800c\u505c\u7559\u5728\u7b2c\u4e00\u5e27\u7684   bug\u3002 #212</li> <li>fix: \u4fee\u590d GifDrawable \u548c MovieDrawable \u65e0\u6cd5\u6b63\u786e\u5e94\u7528 animatedTransformation \u7684   bug\u3002 #214</li> <li>fix: \u4fee\u590d GifDrawableDecoder \u7684 repeatCount \u8bbe\u7f6e\u9519\u8bef\u5e94\u8be5\u52a0 1 \u7684   bug\u3002 #215</li> <li>change: \u62c6\u5206 sketch-animated \u6a21\u5757\u4e3a sketch-animated-core \u548c   sketch-animated-gif\u3001sketch-animated-webp\u3001sketch-animated-heif, sketch-animated-koralgif \u6a21\u5757\u91cd\u547d\u540d\u4e3a   sketch-animated-gif-koral</li> <li>improve: animatedTransformation \u73b0\u5728\u652f\u6301\u975e Android \u5e73\u53f0</li> </ul> <p>transformation:</p> <ul> <li>fix: \u4fee\u590d CircleCrop\u3001Rotate\u3001RoundedCorners Transformation \u5728 RGB_565 \u65f6\u4e0d\u5de5\u4f5c\u7684   bug\u3002 #209</li> <li>fix: \u4fee\u590d Android \u5e73\u53f0\u4e0a blur\u3001rotate \u7b49 Transformation \u6ca1\u6709\u4fdd\u6301 ColorSpace \u4e0d\u53d8\u7684   bug\u3002 #213</li> <li>change: Transformation \u7684 transform() \u65b9\u6cd5\u79fb\u9664 suspend \u4fee\u9970\u7b26</li> </ul> <p>state:</p> <ul> <li>change: ImageRequest \u548c ImageOptions \u7684 error \u5c5e\u6027\u7684\u7c7b\u578b\u4ece ErrorStateImage \u6539\u4e3a StateImage</li> <li>change: ErrorStateImage \u91cd\u6784\u4e3a ConditionStateImage\uff0c\u5e76\u4e14 ConditionStateImage \u53ef\u4ee5\u7528\u5728 placeholder \u548c   fallback</li> <li>improve: \u6539\u8fdb IconDrawable\uff0c\u652f\u6301\u6709\u56fa\u5b9a\u5927\u5c0f\u7684 background \u5e76\u4e14\u9650\u5236 icon \u5fc5\u987b\u6709\u56fa\u5b9a\u5c3a\u5bf8\u6216\u6307\u5b9a iconSize</li> <li>improve: \u6539\u8fdb IconPainter\uff0c\u652f\u6301\u6709\u56fa\u5b9a\u5927\u5c0f\u7684 background \u5e76\u4e14\u9650\u5236 icon \u5fc5\u987b\u6709\u56fa\u5b9a\u5c3a\u5bf8\u6216\u6307\u5b9a iconSize</li> <li>new: \u65b0\u589e 'Drawable.asStateImage(Any)' \u548c 'ColorDrawable.asStateImage()' \u6269\u5c55\u51fd\u6570</li> </ul> <p>extensions:</p> <ul> <li>fix: \u4fee\u590d RingProgressDrawable, SectorProgressDrawable, RingProgressPainter, SectorProgressPainter   \u7684 equals \u65b9\u6cd5\u672a\u6309\u9884\u671f\u6267\u884c\u7684 bug\u3002 #210</li> <li>change: \u4ece sketch-extensions-core \u6a21\u5757\u4e2d\u62c6\u5206\u51fa sketch-extensions-apkicon \u548c   sketch-extensions-appicon \u6a21\u5757</li> </ul> <p>other:</p> <ul> <li>depend: \u5347\u7ea7 kotlin 2.0.21, kotlinx coroutines 1.9.0</li> <li>depend: \u5347\u7ea7 jetbrains compose 1.7.0, jetbrains lifecycle 2.8.3</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha08","title":"4.0.0-alpha08","text":"<ul> <li>fix: \u4fee\u590d ComposableImageRequest() \u548c ComposableImageOptions() \u51fd\u6570\u5185\u90e8\u65e0\u6cd5\u76d1\u542c\u5e76\u66f4\u65b0 Compose   State \u7684 bug\u3002 #207</li> <li>remove: \u79fb\u9664 SkiaExifOrientationHelper</li> <li>remove: DataSource \u79fb\u9664 sketch \u548c request \u5c5e\u6027</li> <li>change: DataSource \u7684 getFile() \u548c getFileOrNull() \u65b9\u6cd5\u589e\u52a0 Sketch \u53c2\u6570</li> <li>change: DataSource \u7684 openSourceOrNull() \u548c getFileOrNull() \u65b9\u6cd5\u73b0\u5728\u4ee5\u6269\u5c55\u51fd\u6570\u7684\u5f62\u5f0f\u63d0\u4f9b</li> <li>change: RequestContext \u79fb\u5230 'com.github.panpf.sketch.request' \u5305\u4e0b</li> <li>new: SkiaBitmapImage \u73b0\u5728\u652f\u6301\u5185\u5b58\u7f13\u5b58</li> <li>new: DataSource \u65b0\u589e key \u5c5e\u6027</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha07","title":"4.0.0-alpha07","text":"<ul> <li>improve: SkiaAnimatedImagePainter \u73b0\u5728\u89e3\u7801\u548c\u7ed8\u5236\u4e0d\u5171\u4eab Bitmap   \u4e86\uff0c\u4ee5\u907f\u514d\u753b\u9762\u9519\u4e71\u3002 #206</li> <li>improve: SkiaAnimatedImagePainter \u73b0\u5728\u8d70\u5230\u7ed8\u5236\u65f6\u4f9d\u7136\u6ca1\u6709\u542f\u52a8\u52a8\u753b\uff0c\u5219\u4f1a\u81ea\u52a8\u52a0\u8f7d\u7b2c\u4e00\u5e27</li> <li>new: SkiaAnimatedImagePainter   \u73b0\u5728\u652f\u6301\u7f13\u5b58\u89e3\u7801\u8017\u65f6\u8d85\u8fc7\u5e27\u6301\u7eed\u65f6\u95f4\u7684\u5e27\u4ee5\u63d0\u9ad8\u64ad\u653e\u6d41\u7545\u5ea6\uff0c\u4f46\u8fd9\u4f1a\u4f7f\u7528\u66f4\u591a\u7684\u5185\u5b58\uff0c\u9ed8\u8ba4\u5173\u95ed\uff0c\u901a\u8fc7 '   cacheDecodeTimeoutFrame()' \u51fd\u6570\u5f00\u542f</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha06","title":"4.0.0-alpha06","text":"<ul> <li>fix: \u4fee\u590d SkiaAnimatedImagePainter \u5728\u9047\u5230\u4f2a\u88c5\u7684 gif \u56fe\u7247\u65f6\u5d29\u6e83\u7684   bug\u3002#205</li> <li>improve: \u6539\u8fdb\u52a8\u56fe\u76f8\u5173 Decoder \u5728\u5224\u65ad\u56fe\u7247\u7c7b\u578b\u65f6\u7684\u51c6\u786e\u6027\uff0c\u4e0d\u518d\u4f9d\u8d56 FetchResult \u7684 mimeType   \u5c5e\u6027\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4e0d\u51c6\u786e</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha05","title":"4.0.0-alpha05","text":"<ul> <li>fix: \u4fee\u590d AppIconUriFetcher.Factory \u89e3\u6790 versionCode \u65f6\u5f02\u5e38\u7684   bug\u3002#204</li> <li>change: KotlinResourceUriFetcher \u652f\u6301\u7684 uri \u4ece 'kotlin.resource://' \u6539\u4e3a 'file:   ///kotlin_resource/'</li> <li>change: ComposeResourceUriFetcher \u652f\u6301\u7684 uri \u4ece 'compose.resource://'   \u6539\u4e3a 'file:///compose_resource/'</li> <li>change: ResourceUriFetcher \u652f\u6301\u7684 uri \u4ece 'android.resource:   //resource?resType=drawable&amp;resName=ic_launcher' \u548c 'android.resource://resource?resId=1031232'   \u6539\u4e3a 'android.resource:///drawable/ic_launcher' \u548c 'android.resource:///1031232'</li> <li>change: ImageRequest.uri \u5c5e\u6027\u7684\u7c7b\u578b\u4ece String \u6539\u4e3a Uri</li> <li>change: AssetUriFetcher \u652f\u6301\u7684 uri \u4ece 'asset://' \u6539\u4e3a 'file:///android_asset/'</li> <li>improve: Fetcher \u7684\u6240\u6709\u5b9e\u73b0\u7c7b\u90fd\u5b9e\u73b0\u4e86 equals \u548c hashCode \u65b9\u6cd5</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha04","title":"4.0.0-alpha04","text":"<ul> <li>fix: \u4fee\u590d HurlStack \u548c OkHttpStack   \u56e0\u518d\u6b21\u5207\u6362\u7ebf\u7a0b\u5bfc\u81f4\u7f51\u7edc\u5e76\u53d1\u63a7\u5236\u5931\u8d25\u7684\u95ee\u9898 #199</li> <li>fix: \u4fee\u590d\u6240\u6709\u7f51\u7edc\u4efb\u52a1\u5b8c\u6210\u540e\u624d\u4f1a\u5f00\u59cb\u89e3\u7801\u56fe\u7247\u7684   bug. #201</li> <li>change: ImageOptions \u548c ImageRequest \u7684 mergeComponents() \u65b9\u6cd5\u91cd\u547d\u540d\u4e3a addComponents()</li> <li>change: ImageView.loadImage() \u548c newResourceUri() \u51fd\u6570\u7684 drawableResId \u53c2\u6570\u91cd\u547d\u540d\u4e3a resId</li> <li>change: AndroidLogPipeline \u548c PrintLogPipeline \u6539\u4e3a\u5355\u4f8b\u6a21\u5f0f</li> <li>improve: \u68c0\u67e5 PlatformContext \u7684\u7c7b\u578b\u4ee5\u9632\u6b62\u5c06 Activity \u4f20\u9012\u7ed9 Sketch \u6216 ImageRequest</li> <li>new: \u6dfb\u52a0 PlatformContext.sketch \u548c View.sketch \u6269\u5c55\u51fd\u6570</li> <li>new: Sketch.Builder \u548c ComponentRegistry.Builder \u65b0\u589e addComponents() \u51fd\u6570</li> <li>new: Sketch.Builder \u589e\u52a0 networkParallelismLimited() \u548c decodeParallelismLimited()   \u65b9\u6cd5\u63a7\u5236\u7f51\u7edc\u548c\u89e3\u7801\u5e76\u53d1\u6570\u91cf #200</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha03","title":"4.0.0-alpha03","text":"<ul> <li>change: ComposeBitmapValue \u91cd\u547d\u540d\u4e3a ComposeBitmapImageValue</li> <li>change: \u91cd\u6784 Sketch.enqueueDownload() \u548c executeDownload() \u5e76\u4ece sketch-extensions-core \u6a21\u5757\u79fb\u5230   sketch-core \u6a21\u5757</li> <li>change: LongImageClipPrecisionDecider \u91cd\u547d\u540d\u4e3a LongImagePrecisionDecider,   LongImageStartCropScaleDecider \u91cd\u547d\u540d\u4e3a LongImageScaleDecider</li> <li>change: \u6062\u590d\u5728\u6784\u5efa ImageRequest \u65f6\u4f7f\u7528\u5c4f\u5e55\u5927\u5c0f\u4f5c\u4e3a\u6700\u7ec8\u7684 Size</li> <li>improve: Painter.asSketchImage() \u73b0\u5728\u8fd4\u56de PainterImage; ComposeBitmap.asSketchImage() \u73b0\u5728\u8fd4\u56de   ComposeBitmapImage</li> <li>new: ImageRequest.Builder \u548c ImageOptions.Builder \u65b0\u589e sizeWithView()\u3001sizeWithDisplay()\u3001size(   IntSize) \u6269\u5c55\u51fd\u6570</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha02","title":"4.0.0-alpha02","text":"<ul> <li>change: ImageView.disposeDisplay() \u91cd\u547d\u540d\u4e3a ImageView.disposeLoad()</li> <li>new: \u65b0\u589e ImageRequest.Builder.composableError() \u548c ImageOptions.Builder.composableError() \u6269\u5c55\u51fd\u6570</li> <li>new: \u65b0\u589e ErrorStateImage.Builder.saveCellularTrafficError(DrawableResource) \u6269\u5c55\u51fd\u6570</li> </ul>"},{"location":"zh/CHANGELOG/#400-alpha01","title":"4.0.0-alpha01","text":"<p>Sketch:</p> <ul> <li>change: SketchSingleton \u91cd\u6784\u4e3a SingletonSketch</li> </ul> <p>request:</p> <ul> <li>change: \u4e0d\u518d\u533a\u5206 Display\u3001Load\u3001Download\uff0c\u73b0\u5728\u53ea\u6709\u4e00\u4e2a ImageRequest\u3001ImageResult\u3001ImageListener</li> <li>change: ImageResult \u7684 requestKey \u5c5e\u6027\u88ab\u79fb\u9664\u3001requestCacheKey \u5c5e\u6027\u91cd\u547d\u540d\u4e3a cacheKey</li> <li>change: \u73b0\u5728 Target\u3001ImageResult\u3001DecodeResult \u90fd\u4f7f\u7528 Image</li> <li>change: SketchDrawable \u7684   imageUri\u3001requestKey\u3001requestCacheKey\u3001imageInfo\u3001dataFrom\u3001transformedList\u3001extras \u7b49\u5c5e\u6027\u88ab\u79fb\u9664\uff0c\u73b0\u5728\u8bf7\u4ece   ImageResult \u4e2d\u83b7\u53d6\u5b83\u4eec</li> <li>change: depth \u548c depthFrom \u5c5e\u6027\u5408\u5e76\u6210 DepthHolder</li> <li>change: bitmapConfig\u3001colorSpace\u3001preferQualityOverSpeed\u3001placeholder(Int)\u3001fallback(Int)\u3001error(Int) \u7b49   Android \u5e73\u53f0\u7279\u6709 API \u4ee5\u6269\u5c55\u51fd\u6570\u7684\u5f62\u5f0f\u63d0\u4f9b</li> <li>change: resizeApplyToDrawable \u91cd\u547d\u540d\u4e3a resizeOnDraw</li> <li>change: Parameters \u91cd\u547d\u540d\u4e3a Extras</li> <li>new: \u65b0\u589e 'sizeMultiplier: Float' \u5c5e\u6027\uff0c\u7528\u4e8e\u8bbe\u7f6e\u56fe\u7247\u5927\u5c0f\u7684\u7f29\u653e\u6bd4\u4f8b</li> <li>new: \u65b0\u589e 'allowNullImage: Boolean' \u5c5e\u6027</li> </ul> <p>decode:</p> <ul> <li>change: BitmapDecoder \u548c DrawableDecoder \u5408\u5e76\u4e3a Decoder</li> <li>change: BitmapDecodeInterceptor \u548c DrawableDecodeInterceptor \u5408\u5e76\u4e3a DecodeInterceptor</li> </ul> <p>cache:</p> <ul> <li>remove: \u79fb\u9664 BitmapPool \u4ee5\u53ca\u548c\u5b83\u76f8\u5173\u7684 disallowReuseBitmap   \u5c5e\u6027\u3001CountBitmap\u3001SketchCountBitmapDrawable \u7c7b</li> <li>change: \u91cd\u6784 DiskCache SnapShot \u548c Editor\uff0cget() \u548c edit() \u6539\u4e3a openSnapShot() \u548c openEditor()   \uff0c\u5e76\u4e14\u540c\u4e00\u4e2a key \u7684 openSnapShot() \u548c openEditor() \u73b0\u5728\u662f\u4e92\u76f8\u51b2\u7a81\u7684, openSnapshot \u672a\u5173\u95ed\u524d   openEditor \u59cb\u7ec8\u8fd4\u56de null</li> <li>change: \u91cd\u6784 MemoryCache.Value</li> </ul> <p>state:</p> <ul> <li>change: ImageRequest \u548c ImageOptions \u7684 uriEmpty \u5c5e\u6027\u91cd\u547d\u540d\u4e3a fallback</li> <li>remove: \u79fb\u9664 ErrorStateImage.Builder.uriEmptyError()</li> </ul> <p>compose:</p> <ul> <li>remove: AsyncImage \u53ef\u7ec4\u5408\u51fd\u6570\u79fb\u9664 placeholder\u3001error\u3001uriEmpty\u3001onLoading\u3001onSuccess\u3001onError \u53c2\u6570</li> <li>upgrade\uff1aCompose Multiplatform \u5347\u7ea7\u5230 1.6.10</li> <li>new: AsyncImageState \u73b0\u5728\u53ef\u4ee5\u8bbe\u7f6e ImageOptions \u4e86\uff0c\u4f8b\u5982\uff1a'rememberAsyncImageState {   ImageOptions() }'</li> </ul> <p>view:</p> <ul> <li>change: displayImage \u91cd\u547d\u540d\u4e3a loadImage</li> </ul> <p>other:</p> <ul> <li>upgrade\uff1aAndroid \u6700\u4f4e API \u5347\u5230\u4e86 API 21</li> <li>upgrade\uff1akotlin \u5347\u7ea7\u5230 2.0.0\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u652f\u6301 Compose Multiplatform 1.6.10</li> </ul>"},{"location":"zh/animated_image/","title":"\u52a8\u56fe","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u63d0\u4f9b\u4e86 <code>sketch-animated-*</code> \u7cfb\u5217\u6a21\u5757\u4ee5\u652f\u6301\u52a8\u56fe\uff0c\u6240\u652f\u6301\u7684\u5e73\u53f0\u4ee5\u53ca\u5dee\u5f02\u5982\u4e0b\uff1a</p> Module DecoderProvider Decoder Android iOS Desktop Web sketch-animated-gif GifDecoderProvider android api 28+: ImageDecoderGifDecoderandroid api 27-: MovieGifDecodernon android: SkiaGifDecoder \u2705 \u2705 \u2705 \u2705 sketch-animated-gif-koral KoralGifDecoderProvider KoralGifDecoder \u2705 \u274c \u274c \u274c sketch-animated-webp AnimatedWebpDecoderProvider android api 28+: ImageDecoderAnimatedWebpDecoderandroid api 27-: Not supportednon android: SkiaAnimatedWebpDecoder \u2705(API 28) \u2705 \u2705 \u2705 sketch-animated-heif ImageDecoderAnimatedHeifDecoderProvider ImageDecoderAnimatedHeifDecoder \u2705(API 30) \u274c \u274c \u274c <p>[!TIP] sketch-animated-webp \u6a21\u5757\u81ea\u5e26\u7684 webp \u52a8\u56fe\u89e3\u7801\u5668\u4e0d\u652f\u6301 android api 27 \u53ca\u4ee5\u4e0b\u7248\u672c\uff0c\u5982\u679c\u6709\u9700\u8981\u8bf7\u53c2\u8003 sample \u4e2d\u7684 PenfeizhouAnimatedWebpDecoder \u5e76\u7ed3\u5408 https://github.com/penfeizhou/APNG4Android \u5e93\u4e3a android api 27 \u53ca\u4ee5\u4e0b\u7248\u672c\u63d0\u4f9b\u652f\u6301</p>"},{"location":"zh/animated_image/#_2","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p>\u52a0\u8f7d\u52a8\u56fe\u524d\u9700\u8981\u5148\u4ece\u4e0a\u8ff0\u7ec4\u4ef6\u4e2d\u9009\u62e9\u4e00\u4e2a\u5e76\u5b89\u88c5\u4f9d\u8d56\uff0c\u4ee5 <code>sketch-animated-gif</code> \u4e3a\u4f8b\uff1a</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-animated-gif:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] \u4e0a\u8ff0\u7ec4\u4ef6\u90fd\u652f\u6301\u81ea\u52a8\u6ce8\u518c\uff0c\u4f60\u53ea\u9700\u8981\u5bfc\u5165\u5373\u53ef\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\uff0c\u5982\u679c\u4f60\u9700\u8981\u624b\u52a8\u6ce8\u518c\uff0c \u8bf7\u9605\u8bfb\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/animated_image/#_3","title":"\u52a0\u8f7d\u52a8\u56fe","text":"<p>\u76f4\u63a5\u6307\u5b9a uri \u52a0\u8f7d\u56fe\u7247\u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val imageUri = \"https://www.sample.com/image.gif\"\n\n// compose\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\n// view\nimageView.loadImage(imageUri)\n</code></pre>"},{"location":"zh/animated_image/#_4","title":"\u914d\u7f6e","text":"<p><code>sketch-animated-core</code> \u6a21\u5757\u4e3a ImageRequest \u548c ImageOptions \u4e00\u4e9b\u6269\u5c55\u65b9\u6cd5\u7528\u4e8e\u52a8\u56fe\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.gif\") {\n    // \u7981\u7528\u52a8\u56fe\uff0c\u53ea\u89e3\u7801\u52a8\u56fe\u7684\u7b2c\u4e00\u5e27\n    disallowAnimatedImage()\n\n    // \u914d\u7f6e\u52a8\u56fe\u91cd\u590d\u64ad\u653e 1 \u6b21\u5c31\u505c\u6b62\uff0c\u9ed8\u8ba4\u65e0\u9650\u5faa\u73af\u64ad\u653e\n    repeatCount(1)\n\n    // \u76d1\u542c\u52a8\u56fe\u5f00\u59cb\u548c\u505c\u6b62\u64ad\u653e\n    onAnimationStart {\n        // ...\n    }\n    onAnimationEnd {\n        // ...\n    }\n\n    // \u5bf9\u52a8\u56fe\u7684\u6bcf\u4e00\u5e27\u5728\u7ed8\u5236\u65f6\u5728\u52a8\u56fe\u7684\u524d\u666f\u7ed8\u5236\u5185\u5bb9\n    animatedTransformation { canvas: Any -&gt;\n        if (canvas is androidx.compose.ui.graphics.Canvas) {\n            // ...\n        } else if (canvas is android.graphics.Canvas) {\n            // ...\n        }\n    }\n}\n</code></pre>"},{"location":"zh/animated_image/#_5","title":"\u63a7\u5236\u64ad\u653e","text":"<p>\u52a8\u56fe\u76f8\u5173\u7684 Decoder \u7edf\u4e00\u8fd4\u56de AnimatableDrawable \u6216 AnimatablePainter\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u7684 start() \u548c stop() \u65b9\u6cd5\u63a7\u5236\u64ad\u653e\uff0c\u901a\u8fc7 isRunning() \u65b9\u6cd5\u5224\u65ad\u64ad\u653e\u72b6\u6001</p>"},{"location":"zh/animated_image/#_6","title":"\u521d\u59cb\u72b6\u6001","text":"<p>\u52a8\u56fe\u7684\u521d\u59cb\u72b6\u6001\u7531 GenericViewTarget \u548c GenericComposeTarget \u6765\u63a7\u5236\uff0c\u5728\u5c06\u52a8\u56fe\u663e\u793a\u5230 Target \u4e0a\u4e4b\u540e\u4f1a\u68c0\u67e5 ImageRequest.lifecycle \u7684\u72b6\u6001\uff0c\u5982\u679c lifecycle \u7684\u72b6\u6001\u5927\u4e8e start \u5c31\u5f00\u59cb\u64ad\u653e\uff0c\u5426\u5219\u5c31\u7b49\u5230 lifecycle \u7684\u72b6\u6001\u53d8\u4e3a start \u518d\u64ad\u653e</p>"},{"location":"zh/animated_image/#_7","title":"\u81ea\u52a8\u63a7\u5236","text":"<p>GenericViewTarget \u548c GenericComposeTarget \u4f1a\u76d1\u542c ImageRequest.lifecycle \u7684 start \u548c stop \u72b6\u6001\u81ea\u52a8\u63a7\u5236\u64ad\u653e</p>"},{"location":"zh/animated_image/#_8","title":"\u7f13\u5b58\u89e3\u7801\u8d85\u65f6\u5e27","text":"<p>Sketch \u5728\u975e Android \u5e73\u53f0\u4f7f\u7528 skiko \u7684 Codec \u89e3\u7801\u52a8\u56fe\uff0c\u4f46 Codec \u5728\u8d8a\u9760\u8fd1\u52a8\u56fe\u672b\u5c3e\u7684\u5e27\u65f6\u89e3\u7801\u8d8a\u6162</p> <p>\u5f53\u89e3\u7801\u8017\u65f6\u8d85\u8fc7\u4e0a\u4e00\u5e27\u7684\u6301\u7eed\u65f6\u95f4\u65f6\u7528\u6237\u5c31\u4f1a\u611f\u89c9\u5230\u64ad\u653e\u5361\u987f\uff0c\u56e0\u6b64\u4e3a\u4e86\u63d0\u9ad8\u64ad\u653e\u6d41\u7545\u5ea6\uff0cSketch \u652f\u6301\u4e86\u7f13\u5b58\u89e3\u7801\u8d85\u65f6\u5e27\u529f\u80fd</p> <p>\u4f46\u6b64\u529f\u80fd\u4f1a\u5927\u5e45\u589e\u52a0\u5185\u5b58\u6d88\u8017\uff0c\u56e0\u6b64\u9ed8\u8ba4\u5173\u95ed\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 cacheDecodeTimeoutFrame() \u51fd\u6570\u5f00\u542f\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.gif\") {\n    cacheDecodeTimeoutFrame(true)\n}\n</code></pre>"},{"location":"zh/apk_app_icon/","title":"\u52a0\u8f7d Apk \u6216\u5df2\u5b89\u88c5 App \u7684\u56fe\u6807","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/apk_app_icon/#apk","title":"\u52a0\u8f7d Apk \u56fe\u6807","text":"<p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-apkicon:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u52a0\u8f7d\u56fe\u7247\u65f6\u76f4\u63a5\u4f20\u5165 apk \u6587\u4ef6\u7684\u8def\u5f84\u5373\u53ef\uff1a</p> <pre><code>sketch.enqueue(ImageRequest(context, uri = \"/sdcard/sample.apk\"))\n</code></pre> <p>[!IMPORTANT] 1. <code>sketch-extensions-apkicon</code>      \u6a21\u5757\u652f\u6301\u81ea\u52a8\u6ce8\u518c\u7ec4\u4ef6\uff0c\u6709\u5173\u7ec4\u4ef6\u6ce8\u518c\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u67e5\u770b\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b 2. \u4ec5\u652f\u6301 Android \u5e73\u53f0</p>"},{"location":"zh/apk_app_icon/#app","title":"\u52a0\u8f7d\u5df2\u5b89\u88c5 App \u7684\u56fe\u6807","text":"<p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-appicon:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u52a0\u8f7d\u56fe\u7247\u65f6\u4f7f\u7528 <code>newAppIconUri()</code> \u51fd\u6570\u521b\u5efa\u4e13\u7528 uri \u5373\u53ef</p> <pre><code>// app.icon://com.github.panpf.sketch.sample/1\nval appIconUri = newAppIconUri(packageName = \"com.github.panpf.sketch.sample\", versionCode = 1)\nsketch.enqueue(ImageRequest(context, uri = appIconUri))\n</code></pre> <p>[!IMPORTANT] 1. versionCode\uff1aApp \u7684\u7248\u672c\u53f7\u3002\u5fc5\u987b\u4f20\u5165\u6b63\u786e\u7684\u7248\u672c\u53f7\uff0c\u56e0\u4e3a\u5bf9\u56fe\u6807\u8fdb\u884c\u4fee\u6539\u65f6\u5c31\u4f1a\u5c06\u4fee\u6539\u540e\u7684\u56fe\u6807\u7f13\u5b58\u5728\u78c1\u76d8\u4e0a\uff0c\u5982\u679c\u53ea\u7528      packageName \u4f5c\u4e3a\u7f13\u5b58 key \u90a3\u4e48 App \u7248\u672c\u66f4\u65b0\u540e\u56fe\u6807\u5373\u4f7f\u6539\u53d8\u4e86\u7f13\u5b58\u4e5f\u4e0d\u4f1a\u5237\u65b0 2. <code>sketch-extensions-appicon</code>      \u6a21\u5757\u652f\u6301\u81ea\u52a8\u6ce8\u518c\u7ec4\u4ef6\uff0c\u6709\u5173\u7ec4\u4ef6\u6ce8\u518c\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u67e5\u770b\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b 3. \u4ec5\u652f\u6301 Android \u5e73\u53f0</p>"},{"location":"zh/blurhash/","title":"BlurHash","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>BlurHash \u662f\u4e00\u79cd\u7528\u4e8e\u751f\u6210\u6a21\u7cca\u56fe\u50cf\u5360\u4f4d\u7b26\u7684\u7b97\u6cd5\u3002\u5b83\u53ef\u4ee5\u5c06\u56fe\u50cf\u538b\u7f29\u4e3a\u4e00\u4e2a\u77ed\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u56fe\u50cf\u7684\u6a21\u7cca\u7248\u672c\u3002\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728\u52a0\u8f7d\u5b9e\u9645\u56fe\u50cf\u4e4b\u524d\u663e\u793a\uff0c\u4ee5\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c\u3002</p> <ul> <li>Github\uff1ahttps://github.com/woltapp/blurhash</li> </ul> <p>Sketch \u96c6\u6210\u4e86 BlurHash\uff0c\u8ba9\u4f60\u53ef\u4ee5\u65b9\u4fbf\u7684\u5728\u5360\u4f4d\u56fe\u6216\u5176\u5b83\u9700\u8981\u6a21\u7cca\u56fe\u50cf\u7684\u5730\u65b9\u4f7f\u7528\u3002</p>"},{"location":"zh/blurhash/#_1","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-blurhash:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] <code>sketch-blurhash</code> \u6a21\u5757\u652f\u6301\u81ea\u52a8\u6ce8\u518c\u7ec4\u4ef6\uff0c\u6709\u5173\u7ec4\u4ef6\u6ce8\u518c\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u67e5\u770b\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/blurhash/#_2","title":"\u5728\u5360\u4f4d\u56fe\u4e2d\u4f7f\u7528","text":"<pre><code>ImageRequest(context, \"https://www.example.com/image.svg\") {\n    placeholder(\n        BlurHashStateImage(\n            blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n            size = Size(200, 300)\n        )\n    )\n    // or\n    blurHashPlaceholder(\n        blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n        size = Size(200, 300)\n    )\n\n    // \u8fd8\u53ef\u4ee5\u901a\u8fc7 uri \u7684\u65b9\u5f0f\u4f20\u9012\u5927\u5c0f\n    blurHashPlaceholder(\n        blurHash = newBlurHashUri(\n            blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n            size = Size(200, 300)\n        )\n    )\n\n    // \u8fd8\u53ef\u4ee5\u901a\u8fc7 maxSide \u5c5e\u6027\u9650\u5236\u5927\u5c0f\uff0cBlurHashStateImage \u4f1a\u7b49\u6bd4\u7f29\u653e\u6a21\u7cca\u56fe\u50cf\n    blurHashPlaceholder(\n        blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n        size = Size(200, 300),\n        maxSide = 100\n    )\n\n    // BlurHashStateImage \u4f1a\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\u52a0\u901f\u89e3\u7801\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 cachePolicy \u5c5e\u6027\u63a7\u5236 BlurHashStateImage \u4f7f\u7528\u5185\u5b58\u7f13\u5b58\n    blurHashPlaceholder(\n        blurHash = \"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\",\n        size = Size(200, 300),\n        maxSide = 100,\n        cachePolicy = CachePolicy.DISABLED\n    )\n\n    // fallback \u548c error \u4e5f\u53ef\u4ee5\u4f7f\u7528 BlurHashStateImage\n}\n</code></pre> <p>[!IMPORTANT] 1. \u4f60\u9700\u8981\u4e3a BlurHashStateImage \u6307\u5b9a\u4e00\u4e2a\u548c\u539f\u56fe\u4e00\u6837\u9ad8\u5bbd\u6bd4\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5927\u5c0f\uff08100x100\uff09\uff0c\u5bbd\u9ad8\u6bd4\u4e0d\u4e00\u81f4\u4f1a\u5bfc\u81f4\u6a21\u7cca\u56fe\u50cf\u53d8\u5f62\u3002 2. BlurHash \u5728 UI \u7ebf\u7a0b\u4e2d\u89e3\u7801\u751f\u6210 Bitmap\uff0c\u6240\u4ee5\u8981\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u8f83\u5c0f\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5c06\u4f1a\u9020\u6210\u5361\u987f\u3002</p>"},{"location":"zh/blurhash/#_3","title":"\u89e3\u7801\u540e\u4f5c\u4e3a\u56fe\u7247\u4f7f\u7528","text":"<pre><code>val blurHashUri = newBlurHashUri(\"d7D+0q5W00^h01~A~B0gInR%?G9vR%R+NH=_I;NG$$-o\", Size(200, 300))\nImageRequest(context, blurHashUri) {\n    colorType(\"RGB_565\")\n    colorSpace(\"DISPLAY_P3\")\n}\n</code></pre> <p>[!IMPORTANT] \u4f60\u9700\u8981\u5728 uri \u4e2d\u6307\u5b9a\u4e00\u4e2a\u548c\u539f\u56fe\u4e00\u6837\u9ad8\u5bbd\u6bd4\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5927\u5c0f\uff08100x100\uff09\uff0c\u5bbd\u9ad8\u6bd4\u4e0d\u4e00\u81f4\u4f1a\u5bfc\u81f4\u6a21\u7cca\u56fe\u50cf\u53d8\u5f62\u3002</p>"},{"location":"zh/compose/","title":"Compose","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/compose/#asyncimage","title":"AsyncImage","text":"<p>AsyncImage \u662f\u4e00\u4e2a\u5f02\u6b65\u6267\u884c\u56fe\u7247\u8bf7\u6c42\u5e76\u5448\u73b0\u7ed3\u679c\u7684\u53ef\u7ec4\u5408\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\u52a0\u8f7d\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// val imageUri = \"/Users/my/Downloads/image.jpg\"\n// val imageUri = file:///compose_resource/composeResources/com.github.panpf.sketch.sample.resources/files/sample.png\nval imageUri = \"https://example.com/image.jpg\"\n\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n     uri = imageUri,\n     state = rememberAsyncImageState(ComposableImageOptions {\n          placeholder(Res.drawable.placeholder)\n          error(Res.drawable.error)\n          crossfade()\n          // There is a lot more...\n     }),\n     contentDescription = \"photo\"\n)\n\nAsyncImage(\n    rqeuest = ComposableImageRequest(imageUri) {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    },\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] <code>placeholder(Res.drawable.placeholder)</code> \u9700\u8981\u5bfc\u5165 <code>sketch-compose-resources</code> \u6a21\u5757</p>"},{"location":"zh/compose/#subcomposeasyncimage","title":"SubcomposeAsyncImage","text":"<p>SubcomposeAsyncImage \u662f AsyncImage \u7684\u53d8\u4f53\uff0c\u5b83\u5141\u8bb8\u4f60\u5b8c\u5168\u81ea\u4e3b\u7684\u7ed8\u5236\u5185\u5bb9\uff0c\u5982\u4e0b\uff1a</p> <pre><code>SubcomposeAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    loading = {\n        Text(\"Loading\")\n    },\n    contentDescription = \"photo\"\n)\n\nSubcomposeAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    contentDescription = \"photo\",\n    content = {\n         when (state.painterState) {\n              is PainterState.Loading -&gt; {\n                   Text(\"Loading\")\n              }\n              is PainterState.Error -&gt; {\n                   Text(\"Error\")\n              }\n              else -&gt; {\n                   Image(\n                        painter = painter,\n                        contentDescription = \"photo\"\n                   )\n              }\n         }\n    }\n)\n</code></pre> <p>!TIP \u7684\u6027\u80fd\u53ef\u80fd\u4e0d\u5982 AsyncImage\uff0c\u56e0\u6b64\u8fd9\u79cd\u7ec4\u5408\u53ef\u80fd\u4e0d\u9002\u5408\u5bf9\u6027\u80fd\u81f3\u5173\u91cd\u8981\u7684\u5217\u8868\u90e8\u5206</p>"},{"location":"zh/compose/#asyncimagepainter","title":"AsyncImagePainter","text":"<p>\u5982\u679c\u4f60\u5fc5\u987b\u4f7f\u7528 Image \u7ec4\u4ef6\uff0c\u90a3\u4e48\u4f60\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 AsyncImagePainter \u6765\u52a0\u8f7d\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> <pre><code>Image(\n    painter = rememberAsyncImagePainter(uri = \"https://example.com/image.jpg\"),\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(\n        rqeuest = ComposableImageRequest(\"https://example.com/image.jpg\") {\n            placeholder(Res.drawable.placeholder)\n            error(Res.drawable.error)\n            crossfade()\n            // There is a lot more...\n        }\n    ),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] 1. <code>Image + AsyncImagePainter</code> \u4f1a\u6bd4 AsyncImage \u4f1a\u7565\u6162\u4e00\u4e9b\uff0c\u8fd9\u662f\u7531\u4e8e [Sketch]      \u4f9d\u8d56\u7ec4\u4ef6\u7684\u786e\u5207\u5927\u5c0f\u624d\u4f1a\u5f00\u59cb\u52a0\u8f7d\u56fe\u7247\uff0cAsyncImage      \u5728\u5e03\u5c40\u9636\u6bb5\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u7ec4\u4ef6\u7684\u5927\u5c0f\uff0c\u800c <code>Image + AsyncImagePainter</code> \u5219\u662f\u8981\u7b49\u5230\u7ed8\u5236\u9636\u6bb5\u624d\u80fd\u83b7\u53d6\u5230\u7ec4\u4ef6\u5927\u5c0f\u3002 2. \u5982\u679c\u5728 Image \u4e0a\u4fee\u6539\u4e86 contentScale\uff0c\u5219\u4e5f\u8981\u540c\u6b65\u4fee\u6539 rememberAsyncImagePainter \u7684 contentScale 3. <code>placeholder(Res.drawable.placeholder)</code> \u9700\u8981\u5bfc\u5165 <code>sketch-compose-resources</code> \u6a21\u5757</p>"},{"location":"zh/compose/#asyncimagestate","title":"AsyncImageState","text":"<p>AsyncImageState \u662f AsyncImage \u548c AsyncImagePainter \u7684\u6838\u5fc3\u3002AsyncImageState \u8d1f\u8d23\u6267\u884c ImageRequest \u548c\u7ba1\u7406\u72b6\u6001\uff0cAsyncImagePainter \u8d1f\u8d23\u4ece AsyncImageState \u8bfb\u53d6 Painter \u5e76\u7ed8\u5236\uff0cAsyncImage \u8d1f\u8d23\u5e03\u5c40</p> <p>\u4f60\u53ef\u4ee5\u4ece AsyncImageState \u8bfb\u53d6\u8bf7\u6c42\u7684\u72b6\u6001\u3001\u8fdb\u5ea6\u3001Painter\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5176 restart() \u65b9\u6cd5\u91cd\u65b0\u52a0\u8f7d\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    contentDescription = \"photo\",\n    state = state,\n)\n\nval result: ImageResult? = state.result\nval loadState: LoadState? = state.loadState\nval request: ImageRequest = loadState.request\nwhen (loadState) {\n    is Started -&gt; {\n\n    }\n    is Success -&gt; {\n        val memoryCacheKey: String = loadState.result.memoryCacheKey \n        val resultCacheKey: String = loadState.result.resultCacheKey\n        val downloadCacheKey: String = loadState.result.downloadCacheKey\n        val imageInfo: ImageInfo = loadState.result.imageInfo\n        val dataFrom: DataFrom = loadState.result.dataFrom\n        val resize: Resize = loadState.result.resize\n        val transformeds: List&lt;String&gt;? = loadState.result.transformeds\n        val extras: Map&lt;String, String&gt;? = loadState.result.extras\n    }\n    is Error -&gt; {\n        val throwable: Throwable = loadState.result.throwable\n    }\n    is Canceled -&gt; {}\n    else -&gt; {\n        // null\n    }\n}\nval progress: Progress? = state.progress\nval painterState: PainterState = state.painterState\nwhen (painterState) {\n    is Loading -&gt; {}\n    is Success -&gt; {}\n    is Error -&gt; {}\n}\nval painter: Painter? = state.painter\n\n// \u91cd\u65b0\u52a0\u8f7d\nstate.restart()\n</code></pre>"},{"location":"zh/compose/#listenerprogresslistener","title":"listener/progressListener","text":"<p>\u5728\u4f7f\u7528 AsyncImage\u3001SubcomposeAsyncImage \u4ee5\u53ca AsyncImagePainter \u65f6\u4f60\u4e0d\u80fd\u8c03\u7528 ImageRequest \u7684 addListener()\u3001addProgressListener() \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u5bfc\u81f4 App \u5d29\u6e83</p> <p>\u539f\u56e0\u662f Listener\u3001ProgressListener \u5728\u4f7f\u7528\u7684\u65f6\u5019\u65f6\u90fd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u662f\u76f4\u63a5 new \u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b\uff0c\u8fd9\u4f1a\u5bfc\u81f4 ImageRequest \u7684 equals \u7ed3\u679c\u662f false \u800c\u89e6\u53d1\u91cd\u7ec4\uff0c\u4ece\u800c\u964d\u4f4e\u6027\u80fd</p> <p>\u56e0\u6b64\u4f60\u5fc5\u987b\u7528 AsyncImageState \u7684 loadState \u548c progress \u5c5e\u6027\u6765\u4ee3\u66ff addListener() \u3001addProgressListener()</p>"},{"location":"zh/compose/#target","title":"Target","text":"<p>\u5728\u4f7f\u7528 AsyncImage\u3001SubcomposeAsyncImage \u4ee5\u53ca AsyncImagePainter \u65f6\u4f60\u4e0d\u80fd\u8c03\u7528 ImageRequest \u7684 target() \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u5bfc\u81f4 App \u5d29\u6e83\uff0c\u56e0\u4e3a Target \u5fc5\u987b\u7531 AsyncImageState \u914d\u7f6e</p>"},{"location":"zh/decode_interceptor/","title":"DecodeInterceptor","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u7684\u89e3\u7801\u8fc7\u7a0b\u652f\u6301\u901a\u8fc7\u62e6\u622a\u5668\u6765\u6539\u53d8\u89e3\u7801\u524d\u540e\u7684\u8f93\u5165\u548c\u8f93\u51fa</p> <p>\u5148\u5b9e\u73b0 DecodeInterceptor \u63a5\u53e3\u5b9e\u73b0\u4f60\u7684 DecodeInterceptor\uff0c\u7136\u540e\u901a\u8fc7 addDecodeInterceptor() \u65b9\u6cd5\u6ce8\u518c\u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>class MyDecodeInterceptor : DecodeInterceptor {\n\n    // \u5982\u679c\u5f53\u524d DecodeInterceptor \u4f1a\u4fee\u6539\u8fd4\u56de\u7684\u7ed3\u679c\u5e76\u4e14\u4ec5\u7528\u4e8e\u90e8\u5206\u8bf7\u6c42\uff0c\u90a3\u4e48\u8bf7\u7ed9\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684 key \u7528\u4e8e\u6784\u5efa\u7f13\u5b58 key\uff0c\u5426\u5219\u7ed9 null \u5373\u53ef\n    override val key: String = \"MyDecodeInterceptor\"\n\n    // \u7528\u4e8e\u6392\u5e8f\uff0c\u503c\u8d8a\u5927\u5728\u5217\u8868\u4e2d\u8d8a\u9760\u540e\u3002\u53d6\u503c\u8303\u56f4\u662f 0 ~ 100\u3002\u901a\u5e38\u662f\u96f6\u3002\u53ea\u6709 EngineDecodeInterceptor \u53ef\u4ee5\u662f 100\n    override val sortWeight: Int = 0\n\n    @WorkerThread\n    override suspend fun intercept(\n        chain: DecodeInterceptor.Chain,\n    ): Result&lt;DecodeResult&gt; {\n        val newRequest = chain.request.newRequest {\n            colorType(Bitmap.Config.RGB_565)\n        }\n        return chain.proceed(newRequest)\n    }\n}\n\n// \u5728\u81ea\u5b9a\u4e49 Sketch \u65f6\u4e3a\u6240\u6709 ImageRequest \u6ce8\u518c\nSketch.Builder(context).apply {\n    components {\n        addDecodeInterceptor(MyDecodeInterceptor())\n    }\n}.build()\n\n// \u52a0\u8f7d\u56fe\u7247\u65f6\u4e3a\u5355\u4e2a ImageRequest \u6ce8\u518c\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addDecodeInterceptor(MyDecodeInterceptor())\n    }\n}\n</code></pre> <p>[!TIP] 1. MyDecodeInterceptor \u6f14\u793a\u4e86\u4e00\u4e2a\u5c06\u6240\u6709\u8bf7\u6c42\u7684 Bitmap.Config \u6539\u4e3a RGB_565 \u7684\u6848\u4f8b 2. \u5982\u679c\u4f60\u60f3\u4fee\u6539\u8fd4\u56de\u7ed3\u679c\uff0c\u5c31\u62e6\u622a proceed \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 DecodeResult \u5373\u53ef 3. \u5982\u679c\u60f3\u4e0d\u518d\u6267\u884c\u8bf7\u6c42\u53ea\u9700\u4e0d\u6267\u884c proceed \u65b9\u6cd5\u5373\u53ef</p>"},{"location":"zh/decoder/","title":"Decoder","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Decoder \u7528\u4e8e\u89e3\u7801\u56fe\u7247\u6587\u4ef6\uff0c\u652f\u6301\u7684\u6bcf\u4e00\u79cd\u56fe\u7247\u7c7b\u578b\u90fd\u6709\u5bf9\u5e94\u7684 Decoder \u5b9e\u73b0\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> Format Decoder Dependent modules Android iOS Desktop Web jpeg BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c jpeg SkiaDecoder - \u274c \u2705 \u2705 \u2705 png BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c png SkiaDecoder - \u274c \u2705 \u2705 \u2705 webp BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c webp SkiaDecoder - \u274c \u2705 \u2705 \u2705 bmp BitmapFactoryDecoder - \u2705 \u274c \u274c \u274c bmp SkiaDecoder - \u274c \u2705 \u2705 \u2705 heif BitmapFactoryDecoder - \u2705 (API 28) \u274c \u274c \u274c avif BitmapFactoryDecoder - \u2705 (API 31) \u274c \u274c \u274c gif ImageDecoderGifDecoder sketch-animated-gif \u2705 (API 28) \u274c \u274c \u274c gif MovieGifDecoder(\u4e0d\u652f\u6301 resize) sketch-animated-gif \u2705 \u274c \u274c \u274c gif SkiaGifDecoder(\u4e0d\u652f\u6301 resize) sketch-animated-gif \u274c \u2705 \u2705 \u2705 gif KoralGifDecoder sketch-animated-gif-koral \u2705 \u274c \u274c \u274c webp \u52a8\u56fe ImageDecoderAnimatedWebpDecoder sketch-animated-webp \u2705 (API 28) \u274c \u274c \u274c webp \u52a8\u56fe SkiaAnimatedWebpDecoder(\u4e0d\u652f\u6301 resize) sketch-animated-webp \u274c \u2705 \u2705 \u2705 heif \u52a8\u56fe ImageDecoderAnimatedHeifDecoder sketch-animated-heif \u2705 (API 30) \u274c \u274c \u274c svg SvgDecoder sketch-svg \u2705 \u2705(\u4e0d\u652f\u6301 CSS) \u2705(\u4e0d\u652f\u6301 CSS) \u2705(\u4e0d\u652f\u6301 CSS) \u89c6\u9891\u5e27 VideoFrameDecoder sketch-video \u2705 \u274c \u274c \u274c \u89c6\u9891\u5e27 FFmpegVideoFrameDecoder sketch-video-ffmpeg \u2705 \u274c \u274c \u274c BlurHash BlurHashDecoder sketch-blurhash \u2705 \u2705 \u2705 \u2705 Apk Icon ApkIconDecoder sketch-extensions-core \u2705 \u274c \u274c \u274c <ul> <li>ApkIconDecoder \u5728 Android \u5e73\u53f0\u4e0a\u89e3\u7801 Apk   \u6587\u4ef6\u7684\u56fe\u6807\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>BitmapFactoryDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Android \u5185\u7f6e\u7684 BitmapFactory \u89e3\u7801\u56fe\u7247\uff0c\u5b83\u662f\u6700\u540e\u7684\u89e3\u7801\u5668</li> <li>DrawableDecoder \u5728 Android \u5e73\u53f0\u4e0a\u89e3\u7801 vector\u3001shape \u7b49 Android \u652f\u6301\u7684 xml drawable \u56fe\u7247</li> <li>ImageDecoderGifDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Android \u5185\u7f6e\u7684 ImageDecoder \u89e3\u7801 gif   \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>KoralGifDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 koral-- \u7684 android-gif-drawable   \u5e93\u89e3\u7801 gif \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>MovieGifDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Android \u5185\u7f6e\u7684 Movie \u89e3\u7801 gif   \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>SkiaGifDecoder \u5728\u975e Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Skia \u5185\u7f6e\u7684 Codec \u89e3\u7801 gif   \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>ImageDecoderAnimatedHeifDecoder \u4f7f\u7528 Android \u5185\u7f6e\u7684 ImageDecoder \u89e3\u7801 heif   \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>SkiaDecoder \u5728\u975e Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Skia \u5185\u7f6e\u7684 Image \u89e3\u7801\u56fe\u7247\uff0c\u5b83\u662f\u6700\u540e\u7684\u89e3\u7801\u5668</li> <li>SvgDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 BigBadaboom \u7684 androidsvg \u5e93\uff0c\u5728\u975e Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Skia \u5185\u7f6e\u7684   SVGDOM \u89e3\u7801\u9759\u6001 svg \u6587\u4ef6\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>ImageDecoderAnimatedWebpDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Android \u5185\u7f6e\u7684 ImageDecoder \u89e3\u7801 webp   \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>SkiaAnimatedWebpDecoder \u5728\u975e Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Skia \u5185\u7f6e\u7684 Codec \u89e3\u7801 webp   \u52a8\u56fe\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>VideoFrameDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 Android \u5185\u7f6e\u7684 MediaMetadataRetriever   \u7c7b\u89e3\u7801\u89c6\u9891\u6587\u4ef6\u7684\u5e27\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>FFmpegVideoFrameDecoder \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528 wseemann \u7684 FFmpegMediaMetadataRetriever   \u5e93\u89e3\u7801\u89c6\u9891\u5e27\uff08\u4e86\u89e3\u66f4\u591a\uff09</li> <li>BlurHashDecoder \u4ece BlurHash \u5b57\u7b26\u4e32\u89e3\u7801\u6a21\u7cca\u56fe\u50cf \uff08\u4e86\u89e3\u66f4\u591a\uff09</li> </ul> <p>[!IMPORTANT] \u4e0a\u8ff0\u7ec4\u4ef6\u90fd\u652f\u6301\u81ea\u52a8\u6ce8\u518c\uff0c\u4f60\u53ea\u9700\u8981\u5bfc\u5165\u5373\u53ef\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\uff0c\u5982\u679c\u4f60\u9700\u8981\u624b\u52a8\u6ce8\u518c\uff0c \u8bf7\u9605\u8bfb\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/decoder/#decoder_1","title":"\u6269\u5c55 Decoder","text":"<p>\u5148\u5b9e\u73b0 Decoder \u63a5\u53e3\u5b9a\u4e49\u4f60\u7684 Decoder \u548c\u5b83\u7684 Factory</p> <p>\u7136\u540e\u53c2\u8003\u6587\u6863 \u300a\u6ce8\u518c\u7ec4\u4ef6\u300b \u6ce8\u518c\u4f60\u7684 Decoder \u5373\u53ef</p> <p>[!CAUTION] 1. \u81ea\u5b9a\u4e49 Decoder \u9700\u8981\u5e94\u7528 ImageRequest \u4e2d\u7684\u5f88\u591a\u4e0e\u56fe\u7247\u8d28\u91cf\u548c\u5c3a\u5bf8\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u4f8b\u5982      size\u3001colorType\u3001colorSpace \u7b49\uff0c\u53ef\u53c2\u8003\u5176\u5b83 Decoder \u5b9e\u73b0 2. \u5982\u679c\u4f60\u7684 Decoder \u662f\u89e3\u7801\u52a8\u56fe\u7684\u8bdd\u4e00\u5b9a\u8981\u5224\u65ad ImageRequest.disallowAnimatedImage \u53c2\u6570</p>"},{"location":"zh/decoder/#_1","title":"\u89e3\u7801\u5c5e\u6027","text":""},{"location":"zh/decoder/#bitmapcolortype","title":"BitmapColorType","text":"<p>BitmapColorType \u7528\u4e8e\u8bbe\u7f6e\u4f4d\u56fe\u7684\u989c\u8272\u7c7b\u578b\uff0c\u53ef\u9009\u503c\u6709\uff1a</p> <ul> <li>FixedColorType\uff1a\u59cb\u7ec8\u4f7f\u7528\u6307\u5b9a\u7684\u989c\u8272\u7c7b\u578b</li> <li>LowQualityColorType\uff1a\u4f18\u5148\u4f7f\u7528\u4f4e\u8d28\u91cf\u7684\u989c\u8272\u7c7b\u578b</li> <li>Android \u5e73\u53f0\u4e0a jpeg \u56fe\u7247\u4f7f\u7528 RGB_565\uff0c\u5176\u5b83\u4f7f\u7528\u9ed8\u8ba4\u503c</li> <li>\u975e Android \u5e73\u53f0\u4e0a jpeg \u548c webp \u56fe\u7247\u4f7f\u7528 RGB_565\uff0c\u5176\u5b83\u4f7f\u7528 ARGB_4444</li> <li>HighQualityColorType\uff1a\u4f18\u5148\u4f7f\u7528\u9ad8\u8d28\u91cf\u7684\u989c\u8272\u7c7b\u578b</li> <li>Android \u5e73\u53f0\u4e0a API 26 \u4ee5\u4e0a\u4f7f\u7528 RGBA_F16\uff0c\u5176\u5b83\u4f7f\u7528\u9ed8\u8ba4\u503c</li> <li>\u975e Android \u5e73\u53f0\u4e0a\u59cb\u7ec8\u4f7f\u7528 RGBA_F16</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n  // \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528\u6307\u5b9a\u7684\u989c\u8272\u7c7b\u578b\n  colorType(Bitmap.Config.RGB_565)\n\n  // \u5728\u975e Android \u5e73\u53f0\u4e0a\u4f7f\u7528\u6307\u5b9a\u7684\u989c\u8272\u7c7b\u578b\n  colorType(ColorType.RGBA_F16)\n\n  // \u4f18\u5148\u4f7f\u7528\u4f4e\u8d28\u91cf\u7684\u989c\u8272\u7c7b\u578b\n  colorType(LowQualityColorType)\n\n  // \u4f18\u5148\u4f7f\u7528\u9ad8\u8d28\u91cf\u7684\u989c\u8272\u7c7b\u578b\n  colorType(HighQualityColorType)\n}\n</code></pre>"},{"location":"zh/decoder/#bitmapcolorspace","title":"BitmapColorSpace","text":"<p>BitmapColorSpace \u7528\u4e8e\u8bbe\u7f6e\u4f4d\u56fe\u7684\u989c\u8272\u7a7a\u95f4\uff0c\u53ef\u9009\u503c\u6709\uff1a</p> <ul> <li>FixedColorSpace\uff1a\u59cb\u7ec8\u4f7f\u7528\u6307\u5b9a\u7684\u989c\u8272\u7a7a\u95f4</li> </ul> <p>\u793a\u4f8b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n  // \u5728 Android \u5e73\u53f0\u4e0a\u4f7f\u7528\u6307\u5b9a\u7684\u989c\u8272\u7a7a\u95f4\n  colorSpace(ColorSpace.Named.DISPLAY_P3)\n\n  // \u5728\u975e Android \u5e73\u53f0\u4e0a\u4f7f\u7528\u6307\u5b9a\u7684\u989c\u8272\u7a7a\u95f4\n  colorSpace(ColorSpace.displayP3)\n}\n</code></pre>"},{"location":"zh/decoder/#preferqualityoverspeed","title":"preferQualityOverSpeed","text":"<p>preferQualityOverSpeed \u7528\u4e8e\u8bbe\u7f6e\u8d28\u91cf\u4f18\u5148\u89e3\u7801\u65f6\u8d28\u91cf\u4f18\u5148\uff0c\u53ea\u80fd\u5728 Android \u5e73\u53f0\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n  preferQualityOverSpeed(true)\n}\n</code></pre>"},{"location":"zh/download_cache/","title":"\u4e0b\u8f7d\u7f13\u5b58","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u4ece\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247\u5e76\u63d0\u9ad8\u56fe\u7247\u7684\u52a0\u8f7d\u901f\u5ea6 Sketch \u5f15\u5165\u4e86\u4e0b\u8f7d\u7f13\u5b58\uff0c\u4e0b\u8f7d\u7f13\u5b58\u529f\u80fd\u4f1a\u5148\u5c06\u56fe\u7247\u6301\u4e45\u7684\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u518d\u4ece\u78c1\u76d8\u8bfb\u53d6\uff0c\u4e0b\u6b21\u76f4\u63a5\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d6\u8df3\u8fc7\u4e0b\u8f7d\u8fc7\u7a0b\u3002</p> <p>\u4e0b\u8f7d\u7f13\u5b58\u529f\u80fd\u7531 HttpUriFetcher \u8d1f\u8d23\u6838\u5fc3\u903b\u8f91\uff0cDiskCache \u8d1f\u8d23\u5b58\u50a8\u7ba1\u7406</p> <p>DiskCache \u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f LruDiskCache\uff1a</p> <ul> <li>\u9ed8\u8ba4\u6700\u5927\u5bb9\u91cf\u662f 300 MB</li> <li>\u6839\u636e\u6700\u5c11\u4f7f\u7528\u539f\u5219\u6e05\u9664\u65e7\u7684\u7f13\u5b58</li> </ul>"},{"location":"zh/download_cache/#_2","title":"\u7f13\u5b58\u76ee\u5f55","text":"<p>\u4e3a\u4e86\u9002\u5e94\u4e0d\u540c\u5e73\u53f0\u7684\u5dee\u5f02\uff0c\u6240\u4ee5\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u7f13\u5b58\u76ee\u5f55\u7684\u4f4d\u7f6e\u4e5f\u4e0d\u4e00\u6837</p>"},{"location":"zh/download_cache/#android","title":"Android","text":"<p>\u5728 Android \u4e0a\u9ed8\u8ba4\u7684\u4e0b\u8f7d\u7f13\u5b58\u76ee\u5f55\u6309\u4ee5\u4e0b\u987a\u5e8f\u83b7\u53d6\uff1a</p> <ol> <li><code>/sdcard/Android/data/[APP_PACKAGE_NAME]/cache/sketch4/download</code></li> <li><code>/data/data/[APP_PACKAGE_NAME]/cache/sketch4/download</code></li> </ol> <p>[!TIP] \u4e3a\u4e86\u517c\u5bb9\u591a\u8fdb\u7a0b\uff0c\u5728\u975e\u4e3b\u8fdb\u7a0b\u4f7f\u7528 Sketch \u65f6\u7f13\u5b58\u76ee\u5f55\u540d\u79f0\u540e\u4f1a\u52a0\u4e0a\u8fdb\u7a0b\u540d\uff0c\u4f8b\u5982 \"download:push\"</p>"},{"location":"zh/download_cache/#ios","title":"iOS","text":"<p>\u5728 iOS \u4e0a\u9ed8\u8ba4\u7684\u4e0b\u8f7d\u7f13\u5b58\u76ee\u5f55\u662f\uff1a</p> <pre><code>val appCacheDirectory =\n    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, true).first() as String\nval downloadCacheDir = \"$appCacheDirectory/sketch4/download\"\n</code></pre>"},{"location":"zh/download_cache/#desktop","title":"Desktop","text":"<p>\u5728\u684c\u9762\u5e73\u53f0\u4e0a\u9ed8\u8ba4\u7684\u4e0b\u8f7d\u7f13\u5b58\u76ee\u5f55\u662f\uff1a</p> <pre><code>val appName = (getComposeResourcesPath() ?: getJarPath(Sketch::class.java)).md5()\n\n// macOS\n\"/Users/[user]/Library/Caches/SketchImageLoader/${appName}/sketch4/download\"\n\n// Windows\n\"C:\\\\Users\\\\[user]\\\\AppData\\\\Local\\\\SketchImageLoader\\\\${appName}\\\\sketch4/download\\\\Cache\"\n\n// Linux\n\"/home/[user]/.cache/SketchImageLoader/${appName}/sketch4/download\"\n</code></pre>"},{"location":"zh/download_cache/#web","title":"Web","text":"<p>Web \u5e73\u53f0\u5c1a\u4e0d\u652f\u6301\u4e0b\u8f7d\u7f13\u5b58</p>"},{"location":"zh/download_cache/#_3","title":"\u81ea\u5b9a\u4e49","text":"<p>\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316 Sketch \u65f6\u901a\u8fc7 Sketch.Builder \u7684 downloadCache() \u6216 downloadCacheOptions() \u65b9\u6cd5\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u7f13\u5b58\u7684\u5b9e\u73b0\u6216\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u4f7f\u7528\u9ed8\u8ba4\u7684 LruDiskCache \u5b9e\u73b0\u5e76\u914d\u7f6e\u5176\u53c2\u6570\nSketch.Builder(context).apply {\n    downloadCacheOptions(\n        DiskCache.Options(\n            // directory \u548c appCacheDirectory \u4e8c\u9009\u4e00\u5373\u53ef\n            directory = \"/tmp/myapp/sketch/download\",\n            // directory \u548c appCacheDirectory \u4e8c\u9009\u4e00\u5373\u53ef\n            appCacheDirectory = \"/tmp/myapp\",\n            // 100 MB\n            maxSize = 1024 * 1024 * 100,\n            // app \u5bf9\u4e0b\u8f7d\u7f13\u5b58\u7684\u7ba1\u7406\u7248\u672c\u53f7\uff0c\u5982\u679c\u60f3\u6e05\u9664\u65e7\u7684\u4e0b\u8f7d\u7f13\u5b58\u5c31\u5347\u7ea7\u6b64\u7248\u672c\u53f7\n            appVersion = 1,\n        )\n    )\n}.build()\n\n// \u4f7f\u7528\u4f60\u81ea\u5df1\u7684 DiskCache \u5b9e\u73b0\nclass MyDiskCache : DiskCache {\n    // ...\n}\nSketch.Builder(context).apply {\n    downloadCache(MyDiskCache())\n}.build()\n</code></pre>"},{"location":"zh/download_cache/#_4","title":"\u7f13\u5b58\u7b56\u7565","text":"<p>\u4e0b\u8f7d\u7f13\u5b58\u7b56\u7565\u7528\u4e8e\u63a7\u5236\u5982\u4f55\u4f7f\u7528\u4e0b\u8f7d\u7f13\u5b58\uff0c\u9ed8\u8ba4\u914d\u7f6e\u662f CachePolicy.ENABLED\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 ImageRequest \u6216 ImageOptions \u7684 downloadCachePolicy \u5c5e\u6027\u914d\u7f6e\u5b83:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // \u7981\u7528\n    downloadCachePolicy(CachePolicy.DISABLED)\n    // \u53ea\u8bfb\n    downloadCachePolicy(CachePolicy.READ_ONLY)\n    // \u53ea\u5199\n    downloadCachePolicy(CachePolicy.WRITE_ONLY)\n}\n</code></pre>"},{"location":"zh/download_cache/#key","title":"\u7f13\u5b58 key","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b Sketch \u4f1a\u81ea\u52a8\u6839\u636e\u8bf7\u6c42\u7684\u914d\u7f6e\u751f\u6210\u4e0b\u8f7d\u7f13\u5b58 key\uff0c\u4f46\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u5c5e\u6027\u81ea\u5b9a\u4e49\u4e0b\u8f7d\u7f13\u5b58 key\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u4e0b\u8f7d\u7f13\u5b58 key\n    downloadCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u4e0b\u8f7d\u7f13\u5b58 key\n    downloadCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n\nImageOptions {\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u4e0b\u8f7d\u7f13\u5b58 key\n    downloadCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u4e0b\u8f7d\u7f13\u5b58 key\n    downloadCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c\u83b7\u53d6\u6700\u7ec8\u7684\u4e0b\u8f7d\u7f13\u5b58 key\uff1a</p> <pre><code>// \u5728\u81ea\u5b9a\u4e49\u7684 RequestInterceptor\u3001DecodeInterceptor\u3001Transformation\u3001Fetcher\u3001Decoder \u7ec4\u4ef6\u4e2d\n// \u53ef\u4ee5\u901a\u8fc7 RequestContext \u83b7\u53d6\u4e0b\u8f7d\u7f13\u5b58 key\nval requestContext: RequestContext = ...\nrequestContext.downloadCacheKey\n\n// \u4ece ImageResult \u4e2d\u83b7\u53d6\u4e0b\u8f7d\u7f13\u5b58 key\nval imageSuccess = sketch.execute(request) as ImageResult.Success\nimageSuccess.downloadCacheKey\n</code></pre>"},{"location":"zh/download_cache/#_5","title":"\u8bfb\u5199\u7f13\u5b58","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>sketch.downloadCache</code> \u5c5e\u6027\u83b7\u53d6\u4e0b\u8f7d\u7f13\u5b58\u5b9e\u4f8b\u6765\u8bbf\u95ee\u4e0b\u8f7d\u7f13\u5b58\uff0c\u4f46\u8981\u6ce8\u610f\u5148\u83b7\u53d6\u9501\u518d\u8bbf\u95ee\uff0c\u8fd9\u6837\u80fd\u907f\u514d\u5728\u591a\u7ebf\u7a0b\u4e0b\u51fa\u95ee\u9898\uff0c\u5982\u4e0b\uff1a</p> <pre><code>scope.launch {\n    val downloadCache = sketch.downloadCache\n    val downloadCacheKey = imageRequest.downoadCacheKey\n    downloadCache.withLock(downloadCacheKey) {\n        // get\n        openSnapshot(downloadCacheKey)?.use { snapshot -&gt;\n            val dataPath: Path = snapshot.data\n            val metadataPath: Path = snapshot.metadata\n            val dataContent = fileSystem.source(dataPath).buffer().use {\n                it.readUtf8()\n            }\n            val metadataContent = fileSystem.source(metadataPath).buffer().use {\n                it.readUtf8()\n            }\n        }\n\n        // edit\n        val editor: DiskCache.Editor? = openEditor(downloadCacheKey)\n        if (editor != null) {\n            try {\n                val dataPath: Path = editor.data\n                val metadataPath: Path = editor.metadata\n                fileSystem.sink(dataPath).buffer().use {\n                    it.writeUtf8(\"data\")\n                }\n                fileSystem.sink(metadataPath).buffer().use {\n                    it.writeUtf8(\"metadata\")\n                }\n                editor.commit()\n            } catch (e: Exception) {\n                editor.abort()\n            }\n        }\n\n        // remove\n        val cleared: Boolean = remove(downloadCacheKey)\n    }\n\n    // Clear all\n    downloadCache.clear()\n}\n</code></pre> <p>[!CAUTION] 1. \u540c\u4e00\u4e2a key \u7684 openSnapshot \u548c openEditor \u662f\u4e92\u76f8\u51b2\u7a81\u7684\uff0c\u4f8b\u5982 openSnapshot \u672a\u5173\u95ed\u524d openEditor      \u59cb\u7ec8\u8fd4\u56de null\uff0c\u53cd\u4e4b\u4ea6\u7136 2. \u6240\u4ee5\u4e00\u5b9a\u8981\u5728 withLock \u91cc\u9762\u6267\u884c\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u610f\u5916</p> <p>\u66f4\u591a\u53ef\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 DiskCache</p>"},{"location":"zh/download_cache/#_6","title":"\u6e05\u9664\u7f13\u5b58","text":"<p>\u4e0b\u8f7d\u7f13\u5b58\u4f1a\u5728\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e0b\u6e05\u9664\uff1a</p> <ol> <li>\u4e3b\u52a8\u8c03\u7528 DiskCache \u7684 <code>remove()</code>\u3001clear()` \u65b9\u6cd5</li> <li>\u4e3b\u52a8\u8c03\u7528 DiskCache.Editor \u7684 <code>abort()</code> \u65b9\u6cd5</li> <li>\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u65f6\u81ea\u52a8\u6e05\u9664\u8f83\u65e7\u7684\u7f13\u5b58</li> </ol>"},{"location":"zh/download_image/","title":"\u4e0b\u8f7d\u56fe\u7247","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u63d0\u524d\u4e0b\u8f7d\u56fe\u7247\u5230\u78c1\u76d8\u7f13\u5b58\u4e2d\uff0c\u6216\u8005\u9700\u8981\u5c06\u7f51\u7edc\u56fe\u7247\u5bfc\u51fa\u5230\u76f8\u518c\u4e2d\uff0c\u8fd9\u65f6\u5019\u90fd\u9700\u8981\u5148\u4e0b\u8f7d\u56fe\u7247\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7 Sketch.enqueueDownload() \u6216 executeDownload() \u65b9\u6cd5\u6765\u4e0b\u8f7d\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val imageUri = \"https://example.com/image.jpg\"\n\nval deferred: Deferred&lt;Result&lt;DownloadData&gt;&gt; = sketch\n    .enqueueDownload(ImageRequest(context, imageUri))\nscope.launch {\n    val result = deferred.await()\n    val data: DownloadData = result.getOrNull()\n    if (data != null) {\n        // success\n        if (data is DownloadData.Cache) {\n            val path: Path = data.path\n        } else if (data is DownloadData.Bytes) {\n            val bytes: ByteArray = data.bytes\n        }\n    } else {\n        // failed\n        val throwable = result.exceptionOrNull()\n    }\n}\n\n// or\nscope.launch {\n    val result = sketch.executeDownload(ImageRequest(context, imageUri))\n    val data: DownloadData = result.getOrNull()\n    if (data != null) {\n        // success\n        if (data is DownloadData.Cache) {\n            val path: Path = data.path\n        } else if (data is DownloadData.Bytes) {\n            val bytes: ByteArray = data.bytes\n        }\n    } else {\n        // failed\n        val throwable = result.exceptionOrNull()\n    }\n}\n</code></pre> <p>[!TIP] 1. \u4f18\u5148\u8fd4\u56de DownloadData.Cache \u7c7b\u578b\u7684 DownloadData 2. Sketch.downloadCache \u4e0d\u53ef\u7528\uff08JS\uff09\u6216 ImageRequest.downloadCachePolicy.readEnabled \u4e3a false      \u65f6\u8fd4\u56de\u7684\u662f DownloadData.Bytes</p>"},{"location":"zh/exif_orientation/","title":"Exif Orientation","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u652f\u6301\u6839\u636e\u56fe\u7247\u7684 Exif \u4fe1\u606f\u6062\u590d\u56fe\u7247\u7684\u65b9\u5411\uff0c\u6b64\u529f\u80fd\u5f3a\u5236\u5f00\u542f\uff0c\u5e76\u4e14\u65e0\u6cd5\u5173\u95ed</p> <p>\u5728 Android \u4e0a\u4f9d\u8d56 <code>androidx.exifinterface:exifinterface</code> \u8bfb\u53d6 exif \u4fe1\u606f\u7136\u540e\u518d\u5728\u89e3\u7801\u65f6\u6062\u590d\u56fe\u7247\u7684\u65b9\u5411</p> <p>\u5728\u975e Android \u4e0a\u5219\u4f9d\u8d56 Skia \u81ea\u5e26\u7684\u5bf9 Exif \u7684\u652f\u6301 </p>"},{"location":"zh/fetcher/","title":"Fetcher","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Fetcher \u7528\u4e8e\u4ece uri \u83b7\u53d6\u6570\u636e\uff0c\u8fd4\u56de FetchResult\uff0c\u4ea4\u7531 Decoder \u4f7f\u7528\u3002</p> <p>Sketch \u652f\u6301\u7684\u6bcf\u4e00\u79cd uri \u90fd\u6709\u5bf9\u5e94\u7684 Fetcher \u5b9e\u73b0\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a</p> URI Fetcher Create Dependent modules Android iOS Desktop Web http://, https:// HurlHttpUriFetcher - sketch-http-hurl \u2705 \u274c \u2705 \u274c http://, https:// OkHttpHttpUriFetcher - sketch-http-okhttp \u2705 \u274c \u2705 \u274c http://, https:// KtorHttpUriFetcher - sketch-http-ktor3 \u2705 \u2705 \u2705 \u2705 file://, /, D:/ FileUriFetcher newFileUri() - \u2705 \u2705 \u2705 \u2705 file:///compose_resource/ ComposeResourceUriFetcher newComposeResourceUri() sketch-compose-resources \u2705 \u2705 \u2705 \u2705 data:image/jpeg;base64 Base64UriFetcher newBase64Uri() - \u2705 \u2705 \u2705 \u2705 file:///android_asset/ AssetUriFetcher newAssetUri() - \u2705 \u274c \u274c \u274c content:// ContentUriFetcher - - \u2705 \u274c \u274c \u274c android.resource:// ResourceUriFetcher newResourceUri() - \u2705 \u274c \u274c \u274c app.icon:// AppIconUriFetcher newAppIconUri() sketch-extensions-appicon \u2705 \u274c \u274c \u274c file:///kotlin_resource/ KotlinResourceUriFetcher newKotlinResourceUri() - \u274c \u2705 \u2705 \u274c blurhash:// BlurHashUriFetcher newBlurHashUri() sketch-blurhash \u2705 \u2705 \u2705 \u2705 <ul> <li>HurlHttpUriFetcher\uff1a\u4f7f\u7528 jvm \u81ea\u5e26\u7684 HttpURLConnection \u4ece\u7f51\u7edc\u52a0\u8f7d\u56fe\u7247\u3002\u4e86\u89e3\u66f4\u591a</li> <li>OkHttpHttpUriFetcher\uff1a\u4f7f\u7528 OkHttp \u4ece\u7f51\u7edc\u52a0\u8f7d\u56fe\u7247\u3002\u4e86\u89e3\u66f4\u591a</li> <li>KtorHttpUriFetcher\uff1a\u4f7f\u7528 Ktor \u4ece\u7f51\u7edc\u52a0\u8f7d\u56fe\u7247\u3002\u4e86\u89e3\u66f4\u591a</li> <li>AssetUriFetcher\uff1a\u7528\u4e8e\u4ece Android \u7684 assets \u76ee\u5f55\u52a0\u8f7d\u56fe\u7247</li> <li>ContentUriFetcher\uff1a\u7528\u4e8e Android \u7684 ContentResolver \u52a0\u8f7d\u56fe\u7247</li> <li>ResourceUriFetcher\uff1a\u7528\u4e8e\u4ece Android \u7684 resources \u76ee\u5f55\u52a0\u8f7d\u56fe\u7247</li> <li>AppIconUriFetcher\uff1a\u7528\u4e8e\u52a0\u8f7d\u5df2\u5b89\u88c5 App \u7684\u56fe\u6807\uff0c\u5b83\u8fd8\u9700\u8981\u4f9d\u8d56 <code>sketch-extensions-core</code>   \u6a21\u5757\u3002\u4e86\u89e3\u66f4\u591a</li> <li>Base64UriFetcher\uff1a\u7528\u4e8e\u4ece uri \u672c\u8eab\u7684 base64 \u6570\u636e\u5757\u4e2d\u52a0\u8f7d\u56fe\u7247</li> <li>ComposeResourceUriFetcher\uff1a\u7528\u4e8e\u4ece Compose Multiplatform \u7684 composeResources   \u76ee\u5f55\u52a0\u8f7d\u56fe\u7247\uff0c\u5b83\u8fd8\u9700\u8981\u4f9d\u8d56 <code>sketch-compose-resources</code> \u6a21\u5757\u3002</li> <li>KotlinResourceUriFetcher\uff1a\u7528\u4e8e\u4ece kotlin \u7684 resources \u76ee\u5f55\u52a0\u8f7d\u56fe\u7247</li> <li>BlurHashUriFetcher\uff1a\u652f\u6301\u4ece BlurHash \u5b57\u7b26\u4e32\u52a0\u8f7d\u56fe\u7247</li> </ul> <p>[!IMPORTANT] \u4e0a\u8ff0\u7ec4\u4ef6\u90fd\u652f\u6301\u81ea\u52a8\u6ce8\u518c\uff0c\u4f60\u53ea\u9700\u8981\u5bfc\u5165\u5373\u53ef\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\uff0c\u5982\u679c\u4f60\u9700\u8981\u624b\u52a8\u6ce8\u518c\uff0c \u8bf7\u9605\u8bfb\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/fetcher/#fetcher_1","title":"\u6269\u5c55 Fetcher","text":"<p>\u5148\u5b9e\u73b0 Fetcher \u63a5\u53e3\u5b9a\u4e49\u4f60\u7684 Fetcher \u548c\u5b83\u7684 Factory</p> <p>\u7136\u540e\u53c2\u8003\u6587\u6863 \u300a\u6ce8\u518c\u7ec4\u4ef6\u300b \u6ce8\u518c\u4f60\u7684 Fetcher \u5373\u53ef</p>"},{"location":"zh/getting_started/","title":"\u5f00\u59cb\u4f7f\u7528","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/getting_started/#_2","title":"\u52a0\u8f7d\u56fe\u7247","text":"<p>\u7528 Sketch \u52a0\u8f7d\u56fe\u7247\u975e\u5e38\u7b80\u5355\uff0c\u5982\u4e0b\uff1a</p> <p>Compose Multiplatform\uff1a</p> <pre><code>// val imageUri = \"/Users/my/Downloads/image.jpg\"\n// val imageUri = file:///compose_resource/composeResources/com.github.panpf.sketch.sample.resources/files/sample.png\nval imageUri = \"https://example.com/image.jpg\"\n\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    uri = imageUri,\n    state = rememberAsyncImageState(ComposableImageOptions {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    }),\n    contentDescription = \"photo\"\n)\n\nAsyncImage(\n    rqeuest = ComposableImageRequest(imageUri) {\n        placeholder(Res.drawable.placeholder)\n        error(Res.drawable.error)\n        crossfade()\n        // There is a lot more...\n    },\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(\n        request = ComposableImageRequest(imageUri) {\n            placeholder(Res.drawable.placeholder)\n            error(Res.drawable.error)\n            crossfade()\n            // There is a lot more...\n        }\n    ),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!TIP] 1. \u5728 Compose Multiplatform \u4e0a\u4f60\u65e2\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 AsyncImage      \u7ec4\u4ef6\u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>Image + AsyncImagePainter</code> \u6765\u52a0\u8f7d\u56fe\u7247\u3002 2. \u4f46\u66f4\u63a8\u8350\u4f7f\u7528 AsyncImage \u7ec4\u4ef6\uff0c\u56e0\u4e3a AsyncImage \u4f1a\u7565\u5feb\u4e00\u4e9b\u3002 3. \u8fd9\u662f\u7531\u4e8e Sketch \u4f9d\u8d56\u7ec4\u4ef6\u7684\u786e\u5207\u5927\u5c0f\u624d\u4f1a\u5f00\u59cb\u52a0\u8f7d\u56fe\u7247\uff0cAsyncImage      \u5728\u5e03\u5c40\u9636\u6bb5\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u7ec4\u4ef6\u7684\u5927\u5c0f\uff0c\u800c <code>Image + AsyncImagePainter</code> \u5219\u662f\u8981\u7b49\u5230\u7ed8\u5236\u9636\u6bb5\u624d\u80fd\u83b7\u53d6\u5230\u7ec4\u4ef6\u5927\u5c0f\u3002 4. <code>placeholder(Res.drawable.placeholder)</code> \u9700\u8981\u5bfc\u5165 <code>sketch-compose-resources</code> \u6a21\u5757</p> <p>Android View\uff1a</p> <pre><code>// val imageUri = \"/sdcard/download/image.jpg\"\n// val imageUri = \"file:///android_asset/image.jpg\"\n// val imageUri = \"content://media/external/images/media/88484\"\nval imageUri = \"https://example.com/image.jpg\"\n\nimageView.loadImage(imageUri)\n\nimageView.loadImage(imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    // There is a lot more...\n}\n\nval request = ImageRequest(context, imageUri) {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade()\n    target(imageView)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n</code></pre> <p>Sketch \u4f1a\u81ea\u52a8\u6839\u636e\u7ec4\u4ef6\u7684\u5927\u5c0f\u6765\u8c03\u6574\u56fe\u7247\u7684\u5c3a\u5bf8\uff0c\u9632\u6b62\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u56fe\u7247\u7684\u5c3a\u5bf8\u8d85\u51fa\u7ec4\u4ef6\u81ea\u8eab\u7684\u5927\u5c0f\u9020\u6210\u5185\u5b58\u6d6a\u8d39\uff0c\u8fd8\u4f1a\u5728\u7ec4\u4ef6\u9500\u6bc1\u65f6\u81ea\u52a8\u53d6\u6d88\u8bf7\u6c42</p>"},{"location":"zh/getting_started/#_3","title":"\u652f\u6301\u7684\u56fe\u7247\u7c7b\u578b","text":"<p>Sketch \u652f\u6301\u591a\u79cd\u7c7b\u578b\u7684\u9759\u6001\u56fe\u7247\u548c\u52a8\u6001\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> \u7c7b\u578b \u4f9d\u8d56\u6a21\u5757 jpeg _ png _ bmp _ webp _ heif _ avif _ svg sketch-svg gif sketch-animated-gifsketch-animated-gif-koral webp \u52a8\u56fe sketch-animated-webp heif \u52a8\u56fe sketch-animated-heif \u89c6\u9891\u5e27 sketch-videosketch-video-ffmpeg Apk \u56fe\u6807 sketch-extensions-apkicon <p>\u6bcf\u4e00\u79cd\u56fe\u7247\u7c7b\u578b\u90fd\u6709\u5bf9\u5e94\u7684 Decoder \u63d0\u4f9b\u652f\u6301\uff0c\u8be6\u7ec6\u4e86\u89e3 Decoder</p>"},{"location":"zh/getting_started/#uri","title":"\u652f\u6301\u7684 URI","text":"<p>Sketch \u652f\u6301\u4ece\u7f51\u7edc\u3001\u672c\u673a\u3001\u8d44\u6e90\u7b49\u4e0d\u540c\u7684\u6570\u636e\u6e90\u52a0\u8f7d\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> URI \u63cf\u8ff0 \u521b\u5efa\u51fd\u6570 \u4f9d\u8d56\u6a21\u5757 http://, https:// File in network _ sketch-http-hurlsketch-http-okhttpsketch-http-ktor2sketch-http-ktor3 file://, /, D:/ File in SDCard newFileUri() _ content:// Android Content Resolver _ _ file:///android_asset/ Android Asset newAssetUri() _ android.resource:// Android Resource newResourceUri() _ data:image/, data:img/ Base64 newBase64Uri() _ file:///compose_resource/ Compose Resource newComposeResourceUri() sketch-compose-resources file:///kotlin_resource/ Kotlin Resource newKotlinResourceUri() _ blurhash:// BlurHash newBlurHashUri() sketch-blurhash app.icon:// Android App Icon newAppIconUri() sketch-extensions-appicon <p>\u6bcf\u4e00\u79cd URI \u90fd\u6709\u5bf9\u5e94\u7684 Fetcher \u5bf9\u5176\u63d0\u4f9b\u652f\u6301\uff0c\u8be6\u7ec6\u4e86\u89e3 Fetcher</p>"},{"location":"zh/getting_started/#_4","title":"\u5e73\u53f0\u5dee\u5f02","text":"<p>\u7531\u4e8e\u53d7\u5e73\u53f0\u7279\u6027\u6240\u9650\uff0c\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u529f\u80fd\u4e5f\u6709\u6240\u4e0d\u540c\uff0c\u5982\u4e0b\uff1a</p> \u529f\u80fd Android iOS Desktop Web jpegpngwebpbmp \u2705 \u2705 \u2705 \u2705 heif \u2705 (API 28) \u274c \u274c \u274c avif \u2705 (API 31) \u274c \u274c \u274c svg \u2705 \u2705(\u4e0d\u652f\u6301 CSS) \u2705(\u4e0d\u652f\u6301 CSS) \u2705(\u4e0d\u652f\u6301 CSS) gif \u2705 \u2705 \u2705 \u2705 webp \u52a8\u56fe \u2705 (API 28) \u2705 \u2705 \u2705 heif \u52a8\u56fe \u2705 (API 30) \u274c \u274c \u274c \u89c6\u9891\u5e27 \u2705 \u274c \u274c \u274c BlurHash \u2705 \u2705 \u2705 \u2705 http://, https://file://, /file:///compose_resource/data:image/, data:img/ \u2705 \u2705 \u2705 \u2705 file:///android_asset/content://android.resource:// \u2705 \u274c \u274c \u274c file:///kotlin_resource/ \u274c \u2705 \u2705 \u274c Exif Orientation \u2705 \u2705 \u2705 \u2705 \u5185\u5b58\u7f13\u5b58 \u2705 \u2705 \u2705 \u2705 \u7ed3\u679c\u7f13\u5b58 \u2705 \u2705 \u2705 \u274c \u4e0b\u8f7d\u7f13\u5b58 \u2705 \u2705 \u2705 \u274c \u9ed8\u8ba4\u56fe\u7247\u89e3\u7801\u5668 BitmapFactory Skia Image Skia Image Skia Image \u6700\u4f4e API API 21 - JDK 1.8 - <p>\u6700\u4f4e API \u662f '-' \u8868\u793a\u548c Compose Multiplatform \u540c\u6b65</p>"},{"location":"zh/getting_started/#sketch","title":"Sketch","text":"<p>Sketch \u7c7b\u662f\u6574\u4e2a\u6846\u67b6\u7684\u6838\u5fc3\uff0c\u5b83\u7528\u6765\u6267\u884c\u5e76\u7ba1\u7406 ImageRequest</p> <p><code>sketch-compose-core</code> \u548c <code>sketch-view-core</code> \u6a21\u5757\u63d0\u4f9b\u4e86 ImageRequest, AsyncImage \u7b49\u7ec4\u4ef6\u6765\u52a0\u8f7d\u56fe\u7247\uff0c\u4f46\u4ed6\u4eec\u8fd8\u9700\u8981\u4f60\u521b\u5efa Sketch \u5b9e\u4f8b\uff0c\u7136\u540e\u5728\u52a0\u8f7d\u56fe\u7247\u7684\u65f6\u5019\u4f7f\u7528\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val sketch = Sketch(context)\n\n// Compose\nAsyncImage(\n     uri = \"https://www.example.com/image.jpg\",\n     sketch = sketch,\n     moidifier = Modifier.fillMaxSize(),\n     contentDescription = \"photo\",\n)\n\n// View\nval request = ImageRequest(imageView, uri = \"https://www.example.com/image.jpg\")\nsketch.enqueue(request)\n</code></pre> <p>\u4e3a\u4e86\u66f4\u52a0\u4fbf\u6377\uff0cSketch \u63d0\u4f9b\u4e86\u5355\u4f8b\u6a21\u5f0f\u548c Koin \u6a21\u5f0f\uff0c\u53ef\u4ee5\u5728\u52a0\u8f7d\u56fe\u7247\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u5171\u4eab\u7684 Sketch \u5b9e\u4f8b</p>"},{"location":"zh/getting_started/#_5","title":"\u5355\u4f8b\u6a21\u5f0f","text":"<p>\u4f60\u53ef\u4ee5\u76f4\u63a5\u4f9d\u8d56 <code>sketch-compose</code> \u6216 <code>sketch-view</code> \u6a21\u5757\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\uff0c\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u66f4\u52a0\u4fbf\u6377\u7684\u7ec4\u4ef6\u6216\u52a0\u8f7d\u51fd\u6570\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// Android\nval sketch = context.sketch\nval sketch = SingletonSketch.get(context)\n\n// Non Android\nval sketch = SingletonSketch.get()\n\n// Compose\nAsyncImage(\n     uri = \"https://www.example.com/image.jpg\",\n     moidifier = Modifier.fillMaxSize(),\n     contentDescription = \"photo\",\n)\n\n// View\nimageView.loadImage(uri = \"https://www.example.com/image.jpg\")\n// or\nImageRequest(imageView, uri = \"https://www.example.com/image.jpg\").enqueue(request)\n</code></pre> <p>\u9700\u8981\u81ea\u5b9a\u4e49 Sketch \u65f6\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa Sketch \u5e76\u914d\u7f6e\u5b83\uff1a</p> <pre><code>// Android\nclass MyApplication : Application(), SingletonSketch.Factory {\n\n    override fun createSketch(): Sketch {\n        return Sketch.Builder(context).apply {\n            logger(level = Logger.Level.Debug)\n            // There is a lot more...\n        }.build()\n    }\n}\n\n// Non Android. \u5728 App \u5165\u53e3\u51fd\u6570\u4e2d\u8c03\u7528\nSingletonSketch.setSafe {\n    Sketch.Builder(PlatformContext.INSTANCE).apply {\n        logger(level = Logger.Level.Debug)\n        // There is a lot more...\n    }.build()\n}\n</code></pre>"},{"location":"zh/getting_started/#koin","title":"Koin \u6a21\u5f0f","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528 Koin \u4f5c\u4e3a\u4f9d\u8d56\u6ce8\u5165\u6846\u67b6\uff0c\u5c31\u53ef\u4ee5\u4f9d\u8d56 <code>sketch-compose-koin</code> \u6216 <code>sketch-view-koin</code> \u6a21\u5757\u4f7f\u7528 Koin \u6a21\u5f0f\uff0c\u540c\u6837\u4e5f\u63d0\u4f9b\u4e86\u66f4\u52a0\u4fbf\u6377\u7684\u7ec4\u4ef6\u6216\u52a0\u8f7d\u51fd\u6570\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u5728 App \u7684\u5165\u53e3\u51fd\u6570\u6216 Application \u7684 onCreate \u4e2d\u521d\u59cb\u5316 koin\nstartKoin {\n    modules(\n         module {\n              single&lt;Sketch&gt; {\n                   Sketch.Builder(get()).apply {\n                        logger(level = Logger.Level.Debug)\n                        // There is a lot more...\n                   }.build()\n              }\n         })\n}\n\n// \u5728\u4efb\u610f\u4f4d\u7f6e\u83b7\u53d6\u5b9e\u4f8b\nval sketch = KoinPlatform.getKoin().get&lt;Sketch&gt;()\n\n// Compose\nAsyncImage(\n     uri = \"https://www.example.com/image.jpg\",\n     moidifier = Modifier.fillMaxSize(),\n     contentDescription = \"photo\",\n)\n\n// View\nimageView.loadImage(uri = \"https://www.example.com/image.jpg\")\n// or\nImageRequest(imageView, uri = \"https://www.example.com/image.jpg\").enqueue(request)\n</code></pre>"},{"location":"zh/getting_started/#imagerequest","title":"ImageRequest","text":"<p>ImageRequest \u7528\u6765\u63cf\u8ff0\u4e00\u6b21\u56fe\u7247\u52a0\u8f7d\u8bf7\u6c42\uff0c\u5b83\u5305\u542b\u56fe\u7247\u7684 uri \u4ee5\u53ca\u5360\u4f4d\u56fe\u3001\u8f6c\u6362\u3001\u8fc7\u6e21\u3001\u65b0\u7684\u5c3a\u5bf8\u3001Target \u3001Listener \u7b49\u914d\u7f6e</p>"},{"location":"zh/getting_started/#imagerequest_1","title":"\u521b\u5efa ImageRequest","text":"<p>\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 ImageRequest\uff0c\u5b83\u9650\u5236\u56fe\u7247\u7684\u6700\u5927\u50cf\u7d20\u6570\u4e3a 300x300</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    // There is a lot more...\n}\n</code></pre> <p>[!TIP] \u5173\u4e8e ImageRequest \u7684\u66f4\u591a\u914d\u7f6e\u8bf7\u53c2\u8003 ImageRequest.Builder \u7c7b</p>"},{"location":"zh/getting_started/#target","title":"\u914d\u7f6e Target","text":"<p>\u8981\u60f3\u5c06\u7ed3\u679c\u76f4\u63a5\u52a0\u8f7d\u5230\u7ec4\u4ef6\u4e0a\u8fd8\u9700\u8981\u914d\u7f6e Target</p> <p>\u5728 Compose \u4e0a Target \u7531 AsyncImage \u548c AsyncImagePainter \u7684\u57fa\u77f3 AsyncImageState \u6765\u914d\u7f6e\uff0c\u4f60\u53ea\u9700\u5c06 ImageRequest \u4ea4\u7ed9 AsyncImage \u6216 AsyncImagePainter \u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    // There is a lot more...\n}\n\nAsyncImage(\n    request = request,\n    contentDescription = \"photo\"\n)\n\nImage(\n    painter = rememberAsyncImagePainter(request),\n    contentDescription = \"photo\"\n)\n</code></pre> <p>[!CAUTION] \u5728 AsyncImage \u548c AsyncImagePainter \u4e2d\u4f60\u4e0d\u80fd\u8c03\u7528 target() \u51fd\u6570\uff0c\u8fd9\u4f1a\u5bfc\u81f4 App \u5d29\u6e83</p> <p>\u5728 Android View \u7cfb\u7edf\u4e2d\u5219\u9700\u8981\u4f60\u4e3b\u52a8\u8c03\u7528 target() \u51fd\u6570\u4f20\u5165 ImageView\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    target(imageView)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 ImageRequest(ImageView, String) \u6216 ImageView.loadImage() \u6269\u5c55\u51fd\u6570\uff0c\u5b83\u4eec\u4f1a\u5e2e\u4f60\u8c03\u7528 target()\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val request = ImageRequest(imageView, \"https://www.example.com/image.jpg\") {\n    size(300, 300)\n    // There is a lot more...\n}\ncontext.sketch.enqueue(request)\n\nimageView.loadImage() {\n    size(300, 300)\n    // There is a lot more...\n}\n</code></pre>"},{"location":"zh/getting_started/#imagerequest_2","title":"\u6267\u884c ImageRequest","text":"<p>ImageRequest \u521b\u5efa\u597d\u540e\u8981\u4ea4\u7531 Sketch \u53bb\u6267\u884c\uff0cSketch \u652f\u6301\u5f02\u6b65\u548c\u540c\u6b65\u4e24\u79cd\u65b9\u5f0f\u6267\u884c ImageRequest\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\")\n\n// \u5f02\u6b65\u6267\u884c ImageRequest \u4e0d\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\uff0c\u4e5f\u4e0d\u4f1a\u6302\u8d77\u5f53\u524d\u534f\u7a0b\nval disposable: Disposable = sketch.enqueue(request)\n\n// \u540c\u6b65\u6267\u884c ImageRequest \u6302\u8d77\u5f53\u524d\u534f\u7a0b\u76f4\u5230\u8fd4\u56de\u7ed3\u679c\ncoroutineScope.launch(Dispatchers.Main) {\n    val imageResult: ImageResult = sketch.execute(request)\n    val image: Image = imageResult.image\n}\n</code></pre> <p>[!NOTE] \u5355\u4f8b\u6a21\u5f0f\u4e3a ImageRequest \u63d0\u4f9b\u4e86 ImageRequest.enqueue() \u548c ImageRequest.execute() \u6269\u5c55\u51fd\u6570\uff0c\u65b9\u4fbf\u987a\u5e8f\u4e66\u5199</p>"},{"location":"zh/getting_started/#_6","title":"\u83b7\u53d6\u7ed3\u679c","text":"<p>\u914d\u7f6e\u4e86 Target \u65f6 Sketch \u4f1a\u5c06\u7ed3\u679c\u4ea4\u7ed9 Target \u53bb\u663e\u793a\uff0c\u4f46\u6709\u65f6\u5019\u9700\u8981\u901a\u8fc7\u7ed3\u679c\u505a\u4e00\u4e9b\u4e8b\u60c5\u6216\u8005\u6ca1\u6709\u914d\u7f6e Target \u65f6\u5c31\u9700\u8981\u4e3b\u52a8\u83b7\u53d6\u7ed3\u679c\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val request = ImageRequest(context, \"https://www.example.com/image.jpg\")\n\n// \u4f7f\u7528 enqueue() \u65b9\u6cd5\u5f02\u6b65\u6267\u884c\u8bf7\u6c42\u65f6\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u7684 Disposable.job \u83b7\u53d6\u7ed3\u679c\nval disposable = sketch.enqueue(request)\ncoroutineScope.launch(Dispatchers.Main) {\n    val imageResult: ImageResult = disposable.job.await()\n}\n\n// \u4f7f\u7528 execute() \u65b9\u6cd5\u540c\u6b65\u6267\u884c\u8bf7\u6c42\u65f6\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u7ed3\u679c\ncoroutineScope.launch(Dispatchers.Main) {\n    val imageResult: ImageResult = sketch.execute(request)\n}\n</code></pre> <p>ImageResult \u5305\u542b\u4e86\u5f88\u591a\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val imageResult: ImageResult = ...\nval request: ImageRequest = imageResult.request\nval image: Image = imageResult.image\nwhen (image) {\n    is BitmapImage -&gt; {\n        val bitmap: Bitmap = image.bitmap\n    }\n    is DrawableImage -&gt; {\n        val drawable: Drawable = image.drawable\n    }\n    is PainterImage -&gt; {\n        val painter: Painter = image.painter\n    }\n    is AnimatedImage -&gt; {\n        val codec: Codec = image.codec\n    }\n}\nif (imageResult is ImageResult.Success) {\n     val memoryCacheKey: String = imageResult.memoryCacheKey\n     val resultCacheKey: String = imageResult.resultCacheKey\n     val downloadCacheKey: String = imageResult.downloadCacheKey\n    val imageInfo: ImageInfo = imageResult.imageInfo\n    val dataFrom: DataFrom = imageResult.dataFrom\n    val resize: Resize = imageResult.resize\n    val transformeds: List&lt;String&gt;? = imageResult.transformeds\n    val extras: Map&lt;String, String&gt;? = imageResult.extras\n} else if (imageResult is ImageResult.Error) {\n    val throwable: Throwable = imageResult.throwable\n}\n</code></pre>"},{"location":"zh/getting_started/#_7","title":"\u53d6\u6d88\u8bf7\u6c42","text":"<p>\u914d\u7f6e\u4e86 Target \u65f6 ImageRequest \u4f1a\u5728\u4e0b\u5217\u60c5\u51b5\u4e0b\u81ea\u52a8\u53d6\u6d88\u8bf7\u6c42:</p> <ul> <li>AsyncImage \u6216 AsyncImagePainter \u7ec4\u4ef6\u88ab\u5fd8\u8bb0</li> <li>ImageView \u7684 onViewDetachedFromWindow() \u65b9\u6cd5\u88ab\u6267\u884c</li> <li>Lifecycle \u53d8\u4e3a DESTROYED \u72b6\u6001</li> </ul> <p>\u672a\u914d\u7f6e Target \u6216\u9700\u8981\u4e3b\u52a8\u53d6\u6d88\u65f6\u53ef\u4ee5\u901a\u8fc7 Disposable \u6216 Job \u6765\u53d6\u6d88\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u4f7f\u7528 enqueue() \u65b9\u6cd5\u5f02\u6b65\u6267\u884c\u8bf7\u6c42\u65f6\u4f1a\u8fd4\u56de\u4e00\u4e2a Disposable, \u53ef\u4ee5\u7528\u6765\u5b83\u5728\u9700\u8981\u7684\u65f6\u5019\u53d6\u6d88\u8bf7\u6c42\nval request = ImageRequest(context, \"https://www.example.com/image.jpg\")\nval disposable = sketch.enqueue(request)\ndisposable.dispose()\n\n// \u4f7f\u7528 execute() \u65b9\u6cd5\u540c\u6b65\u6267\u884c\u8bf7\u6c42\u65f6\u53ef\u4ee5\u901a\u8fc7\u5176\u534f\u7a0b\u7684 Job \u5728\u9700\u8981\u7684\u65f6\u5019\u53d6\u6d88\u8bf7\u6c42\nval job = coroutineScope.launch(Dispatchers.Main) {\n    val request = ImageRequest(context, \"https://www.example.com/image.jpg\")\n    val imageResult: ImageResult = sketch.execute(request)\n}\njob.cancel()\n</code></pre>"},{"location":"zh/getting_started/#imageview","title":"ImageView \u6269\u5c55","text":"<p>Sketch \u4e3a ImageView \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u6269\u5c55\uff0c\u5982\u4e0b:</p> <pre><code>// load\nimageView.loadImage(\"https://www.example.com/image.jpg\") {\n    placeholder(R.drawable.placeholder)\n    error(R.drawable.error)\n    crossfade(true)\n}\n\n// cancel\nimageView.disposeLoad()\n\n// result\nval imageResult: ImageResult? = imageView.imageResult\n</code></pre> <p>loadImage() \u4ec5\u5355\u4f8b\u6a21\u5f0f\u4e0b\u53ef\u7528</p>"},{"location":"zh/getting_started/#_8","title":"\u6587\u6863","text":"<p>\u57fa\u7840\u529f\u80fd\uff1a</p> <ul> <li>\u6ce8\u518c\u7ec4\u4ef6</li> <li>Compose</li> <li>Http\uff1a\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247</li> <li>AnimatedImage\uff1aGIF\u3001WEBP\u3001HEIF</li> <li>Resize\uff1a\u4fee\u6539\u56fe\u7247\u5c3a\u5bf8</li> <li>Transformation\uff1a\u8f6c\u6362\u56fe\u7247</li> <li>Transition\uff1a\u7528\u70ab\u9177\u7684\u8fc7\u6e21\u65b9\u5f0f\u663e\u793a\u56fe\u7247</li> <li>StateImage\uff1a\u5360\u4f4d\u56fe\u548c\u9519\u8bef\u56fe</li> <li>Listener\uff1a\u76d1\u542c\u8bf7\u6c42\u72b6\u6001\u548c\u4e0b\u8f7d\u8fdb\u5ea6</li> <li>DownloadCache\uff1a\u4e86\u89e3\u4e0b\u8f7d\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u4e0b\u8f7d</li> <li>ResultCache\uff1a\u4e86\u89e3\u7ed3\u679c\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u8f6c\u6362</li> <li>MemoryCache\uff1a\u4e86\u89e3\u5185\u5b58\u7f13\u5b58\uff0c\u907f\u514d\u91cd\u590d\u52a0\u8f7d</li> <li>Fetcher\uff1a\u4e86\u89e3 Fetcher \u53ca\u6269\u5c55\u65b0\u7684 URI \u7c7b\u578b</li> <li>Decoder\uff1a\u4e86\u89e3 Sketch \u7684\u89e3\u7801\u8fc7\u7a0b</li> <li>Target\uff1a\u5c06\u52a0\u8f7d\u7ed3\u679c\u5e94\u7528\u5230\u76ee\u6807\u4e0a</li> <li>SVG\uff1a\u89e3\u7801 SVG \u9759\u6001\u56fe\u7247</li> <li>VideoFrames\uff1a\u89e3\u7801\u89c6\u9891\u5e27</li> <li>BlurHash</li> <li>ExifOrientation\uff1a\u7ea0\u6b63\u56fe\u7247\u65b9\u5411</li> <li>ImageOptions\uff1a\u7edf\u4e00\u7ba1\u7406\u56fe\u7247\u914d\u7f6e</li> <li>RequestInterceptor\uff1a\u62e6\u622a ImageRequest</li> <li>DecodeInterceptor\uff1a\u62e6\u622a\u89e3\u7801\u8fc7\u7a0b</li> <li>\u9884\u52a0\u8f7d\u56fe\u7247\u5230\u5185\u5b58\u4e2d</li> <li>\u4e0b\u8f7d\u56fe\u7247</li> <li>Lifecycle</li> <li>\u65e5\u5fd7</li> <li>\u8fc1\u79fb</li> </ul> <p>\u7279\u8272\u529f\u80fd\uff1a</p> <ul> <li>SketchImageView\uff1a\u901a\u8fc7 XML \u5c5e\u6027\u914d\u7f6e\u8bf7\u6c42</li> <li>\u63d0\u9ad8\u957f\u56fe\u5728\u7f51\u683c\u5217\u8868\u4e2d\u7684\u6e05\u6670\u5ea6</li> <li>\u663e\u793a\u4e0b\u8f7d\u8fdb\u5ea6</li> <li>\u663e\u793a\u56fe\u7247\u7c7b\u578b\u89d2\u6807</li> <li>\u8702\u7a9d\u6570\u636e\u7f51\u7edc\u4e0b\u6682\u505c\u4e0b\u8f7d\u56fe\u7247\u8282\u7701\u6d41\u91cf</li> <li>\u5217\u8868\u6ed1\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u56fe\u7247</li> <li>\u663e\u793a APK \u6587\u4ef6\u6216\u5df2\u5b89\u88c5 APP \u7684\u56fe\u6807</li> </ul>"},{"location":"zh/http/","title":"Http \u7f51\u7edc\u56fe\u7247","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/http/#_1","title":"\u7ec4\u4ef6","text":"<p>Sketch \u63d0\u4f9b\u4e86 <code>sketch-http-*</code> \u7cfb\u5217\u6a21\u5757\u4ee5\u652f\u6301 Http \u7f51\u7edc\u56fe\u7247\uff0c\u6240\u652f\u6301\u7684\u5e73\u53f0\u4ee5\u53ca\u5dee\u5f02\u5982\u4e0b\uff1a</p> Module FetcherProvider Fetcher Android iOS Desktop Js WasmJs sketch-http jvm: HurlHttpUriFetcherProvidernonJvm: KtorHttpUriFetcherProvider jvm: HurlHttpUriFetchernonJvm: KtorHttpUriFetcher \u2705 \u2705 \u2705 \u2705 \u2705 sketch-http-hurl HurlHttpUriFetcherProvider HurlHttpUriFetcher \u2705 \u274c \u2705 \u274c \u274c sketch-http-okhttp OkHttpHttpUriFetcherProvider OkHttpHttpUriFetcher \u2705 \u274c \u2705 \u274c \u274c sketch-http-ktor2 KtorHttpUriFetcherProvider KtorHttpUriFetcher \u2705 \u2705 \u2705 \u2705 \u274c sketch-http-ktor3 KtorHttpUriFetcherProvider KtorHttpUriFetcher \u2705 \u2705 \u2705 \u2705 \u2705 <p>[!IMPORTANT] * HurlHttpUriFetcher \u4f7f\u7528 jvm \u81ea\u5e26\u7684 HttpURLConnection \u5b9e\u73b0\uff0c\u4e0d\u9700\u8981\u989d\u5916\u7684\u4f9d\u8d56 * <code>sketch-http-ktor2</code> \u548c <code>sketch-http-ktor3</code> \u6a21\u5757\u90fd\u5305\u542b\u5404\u4e2a\u5e73\u53f0\u6240\u9700\u7684\u5f15\u64ce\uff0c\u5982\u679c\u4f60\u9700\u8981\u4f7f\u7528\u5176\u5b83\u5f15\u64ce\u8bf7\u4f7f\u7528\u5b83\u4eec\u7684     core \u7248\u672c\uff0c\u4f8b\u5982 <code>sketch-http-ktor2-core</code> \u548c <code>sketch-http-ktor3-core</code>\uff0c\u7136\u540e\u914d\u7f6e\u81ea\u5df1\u6240\u9700\u7684\u5f15\u64ce\u7684\u4f9d\u8d56 * ktor2 \u4e0d\u652f\u6301 wasmJs \u5e73\u53f0\uff0c\u5fc5\u987b\u8981\u652f\u6301 wasmJs \u5e73\u53f0\u7684\u8bf7\u4f7f\u7528 ktor3 * \u4e0a\u8ff0\u7ec4\u4ef6\u90fd\u652f\u6301\u81ea\u52a8\u6ce8\u518c\uff0c\u4f60\u53ea\u9700\u8981\u5bfc\u5165\u5373\u53ef\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\uff0c\u5982\u679c\u4f60\u9700\u8981\u624b\u52a8\u6ce8\u518c\uff0c     \u8bf7\u9605\u8bfb\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/http/#_2","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p>\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247\u524d\u9700\u8981\u5148\u4ece\u4e0a\u8ff0\u7ec4\u4ef6\u4e2d\u9009\u62e9\u4e00\u4e2a\u5e76\u5b89\u88c5\u4f9d\u8d56\uff0c\u4ee5 <code>sketch-http</code> \u4e3a\u4f8b\uff1a</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-http:${LAST_VERSION}\")\n</code></pre>"},{"location":"zh/http/#_3","title":"\u52a0\u8f7d\u7f51\u7edc\u56fe\u7247","text":"<p>\u76f4\u63a5\u4f7f\u7528 http uri \u52a0\u8f7d\u56fe\u7247\u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val imageUri = \"https://www.sample.com/image.jpg\"\n\n// compose\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\"\n)\n\n// view\nimageView.loadImage(imageUri)\n</code></pre>"},{"location":"zh/http/#_4","title":"\u914d\u7f6e","text":"<p>Sketch \u5c06 http \u90e8\u5206\u62bd\u8c61\u4e3a HttpStack\uff0c\u6bcf\u4e00\u4e2a *HttpUriFetcher \u90fd\u6709\u5bf9\u5e94\u7684 HttpStack \u5b9e\u73b0\uff0c\u5982\u4e0b\uff1a</p> <ul> <li>HurlHttpUriFetcher\uff1aHurlStack</li> <li>OkHttpHttpUriFetcher\uff1aOkHttpStack</li> <li>KtorHttpUriFetcher\uff1aKtorStack</li> </ul> <p>\u4f60\u53ef\u4ee5\u5148\u7981\u7528\u76f8\u5173\u7ec4\u4ef6\u7684\u81ea\u52a8\u6ce8\u518c\uff0c\u7136\u540e\u5728\u624b\u52a8\u914d\u7f6e *HttpUriFetcher \u65f6\u4fee\u6539 HttpStack \u7684\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <p>HurlStack:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(HurlHttpUriFetcherProvider::class)\n    addComponents {\n        val httpStack = HurlStack.Builder().apply {\n            connectTimeout(5000)\n            readTimeout(5000)\n            userAgent(\"Android 8.1\")\n            headers(\"accept-encoding\" to \"gzip\")   // \u4e0d\u53ef\u91cd\u590d\u7684 header\n            addHeaders(\"cookie\" to \"...\")    // \u53ef\u91cd\u590d\u7684 header\n            addInterceptor(object : HurlStack.Interceptor {\n                override fun intercept(chain: Interceptor.Chain): Response {\n                    val connection: HttpURLConnection = chain.connection\n                    // ...\n                    return chain.proceed()\n                }\n            })\n        }.build()\n        addFetcher(HurlHttpUriFetcher.Factory(httpStack))\n    }\n}.build()\n</code></pre> <p>OkHttpStack:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(OkHttpHttpUriFetcherProvider::class)\n    addComponents {\n        val httpStack = OkHttpStack.Builder().apply {\n            connectTimeout(5000)\n            readTimeout(5000)\n            userAgent(\"Android 8.1\")\n            headers(\"accept-encoding\" to \"gzip\")   // \u4e0d\u53ef\u91cd\u590d\u7684 header\n            addHeaders(\"cookie\" to \"...\")    // \u53ef\u91cd\u590d\u7684 header\n            interceptors(object : okhttp3.Interceptor {\n                override fun intercept(chain: Interceptor.Chain): Response {\n                    val request = chain.request()\n                    // ...\n                    return chain.proceed(request)\n                }\n            })\n            networkInterceptors(object : okhttp3.Interceptor {\n                override fun intercept(chain: Interceptor.Chain): Response {\n                    val request = chain.request()\n                    // ...\n                    return chain.proceed(request)\n                }\n            })\n        }.build()\n        addFetcher(OkHttpHttpUriFetcher.Factory(httpStack))\n    }\n}.build()\n</code></pre> <p>KtorStack:</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(KtorHttpUriFetcherProvider::class)\n    addComponents {\n        val httpClient = HttpClient {\n            // ...\n        }\n        val httpStack = KtorStack(httpClient)\n        addFetcher(KtorHttpUriFetcher.Factory(httpStack))\n    }\n}.build()\n</code></pre>"},{"location":"zh/image_options/","title":"ImageOptions","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>ImageOptions \u7528\u6765\u6279\u91cf\u5b9a\u4e49\u56fe\u7247\u8bf7\u6c42\u914d\u7f6e\uff0c\u652f\u6301 ImageRequest \u5168\u90e8\u56fe\u7247\u76f8\u5173\u5c5e\u6027</p> <p>\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u4f7f\u7528 ImageOptions\uff1a</p> <ul> <li>Target.getImageOptions()<ul> <li>SketchImageView.imageOptions</li> <li>rememberAsyncImageState(ImageOptions)</li> </ul> </li> <li>ImageRequest.Builder.merge(ImageOptions)/default(ImageOptions)</li> <li>Sketch.Builder.globalImageOptions(ImageOptions)</li> </ul> <p>\u6700\u7ec8\u5728\u6784\u5efa ImageRequest \u65f6\u76f8\u540c\u5c5e\u6027\u7684\u4f18\u5148\u7ea7\u4e3a\uff1a</p> <ol> <li>ImageRequest.Builder</li> <li>Target.getImageOptions()</li> <li>ImageRequest.Builder.default(ImageOptions)</li> <li>Sketch.globalImageOptions</li> </ol>"},{"location":"zh/image_options/#_1","title":"\u793a\u4f8b","text":"<p>Global\uff1a</p> <pre><code>Sketch.Builder(context).apply {\n    globalImageOptions(ImageOptions {\n        placeholer(R.drawable.placeholder)\n        error(R.drawable.error)\n        // more ...\n    })\n}.build()\n</code></pre> <p>View\uff1a</p> <pre><code>sketchImageView.imageOptions = ImageOptions {\n    placeholer(R.drawable.placeholder)\n    // more ...\n}\n</code></pre> <p>ImageRequest\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    merge(ImageOptions {\n        placeholer(R.drawable.placeholder)\n        error(R.drawable.error)\n        // more ...\n    })\n    default(ImageOptions {\n        placeholer(R.drawable.placeholder)\n        error(R.drawable.error)\n        // more ...\n    })\n}\n</code></pre> <p>AsyncImageState\uff1a</p> <pre><code>val state = rememberAsyncImageState(ComposableImageOptions {\n  placeholer(Res.drawable.placeholder)\n  error(Res.drawable.error)\n  // more ...\n})\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    contentDescription = \"\",\n    state = state,\n)\n</code></pre>"},{"location":"zh/lifecycle/","title":"Lifecycle","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u4f9d\u8d56 Lifecycle \u76d1\u63a7\u9875\u9762\u7684\u751f\u547d\u5468\u671f\uff0c\u7528\u4e8e\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ol> <li>\u52a8\u56fe\u52a0\u8f7d\u5b8c\u6210\u65f6\u5982\u679c\u9875\u9762\u5df2\u7ecf\u5230\u8fbe Start \u72b6\u6001\u5219\u81ea\u52a8\u64ad\u653e</li> <li>\u5728\u9875\u9762\u5230\u8fbe Start \u6216 Stop \u72b6\u6001\u65f6\u542f\u52a8\u6216\u505c\u6b62\u64ad\u653e\u52a8\u56fe</li> <li>\u5728\u9875\u9762\u9500\u6bc1\u65f6\u505c\u6b62\u8bf7\u6c42</li> </ol>"},{"location":"zh/lifecycle/#_1","title":"\u9ed8\u8ba4\u503c","text":"<p>\u5982\u679c\u5728\u521b\u5efa\u8bf7\u6c42\u65f6\u6ca1\u6709\u8bbe\u7f6e Lifecycle\uff0cSketch \u4f1a\u6309\u5982\u4e0b\u987a\u5e8f\u83b7\u53d6:</p> <ul> <li>compose:<ol> <li>\u901a\u8fc7 LocalLifecycleOwner.current.lifecycle API \u83b7\u53d6</li> <li>\u4f7f\u7528 GlobalLifecycle</li> </ol> </li> <li>view:<ol> <li>\u901a\u8fc7 view.findViewTreeLifecycleOwner() API \u83b7\u53d6</li> <li>\u901a\u8fc7 view.context \u83b7\u53d6\uff08\u5982\u679c context \u5b9e\u73b0\u4e86 LifecycleOwner \u63a5\u53e3\uff0c\u4f8b\u5982 Activity\uff09</li> <li>\u901a\u8fc7 ImageRequest.Builder.context \u83b7\u53d6\uff08\u5982\u679c context \u5b9e\u73b0\u4e86 LifecycleOwner \u63a5\u53e3\uff0c\u4f8b\u5982    Activity\uff09</li> <li>\u4f7f\u7528 GlobalLifecycle</li> </ol> </li> </ul>"},{"location":"zh/lifecycle/#_2","title":"\u914d\u7f6e","text":"<p>\u5982\u679c\u4e0a\u8ff0 Sketch \u9ed8\u8ba4\u65e0\u6cd5\u83b7\u53d6\u5230 Lifecycle \u6216\u9ed8\u8ba4\u83b7\u53d6\u7684 Lifecycle \u4e0d\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0cImageRequest .Builder \u8fd8\u63d0\u4f9b\u4e86 lifecycle() \u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e lifecycle\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val lifecycle: Lifecycle = ...\nImageRequest(context, \"https://www.example.com/image.gif\") {\n    lifecycle(lifecycle)\n}\n</code></pre>"},{"location":"zh/listener/","title":"Listener","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p>"},{"location":"zh/listener/#compose","title":"Compose","text":"<p>\u5728 Compose \u4e2d\u4f60\u5fc5\u987b\u901a\u8fc7 AsyncImageState \u7684 loadState \u548c progress \u5c5e\u6027\u6765\u76d1\u542c\u8bf7\u6c42\u7684\u72b6\u6001\u548c\u8fdb\u5ea6\uff0c\u5177\u4f53\u539f\u56e0\u8bf7\u53c2\u8003 \u300aCompose\u300b\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val state = rememberAsyncImageState()\nval loadState: LoadState? = state.loadState\nwhen (loadState) {\n    is Started -&gt; {\n\n    }\n    is Success -&gt; {\n\n    }\n    is Error -&gt; {\n\n    }\n    is Canceled -&gt; {\n\n    }\n    else -&gt; {\n        // null\n    }\n}\nval progress: Progress? = state.progress\nAsyncImage(\n    uri = imageUri,\n    contentDescription = \"photo\",\n    state = state\n)\n</code></pre>"},{"location":"zh/listener/#android-view","title":"Android View","text":"<p>ImageRequest \u901a\u8fc7 Listener \u548c ProgressListener \u53ef\u4ee5\u76d1\u542c\u5f00\u59cb\u3001\u5b8c\u6210\u3001\u9519\u8bef\u3001\u53d6\u6d88\u3001\u8fdb\u5ea6\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    addListener(object : Listener {\n        override fun onStart(request: ImageRequest) {\n            // ...\n        }\n\n        override fun onSuccess(request: ImageRequest, result: ImageResult.Success) {\n            // ...\n        }\n\n        override fun onError(request: ImageRequest, error: ImageResult.Error) {\n            // ...\n        }\n\n        override fun onCancel(request: ImageRequest) {\n            // ...\n        }\n    })\n    // \u6216\n    addListener(\n        onStart = { request: ImageRequest -&gt;\n            // ...\n        },\n        onSuccess = { request: ImageRequest, result: ImageResult.Success -&gt;\n            // ...\n        },\n        onError = { request: ImageRequest, error: ImageResult.Error -&gt;\n            // ...\n        },\n        onCancel = { request: ImageRequest -&gt;\n            // ...\n        },\n    )\n\n    addProgressListener { request: ImageRequest, progress: Progress -&gt;\n        // ...\n    }\n}\n</code></pre> <p>[!TIP] \u6240\u6709\u56de\u8c03\u90fd\u5c06\u5728\u4e3b\u7ebf\u7a0b\u6267\u884c</p>"},{"location":"zh/listener/#sketchimageview","title":"SketchImageView","text":"<p>SketchImageView \u63d0\u4f9b\u4e86 Flow \u7684\u65b9\u5f0f\u6765\u76d1\u542c\u8bf7\u6c42\u7684\u72b6\u6001\u548c\u8fdb\u5ea6\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val sketchImageView = SketchImageView(context)\nscope.launch {\n    sketchImageView.requestState.loadState.collect { loadState -&gt;\n        when (loadState) {\n            is Started -&gt; {\n\n            }\n            is Success -&gt; {\n\n            }\n            is Error -&gt; {\n\n            }\n            is Canceled -&gt; {\n\n            }\n            else -&gt; {\n                // null\n            }\n        }\n    }\n}\n\nscope.launch {\n    sketchImageView.requestState.progressState.collect { progress -&gt;\n\n    }\n}\n</code></pre>"},{"location":"zh/log/","title":"\u65e5\u5fd7","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u7684\u65e5\u5fd7\u7531 Logger \u7ec4\u4ef6\u63d0\u4f9b\u670d\u52a1\uff0cTag \u7edf\u4e00\u4e3a <code>Sketch</code></p>"},{"location":"zh/log/#level","title":"\u4fee\u6539 Level","text":"<p>\u548c\u5927\u591a\u6570\u65e5\u5fd7\u6846\u67b6\u4e00\u6837\uff0cLogger \u4e5f\u901a\u8fc7 Logger.Level \u63a7\u5236\u8f93\u51fa\u65e5\u5fd7\u7684\u7ea7\u522b\uff0c\u9ed8\u8ba4\u4e3a <code>Info</code></p> <p>\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4fee\u6539 level\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u5728\u521d\u59cb\u54c8 Sketch \u65f6\nSketch.Builder(context).apply {\n    logger(level = Logger.Level.Debug)\n}.build()\n\n// \u5728\u5176\u5b83\u4efb\u4f55\u65f6\u5019\ncontext.sketch.logger.level = Logger.Level.Debug\n</code></pre> <p>[!TIP] \u8fc7\u591a\u7684\u65e5\u5fd7\u4f1a\u5f71\u54cd UI \u6d41\u7545\u5ea6\uff0c\u6b63\u5f0f\u53d1\u5e03\u7248\u672c\u8bf7\u5c06 level \u8bbe\u7f6e\u4e3a Info \u53ca\u4ee5\u4e0a\u7ea7\u522b</p>"},{"location":"zh/log/#_2","title":"\u4fee\u6539\u8f93\u51fa","text":"<p>Logger \u901a\u8fc7 Logger.Pipeline \u63a5\u53e3\u8f93\u51fa\u65e5\u5fd7\uff0c\u5728 Android \u5e73\u53f0\u4e0a Logger.Pipeline \u7684\u5b9e\u73b0\u662f AndroidLogPipeline\uff0c\u975e Android \u5e73\u53f0\u4e0a\u662f PrintLogPipeline</p> <p>\u4f60\u53ef\u4ee5\u5b9e\u73b0 Logger.Pipeline \u63a5\u53e3\u81ea\u5b9a\u4e49\u65b0\u7684\u8f93\u51fa\uff0c\u7136\u540e\u5728\u521d\u59cb\u5316 Sketch \u65f6\u4f7f\u7528\u5b83\uff0c\u5982\u4e0b\uff1a</p> <pre><code>class MyPipeline : Logger.Pipeline {\n\n    override fun log(level: Logger.Level, tag: String, msg: String, tr: Throwable?) {\n        if (tr != null) {\n            val trString = tr.stackTraceToString()\n            println(\"$level. $tag. $msg. \\n$trString\")\n        } else {\n            println(\"$level. $tag. $msg\")\n        }\n    }\n\n    override fun flush() {\n\n    }\n\n    override fun toString(): String = \"MyPipeline\"\n}\n\nSketch.Builder(context).apply {\n    logger(pipeline = MyPipeline())\n}.build()\n</code></pre>"},{"location":"zh/long_image_grid_thumbnails/","title":"\u63d0\u9ad8\u957f\u56fe\u5728\u7f51\u683c\u5217\u8868\u4e2d\u7684\u6e05\u6670\u5ea6","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u957f\u56fe\u5728\u7f51\u683c\u5217\u8868\u4e2d\u4f1a\u56e0\u4e3a\u7f29\u7565\u56fe\u5c3a\u5bf8\u8fc7\u5c0f\u800c\u5bfc\u81f4\u663e\u793a\u6548\u679c\u5f88\u6a21\u7cca\u3002</p> <p>\u4f8b\u5982\u7ec4\u4ef6\u5927\u4e3a 400x400\uff0c\u56fe\u7247\u5bbd\u9ad8\u4e3a 30000x960 \u65f6 Sketch \u81ea\u52a8\u8ba1\u7b97\u51fa Resize \u7684 size \u4e3a 400x400\uff0c Precision \u9ed8\u8ba4\u4e3a LESS_PIXELS\u3002 \u6700\u7ec8\u8ba1\u7b97\u5f97\u51fa\u7684 inSampleSize \u4e3a 16\uff0c\u7f29\u7565\u56fe\u5c3a\u5bf8\u4e3a 1875x60\uff0c\u8fd9\u5f20\u7f29\u7565\u56fe\u662f\u6781\u5176\u6a21\u7cca\uff0c\u65e0\u6cd5\u8fa8\u522b\u4efb\u4f55\u5185\u5bb9\u7684</p> <p>\u8fd9\u65f6\u53ef\u4ee5\u4f7f\u7528 LongImagePrecisionDecider \u6839\u636e\u56fe\u7247\u5bbd\u9ad8\u548c ImageRequest.size \u52a8\u6001\u8ba1\u7b97 Precision \uff0c\u5224\u65ad\u662f\u957f\u56fe\u65f6\u4f7f\u7528 Precision.SAME_ASPECT_RATIO \u6765\u63d0\u9ad8\u7f29\u7565\u56fe\u7684\u6e05\u6670\u5ea6\uff0c\u5426\u5219\u4f9d\u7136\u4f7f\u7528 Precision .LESS_PIXELS\uff0c\u8fd9\u6837\u65e2\u786e\u4fdd\u4e86\u957f\u56fe\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u7f29\u7565\u56fe\uff0c\u53c8\u4fdd\u8bc1\u4e86\u975e\u957f\u56fe\u7684\u5feb\u901f\u52a0\u8f7d</p> <p>[!TIP] 1. \u957f\u56fe\u89c4\u5219\u9ed8\u8ba4\u5b9e\u73b0\u4e3a DefaultLongImageDecider\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u521b\u5efa LongImagePrecisionDecider      \u65f6\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u89c4\u5219 2. SAME_ASPECT_RATIO \u4f1a\u4ec5\u8bfb\u53d6\u539f\u56fe\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f97\u5230\u4e00\u5f20\u8f83\u6e05\u6670\u7684\u7f29\u7565\u56fe</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    precision(LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO))\n    scale(LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP))\n}\n</code></pre>"},{"location":"zh/memory_cache/","title":"\u5185\u5b58\u7f13\u5b58","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u52a0\u8f7d\u56fe\u7247\u5e76\u63d0\u9ad8\u56fe\u7247\u7684\u52a0\u8f7d\u901f\u5ea6 Sketch \u5f15\u5165\u4e86\u5185\u5b58\u7f13\u5b58\uff0c\u5185\u5b58\u7f13\u5b58\u529f\u80fd\u4f1a\u5c06\u5df2\u52a0\u8f7d\u7684 Image \u7f13\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u4e0b\u6b21\u76f4\u63a5\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u8df3\u8fc7\u52a0\u8f7d\u8fc7\u7a0b\u3002</p> <p>\u5185\u5b58\u7f13\u5b58\u529f\u80fd\u7531 MemoryCacheRequestInterceptor \u8d1f\u8d23\u6838\u5fc3\u903b\u8f91\uff0cMemoryCache \u8d1f\u8d23\u5b58\u50a8\u7ba1\u7406</p> <p>MemoryCache \u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f LruMemoryCache\uff1a</p> <ul> <li>\u6839\u636e\u6700\u5c11\u4f7f\u7528\u539f\u5219\u91ca\u653e\u65e7\u7684 Bitmap</li> <li>\u6700\u5927\u5bb9\u91cf\u5728 Android \u4e0a\u662f\u6700\u5927\u53ef\u7528\u5185\u5b58\u7684 25% \u5230 33%\uff0c\u5728\u975e Android \u4e0a\u662f\u6700\u5927\u53ef\u7528\u5185\u5b58\u7684 15%</li> </ul>"},{"location":"zh/memory_cache/#_2","title":"\u81ea\u5b9a\u4e49","text":"<p>\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316 Sketch \u65f6\u901a\u8fc7 Sketch.Builder \u7684 memoryCache() \u65b9\u6cd5\u81ea\u5b9a\u4e49\u5185\u5b58\u7f13\u5b58\u7684\u5b9e\u73b0\u6216\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u4f7f\u7528\u9ed8\u8ba4\u7684 MemoryCache \u5b9e\u73b0\u5e76\u914d\u7f6e\u5176\u53c2\u6570\nSketch.Builder(context).apply {\n    memoryCache(\n        MemoryCache.Builder(context)\n            .maxSizePercent(0.4f)\n            .build()\n    )\n}.build()\n\n// \u4f7f\u7528\u4f60\u81ea\u5df1\u7684 MemoryCache \u5b9e\u73b0\nclass MyMemoryCache : MemoryCache {\n    // ...\n}\nSketch.Builder(context).apply {\n    memoryCache(MyDiskCache())\n}.build()\n</code></pre>"},{"location":"zh/memory_cache/#_3","title":"\u7f13\u5b58\u7b56\u7565","text":"<p>\u7f13\u5b58\u7b56\u7565\u7528\u4e8e\u63a7\u5236\u5982\u4f55\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\uff0c\u9ed8\u8ba4\u914d\u7f6e\u662f CachePolicy.ENABLED\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 ImageRequest \u6216 ImageOptions \u7684 memoryCachePolicy \u5c5e\u6027\u914d\u7f6e\u5b83:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // \u7981\u7528\n    memoryCachePolicy(CachePolicy.DISABLED)\n    // \u53ea\u8bfb\n    memoryCachePolicy(CachePolicy.READ_ONLY)\n    // \u53ea\u5199\n    memoryCachePolicy(CachePolicy.WRITE_ONLY)\n}\n</code></pre>"},{"location":"zh/memory_cache/#key","title":"\u7f13\u5b58 key","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b Sketch \u4f1a\u81ea\u52a8\u6839\u636e\u8bf7\u6c42\u7684\u914d\u7f6e\u751f\u6210\u5185\u5b58\u7f13\u5b58 key\uff0c\u4f46\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u5c5e\u6027\u81ea\u5b9a\u4e49\u5185\u5b58\u7f13\u5b58 key\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5185\u5b58\u7f13\u5b58 key\n    memoryCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u5185\u5b58\u7f13\u5b58 key\n    memoryCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n\nImageOptions {\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u5185\u5b58\u7f13\u5b58 key\n    memoryCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u5185\u5b58\u7f13\u5b58 key\n    memoryCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c\u83b7\u53d6\u6700\u7ec8\u7684\u5185\u5b58\u7f13\u5b58 key\uff1a</p> <pre><code>// \u5728\u81ea\u5b9a\u4e49\u7684 RequestInterceptor\u3001DecodeInterceptor\u3001Transformation\u3001Fetcher\u3001Decoder \u7ec4\u4ef6\u4e2d\n// \u53ef\u4ee5\u901a\u8fc7 RequestContext \u83b7\u53d6\u5185\u5b58\u7f13\u5b58 key\nval requestContext: RequestContext = ...\nrequestContext.memoryCacheKey\n\n// \u4ece ImageResult \u4e2d\u83b7\u53d6\u5185\u5b58\u7f13\u5b58 key\nval imageSuccess = sketch.execute(request) as ImageResult.Success\nimageSuccess.memoryCacheKey\n</code></pre>"},{"location":"zh/memory_cache/#_4","title":"\u8bfb\u5199\u7f13\u5b58","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>sketch.memoryCache</code> \u5c5e\u6027\u83b7\u53d6\u5185\u5b58\u7f13\u5b58\u5b9e\u4f8b\u6765\u8bbf\u95ee\u5185\u5b58\u7f13\u5b58\u3002</p> <pre><code>scope.launch {\n    val memoryCache = sketch.memoryCache\n    val memoryCacheKey = requestContext.memoryCacheKey\n    memoryCache.withLock(memoryCacheKey) {\n        // put\n        val newBitmap: Bitmap = Bitmap.create(100, 100, Bitmap.Config.ARGB_8888)\n        val newCacheValue = newBitmap.asImage().cacheValue()!!\n        put(memoryCacheKey, newCacheValue)\n\n        // exist\n        val exist: Boolean = exist(memoryCacheKey)\n\n        // get\n        val cachedValue: MemoryCache.Value? = get(memoryCacheKey)\n        val image: Image = cachedValue?.image\n\n        // remove\n        val clearedValue: MemoryCache.Value? = remove(memoryCacheKey)\n    }\n\n    // Clear all\n    memoryCache.clear()\n\n    // trim\n    memoryCache.trim((memoryCache.maxSize * 0.5f).toLong())\n}\n</code></pre> <p>[!CAUTION] \u8bbf\u95ee\u6307\u5b9a key \u7684 memoryCache \u65f6\u4e5f\u8981\u5148\u83b7\u53d6\u9501\u518d\u8bbf\u95ee\uff0c\u8fd9\u6837\u4e0d\u4ec5\u80fd\u907f\u514d\u540c\u4e00\u4e2a\u8bf7\u6c42\u91cd\u590d\u52a0\u8f7d\uff0c\u4e5f\u80fd\u907f\u514d\u5728\u591a\u7ebf\u7a0b\u4e0b\u51fa\u95ee\u9898</p> <p>\u66f4\u591a\u53ef\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 MemoryCache</p>"},{"location":"zh/memory_cache/#_5","title":"\u6e05\u9664\u7f13\u5b58","text":"<p>\u5185\u5b58\u7f13\u5b58\u4f1a\u5728\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e0b\u6e05\u9664\uff1a</p> <ul> <li>\u4e3b\u52a8\u8c03\u7528 MemoryCache \u7684 <code>trim()</code>\u3001<code>remove()</code>\u3001<code>clear()</code> \u65b9\u6cd5</li> <li>\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u65f6\u81ea\u52a8\u91ca\u653e\u8f83\u65e7\u7684\u7f13\u5b58</li> <li>\u8bbe\u5907\u53ef\u7528\u5185\u5b58\u8f83\u4f4e\u89e6\u53d1\u4e86 Application \u7684 <code>onLowMemory()</code> \u65b9\u6cd5</li> <li>\u7cfb\u7edf\u6574\u7406\u5185\u5b58\u89e6\u53d1\u4e86 Application \u7684 <code>onTrimMemory(int)</code> \u65b9\u6cd5</li> </ul>"},{"location":"zh/migrate/","title":"\u8fc1\u79fb","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>sketch3compat \u76ee\u5f55\u4e0b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u517c\u5bb9 sketch3 API \u7684\u5de5\u5177\u51fd\u6570\u3001\u5de5\u5177\u7c7b\u3001\u4ee5\u53ca\u522b\u540d\u7c7b\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u66f4\u5bb9\u6613\u7684\u9002\u914d sketch4\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u62f7\u8d1d\u4ed6\u4eec\u5230\u4f60\u7684\u9879\u76ee\u4e2d\u3002</p> <ul> <li>DownloadRequest\uff1a\u53ef\u4ee5\u4f7f\u7528 <code>Sketch.executeDownload(ImageRequest)</code> \u6216   <code>Sketch.enqueueDownload(ImageRequest)</code> \u66ff\u4ee3</li> <li>LoadRequest\uff1a\u4e0d\u8bbe\u7f6e <code>target</code> \u5373\u53ef</li> </ul> <p>\u5176\u5b83\u8fc1\u79fb\u7ec6\u8282\u6b63\u5728\u9646\u7eed\u5b8c\u5584\u4e2d</p>"},{"location":"zh/mime_type_logo/","title":"\u56fe\u7247\u7c7b\u578b\u89d2\u6807","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u4e3a view \u548c Compose \u63d0\u4f9b\u4e86\u663e\u793a\u56fe\u7247\u7c7b\u578b\u89d2\u6807\u7684\u6269\u5c55\u529f\u80fd\uff0c\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"zh/mime_type_logo/#compose","title":"Compose","text":"<p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u4f7f\u7528 mimeTypeLogo() \u51fd\u6570\u6dfb\u52a0\u56fe\u7247\u7c7b\u578b\u89d2\u6807</p> <pre><code>val imageTypeIconMap = remember {\n    mapOf(\n        \"image/gif\" to painterResource(Res.drawable.image_type_gif),\n        \"image/png\" to painterResource(Res.drawable.image_type_png),\n        \"image/jpeg\" to painterResource(Res.drawable.image_type_jpeg),\n        \"image/webp\" to painterResource(Res.drawable.image_type_webp),\n        \"image/bmp\" to painterResource(Res.drawable.image_type_bmp),\n        \"image/svg+xml\" to painterResource(Res.drawable.image_type_svg),\n        \"image/heif\" to painterResource(Res.drawable.image_type_heif),\n    )\n}\n\nval state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    modifier = Modifier\n        .size(200.dp)\n        .mimeTypeLogo(state, imageTypeIconMap, margin = 4.dp),\n    state = state,\n    contentDescription = \"\",\n)\n</code></pre> <p>[!TIP] Compose \u7248\u672c\u529f\u80fd\u7531 MimeTypeLogoModifier \u5b9e\u73b0</p>"},{"location":"zh/mime_type_logo/#view","title":"View","text":"<p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u914d\u5408 SketchImageView \u4f7f\u7528 showMimeTypeLogoWithRes() \u51fd\u6570\u6dfb\u52a0\u56fe\u7247\u7c7b\u578b\u89d2\u6807</p> <pre><code>val sketchImageView = SketchImageView(context)\nsketchImageView.showMimeTypeLogoWithRes(\n    mimeTypeIconMap = mapOf(\n        \"image/gif\" to R.drawable.image_type_gif,\n        \"image/png\" to R.drawable.image_type_png,\n        \"image/jpeg\" to R.drawable.image_type_jpeg,\n        \"image/webp\" to R.drawable.image_type_webp,\n        \"image/bmp\" to R.drawable.image_type_bmp,\n        \"image/svg+xml\" to R.drawable.image_type_svg,\n        \"image/heif\" to R.drawable.image_type_heif,\n    ),\n    margin = 4.dp2px\n)\n</code></pre> <p>[!TIP] View \u7248\u672c\u529f\u80fd\u7531 MimeTypeLogoAbility \u5b9e\u73b0</p>"},{"location":"zh/pause_load_when_scrolling/","title":"\u5217\u8868\u6eda\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u56fe\u7247","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u5217\u8868\u6eda\u52a8\u7684\u8fc7\u7a0b\u4e2d\u5927\u91cf\u52a0\u8f7d\u56fe\u7247\u4f1a\u964d\u4f4e UI \u6d41\u7545\u5ea6\uff0c\u56e0\u6b64\u5728\u6027\u80fd\u8f83\u5dee\u7684\u8bbe\u5907\u4e0a\u5217\u8868\u6eda\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u56fe\u7247\u80fd\u663e\u8457\u63d0\u9ad8 UI \u6d41\u7545\u5ea6</p> <p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\n// or\nimplementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u5728\u5217\u8868\u63a7\u4ef6\u4e0a\u6dfb\u52a0\u6eda\u52a8\u76d1\u542c\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// RecyclerView\nrecyclerView.addOnScrollListener(PauseLoadWhenScrollingMixedScrollListener())\n\n// ListView\nlistView.setOnScrollListener(PauseLoadWhenScrollingMixedScrollListener())\n\n// Compose LazyColumn\n@Composable\nfun ListContent() {\n    val lazyListState = rememberLazyListState()\n    bindPauseLoadWhenScrolling(lazyListState)\n\n    LazyColumn(state = lazyListState) {\n        // ...\n    }\n}\n</code></pre> <p>\u518d\u6ce8\u518c PauseLoadWhenScrollingDecodeInterceptor \u8bf7\u6c42\u62e6\u622a\u5668\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u5728\u81ea\u5b9a\u4e49 Sketch \u65f6\u4e3a\u6240\u6709 ImageRequest \u6ce8\u518c\nSketch.Builder(context).apply {\n    components {\n        addDecodeInterceptor(PauseLoadWhenScrollingDecodeInterceptor())\n    }\n}.build()\n\n// \u52a0\u8f7d\u56fe\u7247\u65f6\u4e3a\u5355\u4e2a ImageRequest \u6ce8\u518c\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addDecodeInterceptor(PauseLoadWhenScrollingDecodeInterceptor())\n    }\n}\n</code></pre> <p>\u6700\u540e\u9488\u5bf9\u5355\u4e2a\u8bf7\u6c42\u5f00\u542f\u5217\u8868\u6eda\u52a8\u4e2d\u6682\u505c\u52a0\u8f7d\u529f\u80fd\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    pauseLoadWhenScrolling(true)\n}\n</code></pre>"},{"location":"zh/preload/","title":"\u9884\u52a0\u8f7d","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u6709\u65f6\u4e3a\u4e86\u63d0\u9ad8\u52a0\u8f7d\u901f\u5ea6\u4e0d\u8ba9\u7528\u6237\u770b\u5230\u56fe\u7247\u52a0\u8f7d\u7684\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u63d0\u524d\u5c06\u56fe\u7247\u52a0\u8f7d\u5230\u5185\u5b58\u91cc\u3002</p> <p>\u6211\u4eec\u53ea\u9700\u8981\u4e0d\u8bbe\u7f6e Target\uff0c\u7136\u540e\u786e\u4fdd size\u3001precision\u3001scale \u53c2\u6570\u548c\u4f7f\u7528\u65f6\u4e00\u6837\u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val request = ImageRequest(context, \"https://example.com/image.jpg\") {\n    size(200, 200)\n    precision(Precision.LESS_PIXELS)\n    scale(Scale.CENTER_CROP)\n}\n\nsketch.enqueue(request)\n// or\nscope.launch {\n    sketch.execute(request)\n}\n</code></pre> <p>[!TIP] \u5728\u6784\u5efa ImageRequest \u65f6\u9700\u8981\u4f60\u4e3b\u52a8\u8bbe\u7f6e\u548c\u4f7f\u7528\u65f6\u4e00\u81f4\u7684 size\u3001precision\u3001scale\uff0c\u56e0\u4e3a\u5728\u4f7f\u7528\u65f6\u5982\u679c\u6ca1\u6709\u4e3b\u52a8\u8bbe\u7f6e size\u3001precision\u3001scale \u5c31\u4f1a\u4ece Target \u4e0a\u83b7\u53d6\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u9020\u6210\u9884\u52a0\u8f7d\u65f6\u548c\u4f7f\u7528\u65f6\u7684 size\u3001precision\u3001scale \u4e0d\u4e00\u81f4\u5bfc\u81f4\u65e0\u6cd5\u547d\u4e2d\u7f13\u5b58</p>"},{"location":"zh/progress_indicator/","title":"\u4e0b\u8f7d\u8fdb\u5ea6\u6307\u793a\u5668","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u4e3a view \u548c Compose \u63d0\u4f9b\u4e86\u663e\u793a\u4e0b\u8f7d\u8fdb\u5ea6\u7684\u6269\u5c55\u529f\u80fd\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u63d0\u4f9b\u4e86\u4e09\u79cd\u6837\u5f0f\u53ef\u4f9b\u9009\u62e9\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>[!TIP] \u8fd8\u53ef\u4ee5\u8c03\u6574\u5b83\u4eec\u7684\u989c\u8272\u3001\u5c3a\u5bf8\u548c\u884c\u4e3a</p>"},{"location":"zh/progress_indicator/#compose","title":"Compose","text":"<p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-compose:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u4f7f\u7528 progressIndicator() \u51fd\u6570\u6dfb\u52a0\u8fdb\u5ea6\u6307\u793a\u5668</p> <pre><code>// val progressPainter = rememberMaskProgressPainter()\n// val progressPainter = rememberSectorProgressPainter()\nval progressPainter = rememberRingProgressPainter()\nval state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    modifier = Modifier\n        .size(200.dp)\n        .progressIndicator(state, progressPainter),\n    state = state,\n    contentDescription = \"\",\n)\n</code></pre> <p>[!TIP] Compose \u7248\u672c\u529f\u80fd\u7531 ProgressIndicatorModifier \u5b9e\u73b0</p>"},{"location":"zh/progress_indicator/#_2","title":"\u81ea\u5b9a\u4e49\u6307\u793a\u5668\u6837\u5f0f","text":"<p>\u4f60\u53ef\u4ee5\u7ee7\u627f AbsProgressPainter \u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u8fdb\u5ea6\u6307\u793a\u5668\uff0c\u5982\u4e0b\uff1a</p> <pre><code>class MyProgressPainter(\n    private val maskColor: Color = Color(PROGRESS_INDICATOR_MASK_COLOR),\n    hiddenWhenIndeterminate: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_INDETERMINATE,\n    hiddenWhenCompleted: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_COMPLETED,\n    stepAnimationDuration: Int = PROGRESS_INDICATOR_STEP_ANIMATION_DURATION,\n) : AbsProgressPainter(\n    hiddenWhenIndeterminate = hiddenWhenIndeterminate,\n    hiddenWhenCompleted = hiddenWhenCompleted,\n    stepAnimationDuration = stepAnimationDuration\n), SketchPainter {\n\n    override val intrinsicSize: Size = Size(200.0, 200.0)\n\n    override fun DrawScope.drawProgress(drawProgress: Float) {\n        // \u7ed8\u5236\u4f60\u7684\u6307\u793a\u5668\n    }\n}\n</code></pre> <p>\u7136\u540e\u4f7f\u7528\u4f60\u81ea\u5df1\u7684\u6307\u793a\u5668\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val progressPainter = remember { MyProgressPainter() }\nval state = rememberAsyncImageState()\nAsyncImage(\n    uri = \"https://example.com/image.jpg\",\n    modifier = Modifier\n        .size(200.dp)\n        .progressIndicator(state, progressPainter),\n    state = state,\n    contentDescription = \"\",\n)\n</code></pre>"},{"location":"zh/progress_indicator/#view","title":"View","text":"<p>\u9996\u5148\u5b89\u88c5\u7ec4\u4ef6</p> <p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre> <p>\u7136\u540e\u914d\u5408 SketchImageView \u4f7f\u7528 show*ProgressIndicator() \u51fd\u6570\u6dfb\u52a0\u8fdb\u5ea6\u6307\u793a\u5668</p> <pre><code>val sketchImageView = SketchImageView(context)\n\nsketchImageView.showMaskProgressIndicator()\n// \u6216\nsketchImageView.showSectorProgressIndicator()\n// \u6216\nsketchImageView.showRingProgressIndicator()\n</code></pre> <p>[!TIP] View \u7248\u672c\u529f\u80fd\u7531 ProgressIndicatorAbility \u5b9e\u73b0</p>"},{"location":"zh/progress_indicator/#_3","title":"\u81ea\u5b9a\u4e49\u6307\u793a\u5668\u6837\u5f0f","text":"<p>\u4f60\u53ef\u4ee5\u7ee7\u627f AbsProgressDrawable \u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u8fdb\u5ea6\u6307\u793a\u5668\uff0c\u5982\u4e0b\uff1a</p> <pre><code>class MyProgressDrawable(\n    hiddenWhenIndeterminate: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_INDETERMINATE,\n    hiddenWhenCompleted: Boolean = PROGRESS_INDICATOR_HIDDEN_WHEN_COMPLETED,\n    stepAnimationDuration: Int = PROGRESS_INDICATOR_DEFAULT_STEP_ANIMATION_DURATION,\n) : AbsProgressDrawable(\n    hiddenWhenIndeterminate = hiddenWhenIndeterminate,\n    hiddenWhenCompleted = hiddenWhenCompleted,\n    stepAnimationDuration = stepAnimationDuration\n) {\n\n    private val paint = Paint().apply {\n        if (VERSION.SDK_INT &gt;= VERSION_CODES.KITKAT) {\n            alpha = this@RingProgressDrawable.alpha\n        }\n        if (VERSION.SDK_INT &gt;= VERSION_CODES.LOLLIPOP) {\n            colorFilter = this@RingProgressDrawable.colorFilter\n        }\n    }\n\n    override fun drawProgress(canvas: Canvas, drawProgress: Float) {\n        val bounds = bounds.takeIf { !it.isEmpty } ?: return\n        canvas.withSave {\n            // \u7ed8\u5236\u4f60\u7684\u6307\u793a\u5668\n        }\n    }\n\n    override fun setAlpha(alpha: Int) {\n        paint.alpha = alpha\n    }\n\n    override fun setColorFilter(colorFilter: ColorFilter?) {\n        paint.colorFilter = colorFilter\n    }\n\n    @Deprecated(\n        \"Deprecated in Java. This method is no longer used in graphics optimizations\",\n        ReplaceWith(\"\")\n    )\n    override fun getOpacity(): Int = PixelFormat.TRANSLUCENT\n\n    override fun getIntrinsicWidth(): Int = 200\n\n    override fun getIntrinsicHeight(): Int = 200\n\n    override fun mutate(): ProgressDrawable {\n        return this\n    }\n}\n</code></pre> <p>\u7136\u540e\u4f7f\u7528\u4f60\u81ea\u5df1\u7684\u6307\u793a\u5668\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val sketchImageView = SketchImageView(context)\nsketchImageView.showProgressIndicator(MyProgressDrawable())\n</code></pre>"},{"location":"zh/register_component/","title":"\u6ce8\u518c\u7ec4\u4ef6","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u652f\u6301\u901a\u8fc7 Fetcher \u548c Decoder \u63a5\u53e3\u6269\u5c55 Sketch \u7684\u529f\u80fd\uff0c\u81ea\u5e26\u7684 <code>sketch-http-*</code> \u548c <code>sketch-animated-*</code> \u4ee5\u53ca <code>sketch-svg</code>\u3001<code>sketch-video</code> \u7b49\u6269\u5c55\u7ec4\u4ef6\u5c31\u662f\u8fd9\u6837\u5b9e\u73b0\u7684</p> <p>\u6269\u5c55\u7ec4\u4ef6\u5728\u4f7f\u7528\u524d\u9700\u8981\u5148\u6ce8\u518c\u5230 Sketch \u6216 ImageRequest\uff0c\u6ce8\u518c\u5230 Sketch \u7684\u7ec4\u4ef6\u6240\u6709 ImageRequest \u90fd\u53ef\u4ee5\u4f7f\u7528\uff0c\u800c\u6ce8\u518c\u5230 ImageRequest \u7684\u7ec4\u4ef6\u5219\u53ea\u6709\u5f53\u524d ImageRequest \u53ef\u4ee5\u4f7f\u7528</p> <p>[!TIP] \u5728 ImageRequest \u4e2d\u6ce8\u518c\u7684\u7ec4\u4ef6\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u5728 Sketch \u4e2d\u6ce8\u518c\u7684\u7ec4\u4ef6</p>"},{"location":"zh/register_component/#sketch","title":"\u6ce8\u518c\u5230 Sketch","text":"<p>\u6ce8\u518c\u5230 Sketch \u6709\u4e24\u79cd\u65b9\u5f0f\uff1a\u81ea\u52a8\u6ce8\u518c\u548c\u624b\u52a8\u6ce8\u518c\uff0c\u81ea\u52a8\u6ce8\u518c\u9ed8\u8ba4\u5f00\u542f\uff0c\u5e76\u4e14\u81ea\u5e26\u7684\u6240\u6709\u6a21\u5757\u90fd\u5df2\u9002\u914d\u4e86\u81ea\u52a8\u6ce8\u518c</p>"},{"location":"zh/register_component/#_2","title":"\u81ea\u52a8\u6ce8\u518c","text":"<p>Sketch \u652f\u6301\u81ea\u52a8\u53d1\u73b0\u5e76\u6ce8\u518c Fetcher \u548c Decoder \u7ec4\u4ef6\uff0c\u5728 jvm \u5e73\u53f0\u901a\u8fc7 <code>ServiceLoader</code> \u5b9e\u73b0\uff0c\u5728\u975e jvm \u5e73\u53f0\u901a\u8fc7 <code>@EagerInitialization</code> \u6ce8\u89e3\u5b9e\u73b0\u3002</p> <p>\u9002\u914d\u4e86\u81ea\u52a8\u6ce8\u518c\u7684\u7ec4\u4ef6\u4f60\u53ea\u9700\u8981\u914d\u7f6e\u5176\u4f9d\u8d56\u5373\u53ef\uff0c\u4e0d\u9700\u8981\u5728\u521d\u59cb\u5316 Sketch \u65f6\u624b\u52a8\u6ce8\u518c\u7ec4\u4ef6\u3002</p>"},{"location":"zh/register_component/#_3","title":"\u624b\u52a8\u6ce8\u518c","text":"<p>\u5982\u679c\u4f60\u60f3\u66f4\u7cbe\u7ec6\u7684\u63a7\u5236\u7ec4\u4ef6\u7684\u6ce8\u518c\u5c31\u53ef\u4ee5\u7981\u7528\u81ea\u52a8\u6ce8\u518c\u7ec4\u4ef6\u529f\u80fd\uff0c\u7136\u540e\u91c7\u7528\u624b\u52a8\u6ce8\u518c\u7ec4\u4ef6\u7684\u65b9\u5f0f\uff0c\u5982\u4e0b\uff1a</p> <pre><code>Sketch.Builder(context).apply {\n    componentLoaderEnabled(false)    // \u7981\u7528\u6240\u6709\u7ec4\u4ef6\u7684\u81ea\u52a8\u6ce8\u518c\n    components {\n        addFetcher(MyFetcher.Factory())\n        addDecoder(MyDecoder.Factory())\n        // ...\n    }\n}.build()\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u53ea\u7981\u7528\u90e8\u5206\u7ec4\u4ef6\u7684\u81ea\u52a8\u6ce8\u518c\u529f\u80fd\uff0c\u5982\u4e0b\uff1a</p> <pre><code>Sketch.Builder(context).apply {\n    addIgnoreFetcherProvider(MyFetcherProvider::class)    // \u7981\u7528 MyFetcherProvider \u7ec4\u4ef6\u7684\u81ea\u52a8\u6ce8\u518c\n    addIgnoreDecoderProvider(MyDecoderProvider::class)    // \u7981\u7528 MyDecoderProvider \u7ec4\u4ef6\u7684\u81ea\u52a8\u6ce8\u518c\n    components {\n        addFetcher(MyFetcher.Factory())\n        addDecoder(MyDecoder.Factory())\n        // ...\n    }\n}.build()\n</code></pre>"},{"location":"zh/register_component/#_4","title":"\u9002\u914d\u81ea\u52a8\u6ce8\u518c","text":"<p>\u65b0\u5f00\u53d1\u7684\u7ec4\u4ef6\u8981\u9002\u914d\u81ea\u52a8\u6ce8\u518c\u529f\u80fd\uff0c\u9700\u8981\u6309\u5982\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff08\u4ee5\u5168\u5e73\u53f0\u7ec4\u4ef6\u4e3a\u4f8b\uff09\uff1a</p> <ol> <li>\u5728 commonMain \u76ee\u5f55\u4e0b\u521b\u5efa expect \u7248\u672c\u7684 FetcherProvider \u6216 DecoderProvider \u7684\u5b9e\u73b0\u7c7b</li> <li>jvm \u5e73\u53f0\uff1a<ol> <li>\u5728 jvmCommonMain \u76ee\u5f55\u4e0b\u521b\u5efa actual \u7248\u672c\u7684 FetcherProvider \u6216 DecoderProvider \u7684\u5b9e\u73b0\u7c7b\uff0c\u6ce8\u610f\u8981\u4e3a    \u5b9e\u73b0\u7c7b\u6dfb\u52a0 @Keep \u6ce8\u89e3\uff0c\u56e0\u4e3a ServiceLoader \u662f\u901a\u8fc7\u53cd\u5c04\u6765\u521b\u5efa\u5b83\u7684\u5b9e\u4f8b\u7684</li> <li>\u5728 androidMain \u548c desktopMain \u76ee\u5f55\u4e0b\u521b\u5efa 'resources/META-INF/services' \u76ee\u5f55</li> <li>\u5728 services \u76ee\u5f55\u4e0b\u521b\u5efa \u4e00\u4e2a\u540d\u4e3a 'com.github.panpf.sketch.util.FetcherProvider' \u6216 '    com.github.panpf.sketch.util.DecoderProvider' \u7684\u6587\u4ef6</li> <li>\u5728\u6587\u4ef6\u4e2d\u4e00\u884c\u4e00\u4e2a\u586b\u5199\u4f60\u7684 FetcherProvider \u6216 DecoderProvider \u5b9e\u73b0\u7c7b\u7684\u5168\u540d</li> </ol> </li> <li>\u975e jvm \u5e73\u53f0\uff1a<ol> <li>\u5728 nonJvmCommonMain \u76ee\u5f55\u4e0b\u521b\u5efa actual \u7248\u672c\u7684 FetcherProvider \u6216 DecoderProvider \u7684\u5b9e\u73b0\u7c7b</li> </ol> </li> <li>\u5728 iosMain\u3001wasmJsMain \u5e73\u53f0\u76ee\u5f55\u4e0b\u4efb\u610f\u4f4d\u7f6e\u521b\u5efa\u4efb\u610f\u6587\u4ef6\u586b\u5199\u4ee5\u4e0b\u5185\u5bb9\uff1a        <pre><code>@Suppress(\"DEPRECATION\")\n@OptIn(ExperimentalStdlibApi::class)\n@EagerInitialization\n@Deprecated(\"\", level = DeprecationLevel.HIDDEN)\nval ktorHttpUriFetcherProviderInitHook: Any = ComponentLoader.register(KtorHttpUriFetcherProvider())\n</code></pre></li> <li>\u5728 jsMain \u5e73\u53f0\u76ee\u5f55\u4e0b\u4efb\u610f\u4f4d\u7f6e\u521b\u5efa\u4efb\u610f\u6587\u4ef6\u586b\u5199\u4ee5\u4e0b\u5185\u5bb9\uff1a       <pre><code>@JsExport\n@Suppress(\"DEPRECATION\")\n@OptIn(ExperimentalStdlibApi::class, ExperimentalJsExport::class)\n@EagerInitialization\n@Deprecated(\"\", level = DeprecationLevel.HIDDEN)\nval ktorHttpUriFetcherProviderInitHook: Any = ComponentLoader.register(KtorHttpUriFetcherProvider())\n</code></pre></li> <li><code>ktorHttpUriFetcherProviderInitHook</code> \u548c <code>KtorHttpUriFetcherProvider</code> \u9700\u8981\u66ff\u6362\u6210\u4f60\u7684        FetcherProvider \u6216 DecoderProvider \u5b9e\u73b0\u7c7b\u7684\u540d\u5b57</li> </ol> <p>[!TIP] \u5b8c\u6574\u793a\u4f8b\u8bf7\u53c2\u8003 <code>sketch-http-ktor3</code> \u6a21\u5757</p>"},{"location":"zh/register_component/#imagerequest","title":"\u6ce8\u518c\u5230 ImageRequest","text":"<p>\u6ce8\u518c\u5230 ImageRequest \u5219\u548c\u624b\u52a8\u6ce8\u518c\u5230 Sketch \u4e00\u6837\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"http://sample.com/sample.jpeg\") {\n    components {\n        addFetcher(MyFetcher.Factory())\n        addDecoder(MyDecoder.Factory())\n        // ...\n    }\n}\n</code></pre>"},{"location":"zh/request_interceptor/","title":"RequestInterceptor","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u901a\u8fc7 RequestInterceptor \u6765\u62e6\u622a ImageRequest \u7684\u6267\u884c\u8fc7\u7a0b\uff0c\u4f60\u53ef\u4ee5\u501f\u6b64\u6539\u53d8\u6267\u884c\u8fc7\u7a0b\u7684\u8f93\u5165\u548c\u8f93\u51fa</p> <p>\u9996\u5148\u5b9e\u73b0 RequestInterceptor \u63a5\u53e3\u5b9a\u4e49\u4f60\u7684 RequestInterceptor\uff0c\u5982\u4e0b\uff1a</p> <pre><code>class MyRequestInterceptor : RequestInterceptor {\n\n    // \u5982\u679c\u5f53\u524d RequestInterceptor \u4f1a\u4fee\u6539\u8fd4\u56de\u7684\u7ed3\u679c\u5e76\u4e14\u4ec5\u7528\u4e8e\u90e8\u5206\u8bf7\u6c42\uff0c\u90a3\u4e48\u8bf7\u7ed9\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684 key \u7528\u4e8e\u6784\u5efa\u7f13\u5b58 key\uff0c\u5426\u5219\u7ed9 null \u5373\u53ef\n    override val key: String? = null\n\n    // \u7528\u4e8e\u6392\u5e8f\uff0c\u503c\u8d8a\u5927\u5728\u5217\u8868\u4e2d\u8d8a\u9760\u540e\u3002\u53d6\u503c\u8303\u56f4\u662f 0 ~ 100\u3002\u901a\u5e38\u662f\u96f6\u3002\u53ea\u6709 EngineRequestInterceptor \u53ef\u4ee5\u662f 100\n    override val sortWeight: Int = 0\n\n    override suspend fun intercept(chain: Chain): Result&lt;ImageData&gt; {\n        // \u6240\u6709\u8bf7\u6c42\u7981\u6b62\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\n        val newRequest = chain.request.newRequest {\n            memoryCachePolicy(CachePolicy.DISABLED)\n        }\n        return chain.proceed(newRequest)\n    }\n}\n</code></pre> <p>[!TIP] 1. MyRequestInterceptor \u6f14\u793a\u4e86\u4e00\u4e2a\u7981\u6b62\u6240\u6709\u8bf7\u6c42\u4f7f\u7528\u5185\u5b58\u7f13\u5b58\u7684\u6848\u4f8b 2. \u5982\u679c\u4f60\u60f3\u4fee\u6539\u8fd4\u56de\u7ed3\u679c\uff0c\u5c31\u62e6\u622a proceed \u65b9\u6cd5\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ImageData \u5373\u53ef 3. \u5982\u679c\u60f3\u4e0d\u518d\u6267\u884c\u8bf7\u6c42\u53ea\u9700\u4e0d\u6267\u884c proceed \u65b9\u6cd5\u5373\u53ef</p> <p>\u7136\u540e\u6ce8\u518c\u4f60\u7684 RequestInterceptor\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u5728\u81ea\u5b9a\u4e49 Sketch \u65f6\u4e3a\u6240\u6709 ImageRequest \u6ce8\u518c\nSketch.Builder(context).apply {\n    components {\n        addRequestInterceptor(MyRequestInterceptor())\n    }\n}.build()\n\n// \u52a0\u8f7d\u56fe\u7247\u65f6\u4e3a\u5355\u4e2a ImageRequest \u6ce8\u518c\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addRequestInterceptor(MyRequestInterceptor())\n    }\n}\n</code></pre>"},{"location":"zh/resize/","title":"Resize","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u4f1a\u8c03\u6574\u56fe\u7247\u7684\u5927\u5c0f\u907f\u514d\u8d85\u51fa Target \u7684\u9700\u8981\u9020\u6210\u5185\u5b58\u6d6a\u8d39</p> <p>\u8c03\u6574\u56fe\u7247\u5927\u5c0f\u4f9d\u8d56 ImageRequest \u7684 sizeResolver\u3001precisionDecider\u3001scaleDecider \u5c5e\u6027\uff0c\u5f53\u4ed6\u4eec\u90fd\u786e\u5b9a\u65f6\u4f1a\u751f\u6210\u4e00\u4e2a Resize \u4ea4\u7ed9 Decoder \u4f7f\u7528</p> <p>Decoder \u5148\u5728\u89e3\u7801\u65f6\u901a\u8fc7\u5b50\u91c7\u6837\u6216\u533a\u57df\u5b50\u91c7\u6837\u964d\u4f4e\u56fe\u7247\u5927\u5c0f\uff0c\u89e3\u7801\u540e\u5982\u679c\u5927\u5c0f\u4f9d\u7136\u4e0d\u7b26\u5408 Resize \u8981\u6c42\u5c31\u4f1a\u518d\u6b21\u8c03\u6574</p> <p>Resize \u7531 Size\u3001Precision\u3001Scale \u6784\u6210</p> <ul> <li>Size\uff1a\u671f\u671b\u7684\u5bbd\u548c\u9ad8</li> <li>Precision\uff1a\u7cbe\u5ea6\u3002\u51b3\u5b9a\u5982\u4f55\u4f7f\u7528 Size \u53bb\u8c03\u6574\u56fe\u7247\u7684\u5927\u5c0f<ul> <li>LESS_PIXELS\uff1a\u53ea\u8981\u6700\u7ec8 Image \u7684\u50cf\u7d20\u6570\uff08\u5bbd\u4e58\u4ee5\u9ad8\uff09\u5c0f\u4e8e\u7b49\u4e8e Size \u7684\u50cf\u7d20\u6570\u5373\u53ef</li> <li>SMALLER_SIZE\uff1a\u53ea\u8981\u6700\u7ec8 Image \u7684\u5bbd\u548c\u9ad8\u90fd\u5c0f\u4e8e\u7b49\u4e8e Size \u5373\u53ef</li> <li>SAME_ASPECT_RATIO\uff1a\u786e\u4fdd\u6700\u7ec8 Image \u7684\u5bbd\u9ad8\u6bd4\u548c Size \u7684\u5bbd\u9ad8\u6bd4\u4e00\u81f4\u5e76\u4e14\u50cf\u7d20\u6570\u5c0f\u4e8e\u7b49\u4e8e Size   \u7684\u50cf\u7d20\u6570\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\u4f1a\u6839\u636e Scale \u88c1\u526a\u539f\u56fe</li> <li>EXACTLY\uff1a\u786e\u4fdd\u6700\u7ec8 Image \u7684\u5927\u5c0f\u548c Size \u4e00\u81f4\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\u4f1a\u6839\u636e Scale \u88c1\u526a\u539f\u56fe</li> </ul> </li> <li>Scale\uff1a\u7f29\u653e\u3002Precision \u4e3a EXACTLY \u6216 SAME_ASPECT_RATIO \u65f6\u51b3\u5b9a\u5982\u4f55\u88c1\u526a\u539f\u56fe<ul> <li>START_CROP\uff1a\u4fdd\u7559\u5934\u90e8\u90e8\u5206</li> <li>CENTER_CROP\uff1a\u4fdd\u7559\u4e2d\u95f4\u90e8\u5206</li> <li>END_CROP\uff1a\u4fdd\u7559\u5c3e\u90e8\u90e8\u5206</li> <li>FILL\uff1a\u5168\u90e8\u4fdd\u7559\uff0c\u4f46\u4f1a\u53d8\u5f62</li> </ul> </li> </ul>"},{"location":"zh/resize/#_1","title":"\u914d\u7f6e","text":"<p>ImageRequest \u548c ImageOptions \u90fd\u63d0\u4f9b\u4e86 resize\u3001size\u3001precision\u3001scale \u65b9\u6cd5\u7528\u4e8e\u914d\u7f6e Resize\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    /* \u4e00\u6b21\u8bbe\u7f6e\u4e09\u4e2a\u5c5e\u6027 */\n    resize(\n        width = 100,\n        height = 100,\n        precision = Precision.SAME_ASPECT_RATIO,\n        scale = Scale.END_CROP\n    )\n    // \u6216\n    resize(\n        size = Size(100, 100),\n        precision = LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO),\n        scale = LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP)\n    )\n    // \u6216\n    resize(\n        size = FixedSizeResolver(100, 100),\n        precision = LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO),\n        scale = LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP)\n    )\n\n    /* \u4ec5\u8bbe\u7f6e\u5927\u5c0f\u5c5e\u6027 */\n    size(100, 100)\n    // \u6216\n    size(Size(100, 100))\n    // \u6216\n    size(FixedSizeResolver(100, 100))\n\n    /* \u4ec5\u8bbe\u7f6e\u7cbe\u5ea6\u5c5e\u6027 */\n    precision(Precision.SAME_ASPECT_RATIO)\n    // \u6216\n    precision(LongImagePrecisionDecider(Precision.SAME_ASPECT_RATIO))\n\n    /* \u4ec5\u8bbe\u7f6e\u7f29\u653e\u5c5e\u6027 */\n    scale(Scale.END_CROP)\n    // \u6216\n    scale(LongImageScaleDecider(longImage = Scale.START_CROP, otherImage = Scale.CENTER_CROP))\n}\n</code></pre>"},{"location":"zh/resize/#sizeresolver","title":"SizeResolver","text":"<p>Sketch \u4f7f\u7528 Resolver \u5305\u88c5\u5668\u4e3a ImageRequest \u63d0\u4f9b Size\uff0c\u8fd9\u662f\u56e0\u4e3a View \u6216 Compose \u7ec4\u4ef6\u7684\u5927\u5c0f\u5728\u6784\u5efa ImageRequest \u65f6\u53ef\u80fd\u65e0\u6cd5\u786e\u5b9a\uff0c\u9700\u8981\u7b49\u5230\u7ed8\u5236\u9636\u6bb5\u624d\u80fd\u83b7\u53d6\uff0c\u6240\u4ee5\u501f\u52a9 SizeResolver \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898</p>"},{"location":"zh/resize/#precisiondecider-scaledecider","title":"PrecisionDecider \u548c ScaleDecider","text":"<p>Sketch \u540c\u6837\u4f7f\u7528 Decider \u5305\u88c5\u5668\u4e3a ImageRequest \u63d0\u4f9b Precision \u548c Scale \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u89e3\u7801\u65f6\u6839\u636e\u56fe\u7247\u5927\u5c0f\u548c Resize \u52a8\u6001\u51b3\u5b9a\u4f7f\u7528\u4f55\u79cd Precision \u548c Scale</p> <p>\u9ed8\u8ba4\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5b9e\u73b0\uff1a</p> <ul> <li>PrecisionDecider\uff1a\u7cbe\u5ea6\u51b3\u7b56\u5668\u3002\u6839\u636e\u56fe\u7247\u5927\u5c0f\u548c Resize \u7684 Size \u51b3\u5b9a\u4f7f\u7528\u4f55\u79cd Precision<ul> <li>FixedPrecisionDecider\uff1a\u59cb\u7ec8\u4f7f\u7528\u6307\u5b9a\u7684 Precision</li> <li>LongImagePrecisionDecider\uff1a\u5982\u679c\u662f\u957f\u56fe\u5c31\u4f7f\u7528\u6307\u5b9a\u7684 Precision\uff0c\u5426\u5219\u59cb\u7ec8\u4f7f\u7528 LESS_PIXELS</li> </ul> </li> <li>ScaleDecider\uff1a\u7f29\u653e\u51b3\u7b56\u5668\u3002\u6839\u636e\u56fe\u7247\u5927\u5c0f\u548c Resize \u7684 Size \u51b3\u5b9a\u4f7f\u7528\u4f55\u79cd Scale<ul> <li>FixedScaleDecider\uff1a\u59cb\u7ec8\u4f7f\u7528\u6307\u5b9a\u7684 Scale</li> <li>LongImageScaleDecider\uff1a\u6307\u5b9a\u4e24\u4e2a Scale\uff0c\u957f\u56fe\u4f7f\u7528\u7b2c\u4e00\u4e2a\uff0c\u5426\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a</li> </ul> </li> </ul> <p>[!TIP] 1. \u4f7f\u7528 LongImagePrecisionDecider \u548c LongImageScaleDecider      \u6709\u52a9\u4e8e\u63d0\u9ad8\u957f\u56fe\u5728\u7f51\u683c\u5217\u8868\u4e2d\u7684\u6e05\u6670\u5ea6\u3002\u4e86\u89e3\u66f4\u591a 2. \u957f\u56fe\u89c4\u5219\u7684\u9ed8\u8ba4\u5b9e\u73b0\u4e3a DefaultLongImageDecider\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u521b\u5efa LongImagePrecisionDecider      \u6216 LongImageScaleDecider \u65f6\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u89c4\u5219</p>"},{"location":"zh/resize/#_2","title":"\u6784\u5efa\u987a\u5e8f\u548c\u9ed8\u8ba4\u503c","text":"<p>\u5728\u6784\u5efa ImageRequest \u65f6\u786e\u5b9a\u8fd9\u4e9b\u5c5e\u6027\u7684\u503c\u8fd8\u662f\u6709\u4e9b\u590d\u6742\u7684\uff0c\u5982\u4e0b\uff1a</p> <ul> <li>Size\uff1a<ol> <li>ImageRequest.Builder.sizeResolver</li> <li>Target.getImageOptions().sizeResolver</li> <li>ImageRequest.Builder.defaultOptions.sizeResolver</li> <li>Sketch.globalImageOptions.sizeResolver</li> <li>Target.getSizeResolver()<ol> <li>View \u6216 Compose \u7ec4\u4ef6\u7684\u5bbd\u9ad8</li> <li>DisplayMetrics size \u6216 LocalWindow containerSize</li> </ol> </li> <li>PlatformContext.screenSize()</li> </ol> </li> <li>Precision\uff1a<ol> <li>ImageRequest.Builder.precisionDecider</li> <li>Target.getImageOptions().precisionDecider</li> <li>ImageRequest.Builder.defaultOptions.precisionDecider</li> <li>Sketch.globalImageOptions.precisionDecider</li> <li>Precision.LESS_PIXELS</li> </ol> </li> <li>Scale\uff1a<ol> <li>ImageRequest.Builder.scaleDecider</li> <li>Target.getImageOptions().scaleDecider</li> <li>ImageRequest.Builder.defaultOptions.scaleDecider</li> <li>Sketch.globalImageOptions.scaleDecider</li> <li>Scale.CENTER_CROP</li> </ol> </li> </ul> <p>[!TIP] 1. Target \u662f ViewTarget \u65f6\u4f18\u5148\u53d6 View \u7684 LayoutParams \u5bbd\u9ad8\uff0c\u5176\u6b21\u5ef6\u8fdf\u5230\u7ed8\u5236\u9636\u6bb5\u53d6 View      \u7684\u6d4b\u91cf\u5bbd\u9ad8\uff0c\u5982\u679c\u6ca1\u6709\u6267\u884c\u5230\u7ed8\u5236\u9636\u6bb5\u90a3\u4e48\u8bf7\u6c42\u4e5f\u4e0d\u4f1a\u6267\u884c 2. \u5047\u5982\u7ec4\u4ef6\u7684\u5bbd\u662f\u56fa\u5b9a\u503c\uff08\u4f8b\u5982 100\uff09\uff0c\u9ad8\u662f wrap \u65f6\uff0cSize \u5c06\u4f1a\u662f '100x\u5c4f\u5e55\u6216\u5bb9\u5668\u7684\u9ad8' 3. \u8be6\u7ec6\u6784\u5efa\u89c4\u5219\u8bf7\u53c2\u8003 ImageRequest.Builder.build() \u65b9\u6cd5</p>"},{"location":"zh/resize/#platformcontextscreensize","title":"PlatformContext.screenSize()","text":"<p>PlatformContext.screenSize() \u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u5c4f\u5e55\u7684\u5927\u5c0f\uff0c\u6784\u5efa ImageRequest \u65f6\u5728\u65e0\u6cd5\u83b7\u53d6 Size \u7684\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u5c4f\u5e55\u5927\u5c0f\u4f5c\u4e3a\u6700\u7ec8\u7684 Size</p> <p>[!IMPORTANT] screenSize() \u5728\u975e Js \u5e73\u53f0\u90fd\u80fd\u83b7\u53d6\u5230\u51c6\u786e\u7684\u5c4f\u5e55\u5927\u5c0f\uff0c\u4f46\u5728 Js \u5e73\u53f0\u4f1a\u59cb\u7ec8\u8fd4\u56de <code>Size(1920, 1080)</code></p>"},{"location":"zh/resize/#sizemultiplier","title":"sizeMultiplier","text":"<p>sizeMultiplier \u7528\u4e8e\u5bf9 size \u8fdb\u884c\u7f29\u653e\uff0c\u4f8b\u5982 sizeMultiplier \u4e3a 2.0 \u65f6\uff0csize \u4e3a 100x100 \u65f6\u5b9e\u9645 size \u4e3a 200x200</p> <p>\u8fd9\u901a\u5e38\u7528\u4e8e\u9ed8\u8ba4\u7528\u7ec4\u4ef6\u7684\u5927\u5c0f\u4f5c\u4e3a size\uff0c\u4f46\u662f\u7ec4\u4ef6\u592a\u5c0f\uff0c\u9700\u8981\u653e\u5927 size \u4ee5\u63d0\u9ad8\u56fe\u7247\u8d28\u91cf\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    sizeMultiplier(2.0f)\n}\n</code></pre>"},{"location":"zh/resize/#resizeondraw","title":"resizeOnDraw","text":"<p>ImageRequest \u548c ImageOptions \u7684 resizeOnDraw \u5c5e\u6027\u7528\u4e8e\u5c06 Resize \u5e94\u7528\u5230 Target \u7684 placeholder, error, result Image \u4e0a\uff0c\u5728\u7ed8\u5236\u671f\u95f4\u6539\u53d8 Image \u7684\u5927\u5c0f</p> <p>resizeOnDraw \u4f9d\u8d56 ResizeOnDrawHelper \u5b9e\u73b0\uff0cResizeOnDrawHelper \u4f1a\u7528 ResizeDrawable \u6216 ResizePainter \u5c06 placeholder, error, result Image \u5305\u4e00\u5c42\uff0c\u5bf9\u5916\u7528 Resize \u7684 Size \u4f5c\u4e3a\u5bbd\u548c\u9ad8\uff0c\u5185\u90e8\u7528 Resize \u7684 Scale \u5bf9 Image \u8fdb\u884c\u7f29\u653e</p> <p>resizeOnDraw \u642d\u914d CrossfadeTransition \u53ef\u5b9e\u73b0\u5b8c\u7f8e\u8fc7\u6e21\u3002\u4e86\u89e3\u5b8c\u7f8e\u8fc7\u5ea6</p> <p>[!IMPORTANT] 1. ResizeOnDrawHelper \u7531 Target \u63d0\u4f9b\uff0c\u56e0\u6b64\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e Target\uff0cresizeOnDraw \u5c5e\u6027\u4e5f\u5c06\u65e0\u6548</p>"},{"location":"zh/result_cache/","title":"\u7ed3\u679c\u7f13\u5b58","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>\u4e3a\u4e86\u907f\u514d\u91cd\u590d\u8f6c\u6362\u56fe\u7247\u5e76\u63d0\u9ad8\u56fe\u7247\u7684\u52a0\u8f7d\u901f\u5ea6 Sketch \u5f15\u5165\u4e86\u7ed3\u679c\u7f13\u5b58\uff0c\u7ed3\u679c\u7f13\u5b58\u529f\u80fd\u4f1a\u5c06\u8f6c\u6362\u540e\u7684\u56fe\u7247\u6301\u4e45\u7684\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u4e0b\u6b21\u76f4\u63a5\u4ece\u78c1\u76d8\u8bfb\u53d6\u8df3\u8fc7\u8f6c\u6362\u8fc7\u7a0b\u3002</p> <p>\u7ed3\u679c\u7f13\u5b58\u529f\u80fd\u7531 ResultCacheDecodeInterceptor \u8d1f\u8d23\u6838\u5fc3\u903b\u8f91\uff0cDiskCache \u8d1f\u8d23\u5b58\u50a8\u7ba1\u7406</p> <p>DiskCache \u7684\u9ed8\u8ba4\u5b9e\u73b0\u662f LruDiskCache\uff1a</p> <ul> <li>\u9ed8\u8ba4\u6700\u5927\u5bb9\u91cf\u662f 200 MB</li> <li>\u6839\u636e\u6700\u5c11\u4f7f\u7528\u539f\u5219\u6e05\u9664\u65e7\u7684\u7f13\u5b58</li> </ul>"},{"location":"zh/result_cache/#_2","title":"\u7f13\u5b58\u76ee\u5f55","text":"<p>\u4e3a\u4e86\u9002\u5e94\u4e0d\u540c\u5e73\u53f0\u7684\u5dee\u5f02\uff0c\u6240\u4ee5\u5728\u4e0d\u540c\u5e73\u53f0\u4e0a\u7f13\u5b58\u76ee\u5f55\u7684\u4f4d\u7f6e\u4e5f\u4e0d\u4e00\u6837</p>"},{"location":"zh/result_cache/#android","title":"Android","text":"<p>\u5728 Android \u4e0a\u9ed8\u8ba4\u7684\u7ed3\u679c\u7f13\u5b58\u76ee\u5f55\u6309\u4ee5\u4e0b\u987a\u5e8f\u83b7\u53d6\uff1a</p> <ol> <li><code>/sdcard/Android/data/[APP_PACKAGE_NAME]/cache/sketch4/result</code></li> <li><code>/data/data/[APP_PACKAGE_NAME]/cache/sketch4/result</code></li> </ol> <p>[!TIP] \u4e3a\u4e86\u517c\u5bb9\u591a\u8fdb\u7a0b\uff0c\u5728\u975e\u4e3b\u8fdb\u7a0b\u4f7f\u7528 Sketch \u65f6\u7f13\u5b58\u76ee\u5f55\u540d\u79f0\u540e\u4f1a\u52a0\u4e0a\u8fdb\u7a0b\u540d\uff0c\u4f8b\u5982 \"result:push\"</p>"},{"location":"zh/result_cache/#ios","title":"iOS","text":"<p>\u5728 iOS \u4e0a\u9ed8\u8ba4\u7684\u7ed3\u679c\u7f13\u5b58\u76ee\u5f55\u662f\uff1a</p> <pre><code>val appCacheDirectory =\n    NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, true).first() as String\nval resultCacheDir = \"$appCacheDirectory/sketch4/result\"\n</code></pre>"},{"location":"zh/result_cache/#desktop","title":"Desktop","text":"<p>\u5728\u684c\u9762\u5e73\u53f0\u4e0a\u9ed8\u8ba4\u7684\u7ed3\u679c\u7f13\u5b58\u76ee\u5f55\u662f\uff1a</p> <pre><code>val appName = (getComposeResourcesPath() ?: getJarPath(Sketch::class.java)).md5()\n\n// macOS\n\"/Users/[user]/Library/Caches/SketchImageLoader/${appName}/sketch4/result\"\n\n// Windows\n\"C:\\\\Users\\\\[user]\\\\AppData\\\\Local\\\\SketchImageLoader\\\\${appName}\\\\sketch4/result\\\\Cache\"\n\n// Linux\n\"/home/[user]/.cache/SketchImageLoader/${appName}/sketch4/result\"\n</code></pre>"},{"location":"zh/result_cache/#web","title":"Web","text":"<p>Web \u5e73\u53f0\u5c1a\u4e0d\u652f\u6301\u7ed3\u679c\u7f13\u5b58</p>"},{"location":"zh/result_cache/#_3","title":"\u81ea\u5b9a\u4e49","text":"<p>\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316 Sketch \u65f6\u901a\u8fc7 Sketch.Builder \u7684 resultCache() \u6216 resultCacheOptions() \u65b9\u6cd5\u81ea\u5b9a\u4e49\u7ed3\u679c\u7f13\u5b58\u7684\u5b9e\u73b0\u6216\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u4f7f\u7528\u9ed8\u8ba4\u7684 LruDiskCache \u5b9e\u73b0\u5e76\u914d\u7f6e\u5176\u53c2\u6570\nSketch.Builder(context).apply {\n    resultCacheOptions(\n        DiskCache.Options(\n            // directory \u548c appCacheDirectory \u4e8c\u9009\u4e00\u5373\u53ef\n            directory = \"/tmp/myapp/sketch/result\",\n            // directory \u548c appCacheDirectory \u4e8c\u9009\u4e00\u5373\u53ef\n            appCacheDirectory = \"/tmp/myapp\",\n            // 100 MB\n            maxSize = 1024 * 1024 * 100,\n            // app \u5bf9\u7ed3\u679c\u7f13\u5b58\u7684\u7ba1\u7406\u7248\u672c\u53f7\uff0c\u5982\u679c\u60f3\u6e05\u9664\u65e7\u7684\u7ed3\u679c\u7f13\u5b58\u5c31\u5347\u7ea7\u6b64\u7248\u672c\u53f7\n            appVersion = 1,\n        )\n    )\n}.build()\n\n// \u4f7f\u7528\u4f60\u81ea\u5df1\u7684 DiskCache \u5b9e\u73b0\nclass MyDiskCache : DiskCache {\n    // ...\n}\nSketch.Builder(context).apply {\n    resultCache(MyDiskCache())\n}.build()\n</code></pre>"},{"location":"zh/result_cache/#_4","title":"\u7f13\u5b58\u7b56\u7565","text":"<p>\u7ed3\u679c\u7f13\u5b58\u7b56\u7565\u7528\u4e8e\u63a7\u5236\u5982\u4f55\u4f7f\u7528\u7ed3\u679c\u7f13\u5b58\uff0c\u9ed8\u8ba4\u914d\u7f6e\u662f CachePolicy.ENABLED\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 ImageRequest \u6216 ImageOptions \u7684 resultCachePolicy \u5c5e\u6027\u914d\u7f6e\u5b83:</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // \u7981\u7528\n    resultCachePolicy(CachePolicy.DISABLED)\n    // \u53ea\u8bfb\n    resultCachePolicy(CachePolicy.READ_ONLY)\n    // \u53ea\u5199\n    resultCachePolicy(CachePolicy.WRITE_ONLY)\n} \n</code></pre>"},{"location":"zh/result_cache/#key","title":"\u7f13\u5b58 key","text":"<p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b Sketch \u4f1a\u81ea\u52a8\u6839\u636e\u8bf7\u6c42\u7684\u914d\u7f6e\u751f\u6210\u7ed3\u679c\u7f13\u5b58 key\uff0c\u4f46\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u5c5e\u6027\u81ea\u5b9a\u4e49\u7ed3\u679c\u7f13\u5b58 key\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u7f13\u5b58 key\n    resultCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u7ed3\u679c\u7f13\u5b58 key\n    resultCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n\nImageOptions {\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u7ed3\u679c\u7f13\u5b58 key\n    resultCacheKey(\"https://example.com/image.jpg?width=100&amp;height=100\")\n\n    // \u4fee\u6539\u81ea\u52a8\u751f\u6210\u7684\u7ed3\u679c\u7f13\u5b58 key\n    resultCacheKeyMapper(CacheKeyMapper { \"${it}&amp;width=100&amp;height=100\" })\n}\n</code></pre> <p>\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u548c\u83b7\u53d6\u6700\u7ec8\u7684\u7ed3\u679c\u7f13\u5b58 key\uff1a</p> <pre><code>// \u5728\u81ea\u5b9a\u4e49\u7684 RequestInterceptor\u3001DecodeInterceptor\u3001Transformation\u3001Fetcher\u3001Decoder \u7ec4\u4ef6\u4e2d\n// \u53ef\u4ee5\u901a\u8fc7 RequestContext \u83b7\u53d6\u7ed3\u679c\u7f13\u5b58 key\nval requestContext: RequestContext = ...\nrequestContext.resultCacheKey\n\n// \u4ece ImageResult \u4e2d\u83b7\u53d6\u7ed3\u679c\u7f13\u5b58 key\nval imageSuccess = sketch.execute(request) as ImageResult.Success\nimageSuccess.resultCacheKey\n</code></pre>"},{"location":"zh/result_cache/#_5","title":"\u8bfb\u5199\u7f13\u5b58","text":"<p>\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>sketch.resultCache</code> \u5c5e\u6027\u83b7\u53d6\u7ed3\u679c\u7f13\u5b58\u5b9e\u4f8b\u6765\u8bbf\u95ee\u7ed3\u679c\u7f13\u5b58\uff0c\u4f46\u8981\u6ce8\u610f\u5148\u83b7\u53d6\u9501\u518d\u8bbf\u95ee\uff0c\u8fd9\u6837\u80fd\u907f\u514d\u5728\u591a\u7ebf\u7a0b\u4e0b\u51fa\u95ee\u9898\uff0c\u5982\u4e0b\uff1a</p> <pre><code>scope.launch {\n    val resultCache = sketch.resultCache\n    val resultCacheKey = requestContext.resultCacheKey\n    resultCache.withLock(resultCacheKey) {\n        // get\n        openSnapshot(resultCacheKey)?.use { snapshot -&gt;\n            val dataPath: Path = snapshot.data\n            val metadataPath: Path = snapshot.metadata\n            val dataContent = fileSystem.source(dataPath).buffer().use {\n                it.readUtf8()\n            }\n            val metadataContent = fileSystem.source(metadataPath).buffer().use {\n                it.readUtf8()\n            }\n        }\n\n        // edit\n        val editor: DiskCache.Editor? = openEditor(resultCacheKey)\n        if (editor != null) {\n            try {\n                val dataPath: Path = editor.data\n                val metadataPath: Path = editor.metadata\n                fileSystem.sink(dataPath).buffer().use {\n                    it.writeUtf8(\"data\")\n                }\n                fileSystem.sink(metadataPath).buffer().use {\n                    it.writeUtf8(\"metadata\")\n                }\n                editor.commit()\n            } catch (e: Exception) {\n                editor.abort()\n            }\n        }\n\n        // remove\n        val cleared: Boolean = remove(resultCacheKey)\n    }\n\n    // Clear all\n    resultCache.clear()\n}\n</code></pre> <p>[!CAUTION] 1. \u540c\u4e00\u4e2a key \u7684 openSnapshot \u548c openEditor \u662f\u4e92\u76f8\u51b2\u7a81\u7684\uff0c\u4f8b\u5982 openSnapshot \u672a\u5173\u95ed\u524d openEditor      \u59cb\u7ec8\u8fd4\u56de null\uff0c\u53cd\u4e4b\u4ea6\u7136 2. \u6240\u4ee5\u4e00\u5b9a\u8981\u5728 withLock \u91cc\u9762\u6267\u884c\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u610f\u5916</p> <p>\u66f4\u591a\u53ef\u7528\u65b9\u6cd5\u8bf7\u53c2\u8003 DiskCache</p>"},{"location":"zh/result_cache/#_6","title":"\u6e05\u9664\u7f13\u5b58","text":"<p>\u7ed3\u679c\u7f13\u5b58\u4f1a\u5728\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u4e0b\u6e05\u9664\uff1a</p> <ol> <li>\u4e3b\u52a8\u8c03\u7528 DiskCache \u7684 <code>remove()</code>\u3001clear()` \u65b9\u6cd5</li> <li>\u4e3b\u52a8\u8c03\u7528 DiskCache.Editor \u7684 <code>abort()</code> \u65b9\u6cd5</li> <li>\u8fbe\u5230\u6700\u5927\u5bb9\u91cf\u65f6\u81ea\u52a8\u6e05\u9664\u8f83\u65e7\u7684\u7f13\u5b58</li> </ol>"},{"location":"zh/save_cellular_traffic/","title":"\u8282\u7701\u8702\u7a9d\u6d41\u91cf","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>[!IMPORTANT] \u4ec5\u5b89\u5353\u5e73\u53f0\u53ef\u7528</p> <p>\u8282\u7701\u8702\u7a9d\u6d41\u91cf\u529f\u80fd\u53ef\u4ee5\u5728\u68c0\u6d4b\u5230\u5f53\u524d\u662f\u8702\u7a9d\u6d41\u91cf\u65f6\u5c06 ImageRequest \u7684 depth \u53c2\u6570\u8bbe\u7f6e\u4e3a Depth .LOCAL\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u518d\u4ece\u7f51\u7edc\u4e0b\u8f7d\u56fe\u7247</p>"},{"location":"zh/save_cellular_traffic/#_2","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-core:${LAST_VERSION}\")\n</code></pre>"},{"location":"zh/save_cellular_traffic/#_3","title":"\u914d\u7f6e","text":"<p>\u9996\u5148\u6ce8\u518c SaveCellularTrafficRequestInterceptor \u8bf7\u6c42\u62e6\u622a\u5668\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// \u5728\u81ea\u5b9a\u4e49 Sketch \u65f6\u4e3a\u6240\u6709 ImageRequest \u6ce8\u518c\nSketch.Builder(context).apply {\n    components {\n        addRequestInterceptor(SaveCellularTrafficRequestInterceptor())\n    }\n}.build()\n\n// \u52a0\u8f7d\u56fe\u7247\u65f6\u4e3a\u5355\u4e2a ImageRequest \u6ce8\u518c\nImageRequest(context, \"https://example.com/image.jpg\") {\n    components {\n        addRequestInterceptor(SaveCellularTrafficRequestInterceptor())\n    }\n}\n</code></pre> <p>\u7136\u540e\u9488\u5bf9\u5355\u4e2a\u8bf7\u6c42\u5f00\u542f\u8282\u7701\u8702\u7a9d\u6d41\u91cf\u529f\u80fd\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    saveCellularTraffic(true)\n}\n</code></pre> <p>\u6700\u540e\u914d\u7f6e\u8282\u7701\u8702\u7a9d\u6d41\u91cf\u529f\u80fd\u4e13\u7528\u7684\u9519\u8bef\u72b6\u6001\u56fe\u7247\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// View\nImageRequest(context, \"https://example.com/image.jpg\") {\n    saveCellularTraffic(true)\n\n    error(\n        ConditionStateImage(defaultImage = R.drawable.ic_error) {\n            saveCellularTrafficError(R.drawable.ic_signal_cellular)\n        }\n    )\n}\n\n// Compose\nComposableImageRequest(context, \"https://example.com/image.jpg\") {\n    saveCellularTraffic(true)\n\n    error(\n        ComposableConditionStateImage(defaultImage = Res.drawable.ic_error) {\n            saveCellularTrafficError(Res.drawable.ic_signal_cellular)\n        }\n    )\n}\n</code></pre> <p>[!TIP] <code>saveCellularTrafficError(Res.drawable.ic_signal_cellular)</code> \u9700\u8981\u5bfc\u5165 <code>sketch-extensions-compose-resources</code> \u6a21\u5757</p>"},{"location":"zh/save_cellular_traffic/#_4","title":"\u70b9\u51fb\u5f3a\u5236\u52a0\u8f7d","text":"<p>[!IMPORTANT] 1. \u4ec5\u652f\u6301 Android View 2. \u6b64\u529f\u80fd\u9700\u8981\u4f7f\u7528 SketchImageView</p> <p>\u5f00\u542f\u70b9\u51fb ImageView \u5ffd\u7565\u8282\u7701\u8702\u7a9d\u6d41\u91cf\u5e76\u91cd\u65b0\u52a0\u8f7d\u56fe\u7247\u529f\u80fd\uff1a</p> <pre><code>sketchImageView.setClickIgnoreSaveCellularTrafficEnabled(true)\n</code></pre>"},{"location":"zh/sketch_image_view/","title":"SketchImageView","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u63d0\u4f9b\u4e86\u4e00\u4e2a SketchImageView \u7ec4\u4ef6\uff0c\u5b83\u914d\u5408 Sketch \u4f7f\u7528\u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u52a0\u8f7d\u56fe\u7247\uff0c\u652f\u6301 xml \u5c5e\u6027\u914d\u7f6e\u8bf7\u6c42\u5c5e\u6027\uff0c\u652f\u6301 flow \u7684\u65b9\u5f0f\u76d1\u542c\u8bf7\u6c42\u7684\u72b6\u6001\u548c\u7ed3\u679c\uff0c\u8fd8\u652f\u6301\u663e\u793a\u4e0b\u8f7d\u8fdb\u5ea6\u548c\u56fe\u7247\u7c7b\u578b\u89d2\u6807\u7b49\u529f\u80fd</p>"},{"location":"zh/sketch_image_view/#_1","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-extensions-view:${LAST_VERSION}\")\n</code></pre>"},{"location":"zh/sketch_image_view/#xml","title":"XML \u5c5e\u6027","text":"<p>SketchImageView \u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684 xml \u5c5e\u6027\u53ef\u4ee5\u5728\u5e03\u5c40\u4e2d\u914d\u7f6e\u8bf7\u6c42\u5c5e\u6027\uff0c\u5982\u4e0b\uff1a</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"&gt;\n\n    &lt;com.github.panpf.sketch.SketchImageView android:id=\"@+id/imageView\"\n        android:layout_width=\"300dp\" android:layout_height=\"300dp\"\n        android:contentDescription=\"@string/app_name\"\n        app:sketch_placeholder=\"@drawable/im_placeholder\" app:sketch_error=\"@drawable/im_error\"\n        app:sketch_fallback=\"@drawable/im_fallback\" app:sketch_crossfade=\"true\"\n        app:sketch_transformation=\"rotate\" app:sketch_transformation_rotate_degrees=\"55\" /&gt;\n&lt;/FrameLayout&gt;\n</code></pre> <p>\u66f4\u591a\u652f\u6301\u7684\u5c5e\u6027\u8bf7\u53c2\u8003 attrs \u6587\u4ef6</p>"},{"location":"zh/sketch_image_view/#requeststate","title":"RequestState","text":"<p>SketchImageView \u63d0\u4f9b\u4e86 flow \u7684\u65b9\u5f0f\u6765\u76d1\u542c\u8bf7\u6c42\u7684\u72b6\u6001\u548c\u7ed3\u679c\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val sketchImageView = SketchImageView(context)\n\n// \u6536\u96c6\u72b6\u6001\nscope.launch {\n    sketchImageView.requestState.loadState.collect {\n        when (it) {\n            is LoadState.Started -&gt; {\n                val request: ImageRequest = it.request\n            }\n            is LoadState.Success -&gt; {\n                val request: ImageRequest = it.request\n                val result: ImageResult.Success = it.result\n            }\n            is LoadState.Error -&gt; {\n                val request: ImageRequest = it.request\n                val result: ImageResult.Error = it.result\n            }\n            is LoadState.Canceled -&gt; {\n                val request: ImageRequest = it.request\n            }\n            else -&gt; {\n                // null\n            }\n        }\n    }\n}\n\n// \u6536\u96c6\u7ed3\u679c\nscope.launch {\n    sketchImageView.requestState.resultState.collect {\n        when (it) {\n            is ImageResult.Success -&gt; {\n            }\n            is ImageResult.Error -&gt; {\n            }\n            else -&gt; {\n                // null\n            }\n        }\n    }\n}\n\n// \u6536\u96c6\u8fdb\u5ea6\nscope.launch {\n    sketchImageView.requestState.progressState.collect {\n        if (it != null) {\n            val totalLength: Long = it.totalLength\n            val completedLength: Long = it.completedLength\n        } else {\n            // null\n        }\n    }\n}\n</code></pre>"},{"location":"zh/sketch_image_view/#_2","title":"\u5176\u5b83\u529f\u80fd","text":"<p>\u5f97\u76ca\u4e8e\u5b9e\u73b0\u4e86 ViewAbilityContainer \u63a5\u53e3\uff0cSketchImageView \u8fd8\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a</p> <ul> <li>\u663e\u793a\u4e0b\u8f7d\u8fdb\u5ea6</li> <li>\u663e\u793a\u56fe\u7247\u7c7b\u578b\u89d2\u6807</li> </ul>"},{"location":"zh/state_image/","title":"StateImage","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>StateImage \u7528\u6765\u4e3a\u52a0\u8f7d\u4e2d\u72b6\u6001\u548c\u9519\u8bef\u72b6\u6001\u63d0\u4f9b\u56fe\u7247\uff0c\u6709\u4ee5\u4e0b\u51e0\u79cd\u5b9e\u73b0\uff1a</p> <p>View \u4e13\u7528:</p> <ul> <li>DrawableStateImage\uff1a\u4f7f\u7528 Drawable \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247</li> <li>ColorDrawableStateImage\uff1a\u4f7f\u7528\u989c\u8272\u521b\u5efa ColorDrawable \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247</li> <li>IconDrawableStateImage\uff1a\u4f7f\u7528 IconDrawable \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247\u3002\u53ef\u4ee5\u786e\u4fdd\u56fe\u6807\u5927\u5c0f\u59cb\u7ec8\u4e0d\u53d8\uff0c\u4e0d\u53d7\u7ec4\u4ef6\u7684\u7f29\u653e\u5f71\u54cd\uff0c\u9002\u5408\u7528\u5728\u7011\u5e03\u6d41\u5e03\u5c40\u4e2d</li> <li>IconAnimatableDrawableStateImage\uff1a\u4f7f\u7528 IconAnimatableDrawable   \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247\u3002\u53ef\u4ee5\u786e\u4fdd\u56fe\u6807\u5927\u5c0f\u59cb\u7ec8\u4e0d\u53d8\uff0c\u4e0d\u53d7\u7ec4\u4ef6\u7684\u7f29\u653e\u5f71\u54cd\uff0c\u9002\u5408\u7528\u5728\u7011\u5e03\u6d41\u5e03\u5c40\u4e2d</li> </ul> <p>Compose \u4e13\u7528:</p> <ul> <li>PainterStateImage\uff1a\u4f7f\u7528 Painter \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247</li> <li>ColorPainterStateImage\uff1a\u4f7f\u7528\u989c\u8272\u521b\u5efa ColorPainter \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247</li> <li>IconPainterStateImage\uff1a\u4f7f\u7528 IconPainter \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247\u3002\u53ef\u4ee5\u786e\u4fdd\u56fe\u6807\u5927\u5c0f\u59cb\u7ec8\u4e0d\u53d8\uff0c\u4e0d\u53d7\u7ec4\u4ef6\u7684\u7f29\u653e\u5f71\u54cd\uff0c\u9002\u5408\u7528\u5728\u7011\u5e03\u6d41\u5e03\u5c40\u4e2d</li> <li>IconAnimatablePainterStateImage\uff1a\u4f7f\u7528 IconAnimatablePainter   \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247\u3002\u53ef\u4ee5\u786e\u4fdd\u56fe\u6807\u5927\u5c0f\u59cb\u7ec8\u4e0d\u53d8\uff0c\u4e0d\u53d7\u7ec4\u4ef6\u7684\u7f29\u653e\u5f71\u54cd\uff0c\u9002\u5408\u7528\u5728\u7011\u5e03\u6d41\u5e03\u5c40\u4e2d</li> </ul> <p>\u901a\u7528:</p> <ul> <li>CurrentStateImage\uff1a\u4f7f\u7528\u7ec4\u4ef6\u5f53\u524d\u7684 Image \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247</li> <li>MemoryCacheStateImage\uff1a\u4f7f\u7528\u7ed9\u5b9a\u7684\u5185\u5b58\u7f13\u5b58 key \u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u83b7\u53d6 Image \u4f5c\u4e3a\u72b6\u6001\u56fe\u7247\uff0c\u642d\u914d crossfade   \u53ef\u4ee5\u5b9e\u73b0\u4ece\u5c0f\u56fe\u5230\u5927\u56fe\u7684\u5b8c\u7f8e\u8fc7\u6e21</li> <li>ThumbnailMemoryCacheStateImage\uff1aMemoryCacheStateImage \u7684\u7b80\u5316\u7248\uff0c\u4f7f\u7528\u7ed9\u5b9a\u7684\u6216\u5f53\u524d\u8bf7\u6c42\u7684 uri   \u5339\u914d\u5185\u5b58\u7f13\u5b58\u4e2d\u7684\u5bbd\u9ad8\u6bd4\u548c\u539f\u56fe\u4e00\u81f4\uff0c\u5e76\u4e14\u6ca1\u6709\u7528 Transformation \u4fee\u6539\u7684\u7f29\u7565\u56fe\u4f5c\u4e3a\u72b6\u6001\u56fe\u7247\u3002\u540c\u6837\u642d\u914d   crossfade \u53ef\u4ee5\u5b9e\u73b0\u4ece\u5c0f\u56fe\u5230\u5927\u56fe\u7684\u5b8c\u7f8e\u8fc7\u6e21</li> <li>ConditionStateImage\uff1a\u53ef\u6839\u636e\u4e0d\u540c\u6761\u4ef6\u4f7f\u7528\u4e0d\u540c\u7684\u72b6\u6001\u56fe\u7247</li> </ul>"},{"location":"zh/state_image/#_1","title":"\u914d\u7f6e","text":"<p>StateImage \u7528\u5728 ImageRequest \u548c ImageOptions \u7684 placeholder(), fallback(), error() \u65b9\u6cd5\uff0c\u5982\u4e0b\uff1a</p> <pre><code>// View\nImageRequest(context, \"https://example.com/image.jpg\") {\n  placeholder(R.drawable.placeholder)\n  placeholder(context.getEquitableDrawable(R.drawable.placeholder))\n  placeholder(IntColorDrawableStateImage(Color.Gray))\n  placeholder(DrawableStateImage(R.drawable.placeholder))\n  placeholder(IconDrawableStateImage(icon = R.drawable.placeholder, background = IntColorFetcher(Color.GRAY)))\n  placeholder(ConditionStateImage(defaultResId = R.drawable.error){\n    addState(condition = MyCondition, resId = R.drawable.mystate)\n  })\n\n  fallback(R.drawable.fallback)\n  fallback(context.getEquitableDrawable(R.drawable.fallback))\n  fallback(IntColorDrawableStateImage(Color.RED))\n  fallback(DrawableStateImage(R.drawable.fallback))\n  fallback(IconDrawableStateImage(icon = R.drawable.fallback, background = IntColorFetcher(Color.RED)))\n  fallback(ConditionStateImage(defaultResId = R.drawable.error) {\n    addState(condition = MyCondition, resId = R.drawable.mystate)\n  })\n\n  error(R.drawable.error)\n  error(context.getEquitableDrawable(R.drawable.error))\n  error(IntColorDrawableStateImage(Color.RED))\n  error(DrawableStateImage(R.drawable.error))\n  error(IconDrawableStateImage(icon = R.drawable.error, background = IntColorFetcher(Color.RED)))\n  error(ConditionStateImage(defaultResId = R.drawable.error) {\n    addState(condition = MyCondition, resId = R.drawable.mystate)\n  })\n}\n\n// Compose\nComposableImageRequest(\"https://example.com/image.jpg\") {\n  placeholder(Res.drawable.placeholder)\n  placeholder(rememberPainterStateImage(Res.drawable.placeholder))\n  placeholder(rememberColorPainterStateImage(Color.Gray))\n  placeholder(rememberIconPainterStateImage(Res.drawable.placeholder, background = Color.Gray))\n  placeholder(ComposableConditionStateImage(defaultImage = Res.drawable.placeholder){\n    addState(condition = MyCondition, stateImage = Res.drawable.mystate)\n  })\n\n  fallback(Res.drawable.fallback)\n  fallback(rememberPainterStateImage(Res.drawable.fallback))\n  fallback(rememberColorPainterStateImage(Color.Red))\n  fallback(rememberIconPainterStateImage(Res.drawable.fallback, background = Color.Red))\n  fallback(ComposableConditionStateImage(defaultImage = Res.drawable.fallback){\n    addState(condition = MyCondition, stateImage = Res.drawable.mystate)\n  })\n\n  error(Res.drawable.error)\n  error(rememberPainterStateImage(Res.drawable.error))\n  error(rememberColorPainterStateImage(Color.Red))\n  error(rememberIconPainterStateImage(Res.drawable.error, background = Color.Red))\n  error(ComposableConditionStateImage(defaultImage = Res.drawable.error){\n    addState(condition = MyCondition, stateImage = Res.drawable.mystate)\n  })\n}\n</code></pre> <p>[!TIP] \u9700\u8981\u5bfc\u5165 <code>sketch-compose-resources</code> \u6a21\u5757 placeholder\u3001fallback\u3001error \u624d\u80fd\u652f\u6301 compose resources \u7684 DrawableResource</p>"},{"location":"zh/state_image/#_2","title":"\u81ea\u5b9a\u4e49","text":"<p>\u53ef\u53c2\u8003\u73b0\u6709 StateImage \u7684\u5b9e\u73b0</p>"},{"location":"zh/state_image/#conditionstateimage","title":"ConditionStateImage","text":"<p>ConditionStateImage \u652f\u6301\u6839\u636e\u4e0d\u540c\u7684\u6761\u4ef6\u8fd4\u56de\u4e0d\u540c\u7684\u72b6\u6001\u56fe\u7247\uff0c\u4f60\u53ef\u4ee5\u5b9e\u73b0 ConditionStateImage .Condition \u63a5\u53e3\u6765\u6269\u5c55\u65b0\u7684\u7c7b\u578b\uff0c\u7136\u540e\u901a\u8fc7 ConditionStateImage.Builder.addState() \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5982\u4e0b\uff1a</p> <pre><code>object MyCondition : ConditionStateImage.Condition {\n\n    override fun accept(\n        request: ImageRequest,\n        throwable: Throwable?\n    ): Boolean = throwable is IOException\n}\n\n// View\nImageRequest(context, \"https://example.com/image.jpg\") {\n  error(ConditionStateImage(R.drawable.error) {\n    addState(condition = MyCondition, stateImage = DrawableStateImage(R.drawable.mystate))\n  })\n}\n\n// Compose\nComposableImageRequest(context, \"https://example.com/image.jpg\") {\n  error(ComposableConditionStateImage(Res.drawable.error) {\n    addState(condition = MyCondition, stateImage = DrawableStateImage(Res.drawable.mystate))\n  })\n}\n</code></pre>"},{"location":"zh/state_image/#iconstateimage","title":"Icon*StateImage","text":"<p>\u5728\u7011\u5e03\u6d41\u5e03\u5c40\u4e2d\u7531\u4e8e\u6bcf\u4e2a item \u7684\u5927\u5c0f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u6240\u6709 item \u4f7f\u7528\u540c\u4e00\u4e2a placeholder \u65f6\u7531\u4e8e\u7ec4\u4ef6\u7684\u7f29\u653e\u4f1a\u5bfc\u81f4\u5728\u9875\u9762\u4e0a\u770b\u8d77\u6765 placeholder \u4f1a\u6709\u5927\u6709\u5c0f</p> <p>\u9488\u5bf9\u8fd9\u6837\u7684\u60c5\u51b5\u4f7f\u7528 Icon*StateImage \u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u95ee\u9898\uff0cIcon*StateImage \u7531\u4e00\u4e2a\u56fe\u6807\u548c\u4e00\u4e2a\u80cc\u666f\u7ec4\u6210\uff0c\u56fe\u6807\u4e0d\u53d7\u7ec4\u4ef6\u7f29\u653e\u5f71\u54cd\u56fe\u6807\u59cb\u7ec8\u4fdd\u6301\u56fa\u5b9a\u5927\u5c0f\u4e0d\u53d8\uff0c\u8fd9\u6837\u9875\u9762\u4e0a\u770b\u8d77\u6765\u6240\u6709 placeholder \u90fd\u662f\u4e00\u6837\u7684\u5927\u5c0f</p>"},{"location":"zh/state_image/#thumbnailmemorycachestateimage","title":"ThumbnailMemoryCacheStateImage","text":"<p>\u4ece\u56fe\u7247\u5217\u8868\u9875\u9762\u8df3\u5230\u56fe\u7247\u8be6\u60c5\u9875\u65f6\u6211\u4eec\u5e0c\u671b\u80fd\u7528\u5217\u8868\u9875\u9762\u5df2\u52a0\u8f7d\u7684\u7f29\u7565\u56fe\u7247\u4f5c\u4e3a\u8be6\u60c5\u9875\u52a0\u8f7d\u5927\u56fe\u65f6\u7684\u5360\u4f4d\u56fe</p> <p>\u8fd9\u6837\u5728\u914d\u5408\u4e0a <code>crossfade(fadeStart = false)</code> \u5728\u5927\u56fe\u52a0\u8f7d\u5b8c\u6210\u65f6\u9875\u9762\u4e0a\u770b\u8d77\u6765\u4f1a\u4ece\u8f83\u6a21\u7cca\u7684\u56fe\u7247\u9010\u6e10\u53d8\u4e3a\u4e00\u5f20\u6e05\u6670\u7684\u56fe\u7247\uff0c\u8fd9\u6837\u7684\u6548\u679c\u4f1a\u6bd4\u8f83\u597d</p> <p>ThumbnailMemoryCacheStateImage \u5c31\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u975e\u5e38\u65b9\u4fbf\u7684\u4ece\u5185\u5b58\u7f13\u5b58\u4e2d\u5bfb\u627e\u7684\u7f29\u7565\u56fe\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    placeholder(ThumbnailMemoryCacheStateImage())\n    crossfade(fadeStart = false)\n}\n</code></pre> <p>ThumbnailMemoryCacheStateImage \u9ed8\u8ba4\u4f1a\u7528\u5f53\u524d ImageRequest \u7684 uri \u53bb\u5185\u5b58\u4e2d\u5bfb\u627e\u7f29\u7565\u56fe\uff0c\u4f46\u5982\u679c\u5217\u8868\u9875\u9762\u548c\u8be6\u60c5\u9875\u9762\u7528\u7684\u662f\u4e0d\u540c\u7684 uri \u5c31\u9700\u8981\u4e3b\u52a8\u6307\u5b9a\u5217\u8868\u9875\u9762\u7684 uri\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    placeholder(ThumbnailMemoryCacheStateImage(\"https://www.sample.com/image.jpg?widht=300\"))\n    crossfade(fadeStart = false)\n}\n</code></pre> <p>[!TIP] \u7f29\u7565\u56fe\u7684\u6807\u51c6\u4e3a\u5bbd\u9ad8\u6bd4\u4e00\u81f4\u5e76\u4e14\u6ca1\u6709\u7528\u4efb\u4f55 Transformation \u4fee\u6539\u7684\u56fe\u7247</p>"},{"location":"zh/svg/","title":"SVG","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u652f\u6301\u89e3\u7801 SVG \u9759\u6001\u56fe\u7247\uff0c\u7531 SvgDecoder \u63d0\u4f9b\u652f\u6301</p>"},{"location":"zh/svg/#_1","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-svg:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] <code>sketch-svg</code> \u6a21\u5757\u652f\u6301\u81ea\u52a8\u6ce8\u518c\u7ec4\u4ef6\uff0c\u6709\u5173\u7ec4\u4ef6\u6ce8\u518c\u7684\u8be6\u7ec6\u5185\u5bb9\u8bf7\u67e5\u770b\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/svg/#_2","title":"\u914d\u7f6e","text":"<p>ImageRequest \u548c ImageOptions \u652f\u6301\u4e00\u4e9b svg \u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.svg\") {\n    svgBackgroundColor(Color.WHITE)\n    svgCss(\"...\")    // Only Android \n}\n</code></pre>"},{"location":"zh/target/","title":"Target","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Target \u4e3b\u8981\u7684\u5de5\u4f5c\u662f\u7528\u6765\u663e\u793a Image\uff0c\u540c\u65f6\u8fd8\u8d1f\u8d23\u5728\u6784\u5efa ImageRequest \u65f6\u63d0\u4f9b SizeResolver\u3001ScaleDecider\u3001ResizeOnDrawHelper\u3001LifecycleResolver \u7b49\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u4f1a\u88ab\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u4f7f\u7528</p>"},{"location":"zh/target/#compose","title":"Compose","text":"<p>\u5c06 Image \u663e\u793a\u5230 Compose \u7ec4\u4ef6\u65f6\u4e0d\u9700\u8981\u4f60\u4e3b\u52a8\u8bbe\u7f6e target\uff0cAsyncImage \u548c AsyncImagePainter \u4f1a\u8bbe\u7f6e\uff0c\u4f60\u53ea\u9700\u8bbe\u7f6e\u5176\u5b83\u53c2\u6570\u5373\u53ef\uff0c\u5982\u4e0b\uff1a</p> <pre><code>AsyncIage(\n    rqeuest = ComposableImageRequest(\"https://example.com/image.jpg\") {\n        placeholder(Res.drawable.placeholder)\n        crossfade()\n    },\n    contentDescription = \"photo\",\n)\n</code></pre> <p>[!TIP] <code>placeholder(Res.drawable.placeholder)</code> \u9700\u8981\u5bfc\u5165 <code>sketch-compose-resources</code> \u6a21\u5757</p>"},{"location":"zh/target/#view","title":"View","text":"<p>\u5c06 Image \u663e\u793a\u5230 View \u65f6\u9700\u8981\u4f60\u4e3b\u52a8\u8bbe\u7f6e Target</p>"},{"location":"zh/target/#imageview","title":"ImageView","text":"<p>Sketch \u63d0\u4f9b\u4e86 ImageViewTarget \u7528\u6765\u5c06\u56fe\u7247\u663e\u793a\u5230 [ImageView]\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://www.example.com/image.jpg\") {\n    placeholder(R.drawable.placeholder)\n    crossfade()\n    target(imageView)\n}.enqueue(request)\n</code></pre>"},{"location":"zh/target/#remoteviews","title":"RemoteViews","text":"<p>Sketch \u8fd8\u63d0\u4f9b\u4e86 RemoteViewsTarget \u7528\u6765\u5c06\u56fe\u7247\u663e\u793a\u5230 RemoteViews\uff0c\u5982\u4e0b\uff1a</p> <pre><code>val remoteViews =\n    RemoteViews(context.packageName, R.layout.remote_views_notification)\n\nval notification = NotificationCompat.Builder(context, NOTIFICATION_CHANNEL_ID).apply {\n    setSmallIcon(R.mipmap.ic_launcher)\n    setContent(remoteViews)\n}.build()\n\nImageRequest(context, \"https://www.example.com/image.jpg\") {\n    resize(100.dp2px, 100.dp2px, scale = START_CROP)\n    target(\n        RemoteViewsTarget(\n            remoteViews = remoteViews,\n            imageViewId = R.id.remoteViewsNotificationImage,\n            ignoreNullDrawable = true,\n            onUpdated = {\n                val notificationManager =\n                    context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n                notificationManager.notify(1101, notification)\n            }\n        )\n    )\n}.enqueue()\n</code></pre> <p>[!TIP] 1. \u5982\u4e0a\u6240\u793a RemoteViewsTarget \u4ec5\u5c06 Drawable \u8f6c\u6362\u4e3a Bitmap \u5e76\u8c03\u7528 RemoteViews \u7684      setImageViewBitmap \u65b9\u6cd5\u8bbe\u7f6e Bitmap 2. \u6240\u4ee5\u8fd8\u9700\u8981\u4f60\u5728 onUpdated \u51fd\u6570\u4e2d\u5237\u65b0\u901a\u77e5\u6216 AppWidget \u624d\u80fd\u5c06 Bitmap \u663e\u793a\u5230\u5c4f\u5e55\u4e0a</p>"},{"location":"zh/transformation/","title":"Transformation","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Transformation \u53ef\u4ee5\u5bf9\u89e3\u7801\u5f97\u5230\u7684 Image \u8fdb\u884c\u8f6c\u6362\uff0cSketch \u5185\u7f6e\u4e86\u4ee5\u4e0b\u51e0\u79cd Transformation</p> <ul> <li>CircleCropTransformation\uff1a\u5c06\u56fe\u7247\u88c1\u526a\u6210\u5706\u5f62\u7684</li> <li>RotateTransformation\uff1a\u5c06\u56fe\u7247\u65cb\u8f6c\u6307\u5b9a\u89d2\u5ea6</li> <li>RoundedCornersTransformation\uff1a\u5c06\u56fe\u7247\u88c1\u526a\u6210\u5706\u89d2\u77e9\u5f62\u7684</li> <li>MaskTransformation\uff1a\u5c06\u56fe\u7247\u76d6\u4e0a\u4e00\u5c42\u989c\u8272\u906e\u7f69\uff0c\u5e38\u7528\u4e8e\u5c06\u56fe\u7247\u4f5c\u4e3a\u7a97\u53e3\u6216\u6a21\u5757\u7684\u80cc\u666f\u65f6\u5c06\u56fe\u7247\u53d8\u6697</li> <li>BlurTransformation\uff1a\u5c06\u56fe\u7247\u8fdb\u884c\u6a21\u7cca\u5904\u7406</li> </ul> <p>[!TIP] 1. Transformation \u4e0d\u652f\u6301\u52a8\u56fe\uff0c\u52a8\u56fe\u8bf7\u4f7f\u7528 animatedTransformation() \u51fd\u6570 2. \u5728\u4f7f\u7528 RoundedCornersTransformation \u65f6\u8bf7\u642d\u914d 'precision(Precision.EXACTLY)' \u4f7f\u7528\uff0c\u56e0\u4e3a\u5982\u679c\u539f\u56fe\u5c3a\u5bf8\u548c      resize \u5c3a\u5bf8\u4e0d\u4e00\u81f4\u65f6\uff0c\u6700\u7ec8\u5706\u89d2\u5728\u663e\u793a\u65f6\u4f1a\u88ab\u7f29\u653e\uff0c\u5bfc\u81f4\u5706\u89d2\u5927\u5c0f\u548c\u671f\u5f85\u7684\u4e0d\u4e00\u81f4</p>"},{"location":"zh/transformation/#_1","title":"\u914d\u7f6e","text":"<p>ImageRequest \u548c ImageOptions \u90fd\u63d0\u4f9b\u4e86 transformations \u65b9\u6cd5\u7528\u4e8e\u914d\u7f6e Transformation</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    transformations(CircleCropTransformation(), RoundedCornersTransformation(20f))\n}\n</code></pre>"},{"location":"zh/transformation/#_2","title":"\u81ea\u5b9a\u4e49","text":"<p>\u81ea\u5b9a\u4e49 Transformation \u65f6\u9700\u8981\u6ce8\u610f key \u5c5e\u6027\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a key \u5c5e\u6027\u7528\u4e8e\u6784\u5efa\u7f13\u5b58 key\uff0c\u6240\u4ee5\u8981\u4fdd\u8bc1 key \u5c5e\u6027\u7684\u552f\u4e00\u6027\u548c\u786e\u5b9a\u6027\uff1a</p> <ul> <li>\u540c\u4e00\u4e2a Transformation \u8f93\u5165\u76f8\u540c\u7684\u53c2\u6570\u8f93\u51fa\u76f8\u540c\u7684 key</li> <li>\u540c\u4e00\u4e2a Transformation \u8f93\u5165\u4e0d\u540c\u7684\u53c2\u6570\u8f93\u51fa\u4e0d\u540c\u7684 key</li> </ul> <p>[!TIP] \u81ea\u5b9a\u4e49\u7684 Transformation \u4e0d\u8981\u5bf9 transform \u65b9\u6cd5\u7684 input Image \u6267\u884c recycle()\uff0c\u8fd9\u4f1a\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u9519\u8bef</p>"},{"location":"zh/transition/","title":"Transition","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Transition \u7528\u6765\u914d\u7f6e\u65b0\u56fe\u7247\u663e\u793a\u65f6\u4e0e\u65e7\u56fe\u7247\u7684\u8fc7\u6e21\u65b9\u5f0f\uff0c\u9ed8\u8ba4\u63d0\u4f9b\u4e86 CrossfadeTransition \u652f\u6301\u6de1\u5165\u6de1\u51fa\u7684\u6548\u679c</p>"},{"location":"zh/transition/#_1","title":"\u914d\u7f6e","text":"<p>ImageRequest \u548c ImageOptions \u90fd\u63d0\u4f9b\u4e86 crossfade() \u65b9\u6cd5\u548c transitionFactory() \u65b9\u6cd5\u7528\u4e8e\u914d\u7f6e Transition \uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    crossfade()\n    // \u6216\n    transitionFactory(CrossfadeTransition.Factory())\n}\n</code></pre>"},{"location":"zh/transition/#_2","title":"\u81ea\u5b9a\u4e49","text":"<p>\u8bf7\u53c2\u8003 CrossfadeTransition \u7684\u5b9e\u73b0</p>"},{"location":"zh/transition/#_3","title":"\u5b8c\u7f8e\u8fc7\u6e21","text":"<p>CrossfadeTransition \u4ee5 placeholder \u56fe\u7247\u548c result \u56fe\u7247\u7684\u6700\u5927\u5bbd\u9ad8\u4f5c\u4e3a\u65b0\u56fe\u7247\u7684\u5bbd\u9ad8\uff0c\u7136\u540e\u5bf9 placeholder \u56fe\u7247\u548c result \u56fe\u7247\u8fdb\u884c\u7f29\u653e</p> <p>\u5982\u679c result \u56fe\u7247\u548c placeholder \u56fe\u7247\u7684\u5c3a\u5bf8\u4e0d\u4e00\u81f4\uff0c\u4f8b\u5982 result \u6bd4 placeholder \u5927\uff0cplaceholder \u56fe\u7247\u5728\u8fc7\u6e21\u5f00\u59cb\u65f6\u5c31\u4f1a\u88ab\u653e\u5927\uff0c\u867d\u7136\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u5feb\uff0c\u4f46\u8fd8\u662f\u5bb9\u6613\u770b\u51fa\u6765\u7684</p> <p>\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u6700\u597d\u529e\u6cd5\u5c31\u662f\u8ba9 placeholder \u56fe\u7247\u548c result \u56fe\u7247\u7684\u5c3a\u5bf8\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u501f\u52a9 ImageRequest \u548c ImageOptions \u7684 resizeOnDraw \u5c5e\u6027\u5c31\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e2a\u6548\u679c</p> <p>resizeOnDraw \u5c5e\u6027\u5c06\u4f1a\u7528 ResizePainter \u6216 ResizeDrawable \u5305\u88c5 placeholder \u3001error\u3001result \u56fe\u7247\uff0c\u7528ImageRequest.size \u4f5c\u4e3a\u65b0\u7684\u5c3a\u5bf8\uff0c\u518d\u7528 ImageRequest.scale \u5c5e\u6027\u5bf9\u56fe\u7247\u8fdb\u884c\u7f29\u653e\u3002\u4e86\u89e3 resizeOnDraw</p> <p>\u56e0\u6b64\u901a\u5e38\u5efa\u8bae CrossfadeTransition \u548c resizeOnDraw \u642d\u914d\u4f7f\u7528\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"https://example.com/image.jpg\") {\n    placeholder(R.drawable.im_placeholder)\n    crossfade()\n    resizeOnDraw()\n}\n</code></pre>"},{"location":"zh/video_frame/","title":"Video Frame","text":"<p>\u7ffb\u8bd1\uff1aEnglish</p> <p>Sketch \u63d0\u4f9b\u4e86 <code>sketch-video-*</code> \u7cfb\u5217\u6a21\u5757\u4ee5\u652f\u6301\u89e3\u7801\u89c6\u9891\u5e27</p> Module DecoderProvider Decoder Android iOS Desktop Web sketch-video VideoFrameDecoderProvider VideoFrameDecoder \u2705(API 27) \u274c \u274c \u274c sketch-video-ffmpeg FFmpegVideoFrameDecoderProvider FFmpegVideoFrameDecoder \u2705 \u274c \u274c \u274c <ul> <li>VideoFrameDecoder\uff1a<ul> <li>\u4f7f\u7528 Android \u5185\u7f6e\u7684 MediaMetadataRetriever \u7c7b\u89e3\u7801\u89c6\u9891\u5e27</li> <li>\u5efa\u8bae Android 8.1 \u53ca\u4ee5\u4e0a\u7248\u672c\u4f7f\u7528\uff0c\u56e0\u4e3a 8.0 \u53ca\u4ee5\u4e0b\u7248\u672c\u4e0d\u652f\u6301\u8bfb\u53d6\u5e27\u7684\u7f29\u7565\u56fe\uff0c\u5728\u89e3\u7801 4k   \u7b49\u8f83\u5927\u7684\u89c6\u9891\u65f6\u5c06\u6d88\u8017\u5927\u91cf\u7684\u5185\u5b58</li> </ul> </li> <li>FFmpegVideoFrameDecoder\uff1a<ul> <li>\u4f7f\u7528 wseemann/FFmpegMediaMetadataRetriever-project   \u5e93\u7684 FFmpegMediaMetadataRetriever \u7c7b\u89e3\u7801\u89c6\u9891\u5e27</li> <li>\u5e93\u4f53\u79ef\u5927\u6982 23MB</li> </ul> </li> </ul>"},{"location":"zh/video_frame/#_1","title":"\u5b89\u88c5\u7ec4\u4ef6","text":"<p><code>${LAST_VERSION}</code>:  (\u4e0d\u5305\u542b 'v')</p> <pre><code>implementation(\"io.github.panpf.sketch4:sketch-video:${LAST_VERSION}\")\n// or\nimplementation(\"io.github.panpf.sketch4:sketch-video-ffmpeg:${LAST_VERSION}\")\n</code></pre> <p>[!IMPORTANT] \u4e0a\u8ff0\u7ec4\u4ef6\u90fd\u652f\u6301\u81ea\u52a8\u6ce8\u518c\uff0c\u4f60\u53ea\u9700\u8981\u5bfc\u5165\u5373\u53ef\uff0c\u65e0\u9700\u989d\u5916\u914d\u7f6e\uff0c\u5982\u679c\u4f60\u9700\u8981\u624b\u52a8\u6ce8\u518c\uff0c \u8bf7\u9605\u8bfb\u6587\u6863\uff1a\u300a\u6ce8\u518c\u7ec4\u4ef6\u300b</p>"},{"location":"zh/video_frame/#_2","title":"\u914d\u7f6e","text":"<p>ImageRequest \u548c ImageOptions \u652f\u6301\u4e00\u4e9b\u89c6\u9891\u5e27\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u5982\u4e0b\uff1a</p> <pre><code>ImageRequest(context, \"file:///sdcard/sample.mp4\") {\n    // \u63d0\u53d6 1000000 \u5fae\u79d2\u5904\u7684\u5e27\n    videoFrameMicros(1000000)\n\n    // \u6216\u63d0\u53d6 10000 \u6beb\u79d2\u5904\u7684\u5e27\n    videoFrameMillis(10000)\n\n    // \u6216\u83b7\u53d6\u63d0\u53d6\u4e2d\u95f4\u7684\u5e27\n    videoFramePercentDuration(0.5f)\n\n    // \u8bbe\u7f6e\u6307\u5b9a\u65f6\u95f4\u5904\u65e0\u6cd5\u63d0\u53d6\u5e27\u65f6\u7684\u5904\u7406\u7b56\u7565\n    videoFrameOption(MediaMetadataRetriever.OPTION_CLOSEST)\n}\n</code></pre>"}]}